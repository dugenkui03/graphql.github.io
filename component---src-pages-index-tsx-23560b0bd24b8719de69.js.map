{"version":3,"sources":["webpack:///./src/Containers/Sections/Hero/index.tsx","webpack:///./src/Containers/Sections/SingleRequest/index.tsx","webpack:///./src/Containers/Sections/TypeSystem/index.tsx","webpack:///./src/Containers/Sections/PredictableResults/index.tsx","webpack:///./src/Containers/Sections/BringYourOwnCode/index.tsx","webpack:///./src/Containers/Sections/WithoutVersion/index.tsx","webpack:///./src/Containers/Sections/PowerFulTools/index.tsx","webpack:///./src/Containers/Sections/WhosUsing/index.tsx","webpack:///./src/pages/index.tsx"],"names":["Hero","className","aria-hidden","HeaderLinks","Search","searchID","src","alt","Prism","code","language","to","SingleRequest","id","width","height","TypeSysyem","useEffect","timer","typeHighlight","document","getElementById","queryHighlight","line","typeLines","queryLines","highlightLine","style","top","length","setTimeout","Math","random","clearTimeout","PredictableResults","showResponse","num","display","i","forward","type","split","map","c","key","Index","inView","delayBefore","step","WithoutVersion","interval","setInterval","clearInterval","PowerFulTools","href","target","rel","autoPlay","muted","loop","playsInline","WhosUsing","title","pageContext","Layout","TypeSystem"],"mappings":"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","file":"component---src-pages-index-tsx-23560b0bd24b8719de69.js","sourcesContent":["import { Link } from 'gatsby';\nimport React from 'react';\nimport HeaderLinks from '../../../components/HeaderLinks';\nimport Search from '../../../components/Search';\nimport Prism from '../../../components/Prism';\n\n\nconst Hero = () => {\n    return (\n      <div className=\"hero\">\n        <div className=\"abs\">\n          <header aria-hidden>\n            <section>\n              <HeaderLinks />\n              <Search searchID=\"hero-search-input\" />\n            </section>\n          </header>\n          <section className=\"intro\">\n            <div className=\"named-logo\">\n              <img src=\"/img/logo.svg\" alt=\"GraphQL Logo\" />\n              <h1>GraphQL</h1>\n            </div>\n\n            <div className=\"marketing-col\">\n              <h3>描述你的数据</h3>\n              <Prism\n                code={`type Project {\n  name: String\n  tagline: String\n  contributors: [User] \n}`}\n                language={\"graphql\"}\n              />\n            </div>\n\n            <div className=\"marketing-col\">\n              <h3>请求你所要的数据</h3>\n              <Prism\n                code={`{\n  project(name: \"GraphQL\") {\n    tagline\n  }\n}`}\n                language={\"graphql\"}\n              />\n            </div>\n\n            <div className=\"marketing-col\">\n              <h3>得到可预测的结果</h3>\n              <Prism\n                code={`{\n  \"project\": {\n    \"tagline\": \"A query language for APIs\"\n  }\n}`}\n                language={\"json\"}\n              />\n            </div>\n          </section>\n\n          <div className=\"buttons-unit\">\n            <Link className=\"button\" to=\"/code/\">\n              马上开始\n            </Link>\n            <Link className=\"button\" to=\"/learn/\">\n              了解更多\n            </Link>\n          </div>\n        </div>\n      </div>\n    )\n};\n\nexport default Hero;\n","import React from 'react';\nimport Prism from '../../../components/Prism';\n\nconst SingleRequest = () => {\n    return (\n        <div className=\"grayWash\">\n        <section className=\"point2\" id=\"single-request\">\n            <div className=\"prose\">\n                <h2>获取多个资源<br />只用一个请求</h2>\n                {/*Illustration: a query 2 or 3 levels deep]*/}\n                <p>GraphQL 查询不仅能够获得资源的属性，还能沿着资源间引用进一步查询。典型的 REST API 请求多个资源时得载入多个 URL，而 GraphQL 可以通过一次请求就获取你应用所需的所有数据。这样一来，即使是比较慢的移动网络连接下，使用 GraphQL 的应用也能表现得足够迅速。</p>\n            </div>\n          <div className=\"app-to-server\" aria-hidden>\n            <img\n              src=\"/img/phone.svg\"\n              width=\"496\"\n              height=\"440\"\n              className=\"phone\"\n            />\n            <div className=\"query\">\n              <Prism code={\n`{\n    hero {\n    name\n    friends {\n        name\n        }\n    }\n}`} language=\"graphql\" />\n            </div>\n            <div className=\"response\">\n            <Prism code={\n`{\n    \"hero\": {\n      \"name\": \"Luke Skywalker\",\n      \"friends\": [\n        { \"name\": \"Obi-Wan Kenobi\" },\n        { \"name\": \"R2-D2\" },\n        { \"name\": \"Han Solo\" },\n        { \"name\": \"Leia Organa\" }\n      ]\n    }\n}`} language=\"json\" />\n            </div>\n            <img\n              src=\"/img/server.svg\"\n              width=\"496\"\n              height=\"440\"\n              className=\"server\"\n            />\n          </div>\n        </section>\n      </div>\n    );\n};\n\nexport default SingleRequest;\n","import React, { useEffect } from \"react\"\nimport Prism from \"../../../components/Prism\"\n\nconst TypeSysyem = () => {\n  useEffect(() => {\n    const typeHighlight = document.getElementById(\"type-highlight\")\n    const queryHighlight = document.getElementById(\"query-highlight\")\n    let line = 0\n    const typeLines = [2, 6, 7, 6, 8, 13, 14, 9, 18, 19, 20, 13]\n    const queryLines = [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14]\n    let timer: any\n\n    const highlightLine = () => {\n      typeHighlight!.style.top = 17 * typeLines[line] - 9 + \"px\"\n      queryHighlight!.style.top = 17 * queryLines[line] - 9 + \"px\"\n      line = (line + 1) % typeLines.length\n      timer = setTimeout(highlightLine, 800 + Math.random() * 200)\n    }\n    highlightLine()\n    return () => clearTimeout(timer)\n  }, [])\n  return (\n    <section className=\"point3\" id=\"type-system\">\n        <div className=\"prose\">\n            <h2>描述所有的可能<br />类型系统</h2>\n            {/*Illustration of a type IDL following a query by line]*/}\n            {/*Under: a server <-> client (Capabilities, Requirements)]?*/}\n            <p>GraphQL API 基于类型和字段的方式进行组织，而非入口端点。你可以通过一个单一入口端点得到你所有的数据能力。GraphQL 使用类型来保证应用只请求可能的数据，还提供了清晰的辅助性错误信息。应用可以使用类型，而避免编写手动解析代码。</p>\n        </div>\n      <div className=\"window strong-typed-query\" aria-hidden>\n        <div className=\"query\">\n          <div id=\"query-highlight\" className=\"highlight\" />\n          <Prism\n            language=\"graphql\"\n            code={\n`{\n  hero {\n    name\n    friends {\n      name\n      homeWorld {\n        name\n        climate\n      }\n      species {\n        name\n        lifespan\n        origin {\n          name\n        }\n      }\n    }\n  }\n}`}\n          />\n        </div>\n        <div className=\"type-system\">\n          <div id=\"type-highlight\" className=\"highlight\" />\n          <Prism\n            language=\"graphql\"\n            code={\n`type Query {\n  hero: Character\n}\n\ntype Character {\n  name: String\n  friends: [Character]\n  homeWorld: Planet\n  species: Species\n}\n\ntype Planet {\n  name: String\n  climate: String\n}\n\ntype Species {\n  name: String\n  lifespan: Int\n  origin: Planet\n}`}\n          />\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default TypeSysyem\n","import React, { useEffect } from \"react\"\nimport Prism from \"../../../components/Prism\"\n\nconst PredictableResults = () => {\n  useEffect(() => {\n    const showResponse = (num: Number) => {\n      document.getElementById(\"r1\")!.style.display =\n        num === 1 ? \"block\" : \"none\"\n      document.getElementById(\"r2\")!.style.display =\n        num === 2 ? \"block\" : \"none\"\n      document.getElementById(\"r3\")!.style.display =\n        num === 3 ? \"block\" : \"none\"\n    }\n    let i = 0\n    let forward = true\n    let timer: any\n    timer = setTimeout(type, 2000)\n    showResponse(1)\n    function type() {\n      if (forward) {\n        if (document.getElementById(\"ch\" + i)) {\n          document.getElementById(\"ch\" + i)!.style.display = \"inline\"\n          i++\n          if (i === 20) {\n            forward = false\n            showResponse(3)\n            timer = setTimeout(type, 1500)\n          } else if (i === 11) {\n            showResponse(2)\n            timer = setTimeout(type, 1500)\n          } else {\n            timer = setTimeout(type, Math.random() * 180 + 70)\n          }\n        }\n      } else {\n        i--\n        if (document.getElementById(\"ch\" + i)) {\n          document.getElementById(\"ch\" + i)!.style.display = \"none\"\n          if (i === 0) {\n            forward = true\n            showResponse(1)\n            timer = setTimeout(type, 2000)\n          } else {\n            timer = setTimeout(type, 80)\n          }\n        }\n      }\n    }\n    return () => clearTimeout(timer)\n  }, [])\n  return (\n    <section className=\"point1\" id=\"predictable-results\">\n      <div className=\"prose\">\n        <h2>请求你所要的数据<br />不多不少</h2>\n        {/*[Illustration: just a simple query and response?]*/}\n        <p>向你的 API 发出一个 GraphQL 请求就能准确获得你想要的数据，不多不少。 GraphQL 查询总是返回可预测的结果。使用 GraphQL 的应用可以工作得又快又稳，因为控制数据的是应用，而不是服务器。</p>\n      </div>\n      <div className=\"window faux-graphiql\" aria-hidden>\n        <div className=\"query\">\n          <pre className=\"prism\">\n            {\"{\"}\n            {\"\\n  hero {\"}\n            {\"\\n    name\"}\n            {\"\\n    height\\n    mass\".split(\"\").map((c, i) => (\n              <span key={i} id={\"ch\" + i} className=\"ch\">\n                {c === \"\\n\" ? <br /> : c}\n              </span>\n            ))}\n            <span className=\"cursor\" />\n            {\"\\n  }\"}\n            {\"\\n}\"}\n          </pre>\n        </div>\n        <div className=\"response\">\n          <div id=\"r1\">\n            <Prism\n              language=\"json\"\n              code={\n`{\n  \"hero\": {\n      \"name\": \"Luke Skywalker\"\n  }\n}`}\n            />\n          </div>\n          <div id=\"r2\">\n            <Prism\n              language=\"json\"\n              code={\n`{\n  \"hero\": {\n      \"name\": \"Luke Skywalker\",\n      \"height\": 1.72\n  }\n}`}\n            />\n          </div>\n          <div id=\"r3\">\n            <Prism\n              language=\"json\"\n              code={\n`{\n  \"hero\": {\n      \"name\": \"Luke Skywalker\",\n      \"height\": 1.72,\n      \"mass\": 77\n  }\n}`}\n            />\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default PredictableResults\n","import React, { useEffect } from \"react\"\nimport Prism from \"../../../components/Prism\"\n\nconst Index = (): JSX.Element => {\n\n  useEffect(() => {\n    let i = 0\n    var inView = document.getElementById(\"leverageCodeView\")\n    var delayBefore = [800, 1800, 1200, 3000, 3000, 3000]\n    let timer: any\n    function step() {\n      inView!.className = \"step\" + i\n      i = (i + 1) % 6\n      timer = setTimeout(step, delayBefore[i])\n    }\n    step()\n    return () => clearTimeout(timer)\n  },[])\n\n  return (\n    <section className=\"point6\" id=\"bring-your-own-code\">\n        <div className=\"prose\">\n            <h2>使用你现有的<br />数据和代码</h2>\n            {/*Illustration of each field becoming a function?]*/}\n            <p>GraphQL 让你的整个应用共享一套 API，而不用被限制于特定存储引擎。GraphQL 引擎已经有多种语言实现，通过 GraphQL API 能够更好利用你的现有数据和代码。你只需要为类型系统的字段编写函数，GraphQL 就能通过优化并发的方式来调用它们。</p>\n        </div>\n      <div className=\"window leverage-code\" aria-hidden>\n        <div id=\"leverageCodeView\">\n          <Prism\n            language=\"graphql\"\n            code={\n`type Character {\n    name: String\n    homeWorld: Planet\n    friends: [Character]\n}`}\n          />\n          <Prism\n            language=\"javascript\"\n            code={\n`// type Character {\nclass Character {\n    // name: String\n    getName() {\n        return this._name\n    }\n    \n    // homeWorld: Planet\n    getHomeWorld() {\n        return fetchHomeworld(this._homeworldID)\n    }\n    \n    // friends: [Character]\n    getFriends() {\n        return this._friendIDs.map(fetchCharacter)\n    }\n}`}\n          />\n          <Prism\n            language=\"javascript\"\n            code={\n`# type Character {\nclass Character:\n  # name: String\n  def name(self):\n  return self._name\n\n  # homeWorld: Planet\n  def homeWorld(self):\n  return fetchHomeworld(self._homeworldID)\n\n  # friends: [Character]\n  def friends(self):\n  return map(fetchCharacter, self._friendIDs)\n`}\n          />\n          <Prism\n            language=\"javascript\"\n            code={`\n// type Character {\npublic class Character {\n  // name: String\n  public String Name { get; }\n\n  // homeWorld: Planet\n  public async Task<Planet> GetHomeWorldAsync() {\n    return await FetchHomeworldAsync(_HomeworldID);\n  }\n\n  // friends: [Character]\n  public async IEnumerable<Task<Character>> GetFriendsAsync() {\n    return _FriendIDs.Select(FetchCharacterAsync);\n  }\n}`}\n          />\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Index\n","import React, { useEffect } from \"react\"\nimport Prism from \"../../../components/Prism\"\n\nconst WithoutVersion = () => {\n  useEffect(() => {\n    let i = 0\n    let inView = document.getElementById(\"typeEvolveView\")\n    inView!.className = \"step\" + i\n    const interval = setInterval(function () {\n      i = (i + 1) % 7\n      inView!.className = \"step\" + i\n    }, 2200)\n    return () => clearInterval(interval)\n  })\n  return (\n    <div className=\"grayWash\">\n      <section className=\"point5\" id=\"without-versions\">\n      <div className=\"prose\">\n          <h2>API 演进<br />无需划分版本</h2>\n          {/*Illustration showing more legs added to a graph? Or a type evolving over time?]*/}\n          <p>给你的 GraphQL API 添加字段和类型而无需影响现有查询。老旧的字段可以废弃，从工具中隐藏。通过使用单一演进版本，GraphQL API 使得应用始终能够使用新的特性，并鼓励使用更加简洁、更好维护的服务端代码。</p>\n      </div>\n        <div className=\"window type-evolution\" aria-hidden>\n          <div id=\"typeEvolveView\">\n            <div className=\"v1\">\n              <Prism\n                language=\"graphql\"\n                code={\n`type Film {\n  title: String\n  episode: Int\n  releaseDate: String\n\n\n\n}`}\n              />\n            </div>\n            <div className=\"v2\">\n              <div className=\"add\" />\n              <Prism\n                language=\"graphql\"\n                code={\n`type Film {\n  title: String\n  episode: Int\n  releaseDate: String\n  openingCrawl: String\n\n\n}`}\n              />\n            </div>\n            <div className=\"v3\">\n              <div className=\"add\" />\n              <Prism\n                language=\"graphql\"\n                code={\n`type Film {\n  title: String\n  episode: Int\n  releaseDate: String\n  openingCrawl: String\n  director: String\n  \n}`}\n              />\n            </div>\n            <div className=\"v4\">\n              <div className=\"add\" />\n              <div className=\"add\" />\n              <div className=\"add\" />\n              <div className=\"add\" />\n              <div className=\"add\" />\n              <div className=\"add\" />\n              <div className=\"remove\" />\n              <Prism\n                language=\"graphql\"\n                code={\n`type Film {\n  title: String\n  episode: Int\n  releaseDate: String\n  openingCrawl: String\n  director: String\n  directedBy: Person\n}\n\ntype Person {\n  name: String\n  directed: [Film]\n  actedIn: [Film]\n}`}\n              />\n            </div>\n            <div className=\"v5\">\n              <div className=\"add\" />\n              <Prism\n                language=\"graphql\"\n                code={\n`type Film {\n  title: String\n  episode: Int\n  releaseDate: String\n  openingCrawl: String\n  director: String @deprecated\n  directedBy: Person\n}\n\ntype Person {\n  name: String\n  directed: [Film]\n  actedIn: [Film]\n  \n}`}\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  )\n}\n\nexport default WithoutVersion\n","import React from \"react\"\n\nconst PowerFulTools = () => {\n  return (\n    <div className=\"darkWash\">\n      <section className=\"point4\" id=\"powerful-tools\">\n        <div className=\"prose\">\n          <h2>快步前进<br />强大的开发者工具</h2>\n          {/*Illustration of GraphiQL validation error and typeahead, animated?]*/}\n          <p>不用离开编辑器就能准确知道你可以从 API 中请求的数据，发送查询之前就能高亮潜在问题，高级代码智能提示。利用 API 的类型系统，GraphQL 让你可以更简单地构建如同\n            <a href=\"https://github.com/graphql/graphiql\" target=\"_blank\" rel=\"noopener\">Graph<em>i</em>QL</a>\n            的强大工具。</p>\n        </div>\n        <div className=\"graphiqlVid\">\n          {\" \"}\n          <video autoPlay muted loop playsInline >\n            <source src=\"/img/graphiql.mp4?x\" type=\"video/mp4\" />\n          </video>\n        </div>\n      </section>\n    </div>\n  )\n}\n\nexport default PowerFulTools\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst WhosUsing = () => {\n  return (\n    <section className=\"powered-by\" id=\"whos-using\">\n      <div className=\"prose\">\n        <h2>谁在使用 GraphQL？</h2>\n        <p>Facebook 的移动应用从 2012 年就开始使用 GraphQL。GraphQL 规范于 2015 年开源，现已经在多种环境下可用，并被各种体量的团队所使用。</p>\n      </div>\n      <div className=\"logos\">\n        {/* Waiting for permission from some of the below */}\n        <a\n          href=\"https://www.facebook.com/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img src=\"/users/logos/facebook.png\" title=\"Facebook\" />\n        </a>\n        {/** /}\n    <a href=\"https://twitter.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <img src=\"/users/logos/twitter.png\" title=\"Twitter\" className=\"round\" />\n    </a>\n    {/**/}\n        <a\n          href=\"https://docs.github.com/en/graphql\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img src=\"/users/logos/github.png\" title=\"GitHub\" className=\"round\" />\n        </a>\n        <a\n          href=\"https://www.pinterest.com/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img\n            src=\"/users/logos/pinterest.png\"\n            title=\"Pinterest\"\n            className=\"round\"\n          />\n        </a>\n        {/** /}\n    <a href=\"https://www.airbnb.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <img src=\"/users/logos/airbnb.png\" title=\"Airbnb\" className=\"round\" />\n    </a>\n    {/**/}\n        <a\n          href=\"https://www.intuit.com/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img src=\"/users/logos/intuit.png\" title=\"Intuit\" />\n        </a>\n        <a\n          href=\"https://www.coursera.org/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img src=\"/users/logos/coursera.png\" title=\"Coursera\" />\n        </a>\n        <a\n          href=\"https://www.shopify.com/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img\n            src=\"/users/logos/shopify.png\"\n            title=\"Shopify\"\n            className=\"round\"\n          />\n        </a>\n      </div>\n\n      <Link to=\"/users\" className=\"button\">\n        更多 GraphQL 使用者\n      </Link>\n    </section>\n  )\n}\n\nexport default WhosUsing\n","import React from \"react\"\nimport Layout from \"../components/Layout\"\n\nimport Hero from \"../Containers/Sections/Hero\"\nimport SingleRequest from \"../Containers/Sections/SingleRequest\"\nimport TypeSystem from \"../Containers/Sections/TypeSystem\"\nimport PredictableResults from \"../Containers/Sections/PredictableResults\"\nimport BringYourOwnData from \"../Containers/Sections/BringYourOwnCode\"\nimport WithoutVersions from \"../Containers/Sections/WithoutVersion\"\nimport PowerFulTools from \"../Containers/Sections/PowerFulTools\"\nimport WhosUsing from \"../Containers/Sections/WhosUsing\"\n\nexport default ({ pageContext }) => {\n  return (\n    <Layout className={\"index\"} title=\"GraphQL | A query language for your API\" pageContext={pageContext}>\n      <Hero />\n      <section className=\"lead\">\n            <h1>一种用于 API 的查询语言</h1>\n            <p>GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。</p>\n      </section>\n      <PredictableResults />\n      <SingleRequest />\n      <TypeSystem />\n      <PowerFulTools />\n      <WithoutVersions />\n      <BringYourOwnData />\n      <WhosUsing />\n    </Layout>\n  )\n  }\n"],"sourceRoot":""}