{"componentChunkName":"component---src-templates-doc-tsx","path":"/learn/introspection/","result":{"data":{"doc":{"frontmatter":{"title":"内省","heroText":null,"date":null,"permalink":"/learn/introspection/","byline":null,"guestBio":null,"sublinks":null,"layout":"docs","tags":null},"id":"84ba833b-73ca-5aa1-a7f7-89637e035ad9","rawMarkdownBody":"\n我们有时候会需要去问 GraphQL Schema 它支持哪些查询。GraphQL 通过内省系统让我们可以做到这点！\n\n在我们的星战例子里，文件\n[starWarsIntrospection-test.js](https://github.com/graphql/graphql-js/blob/master/src/__tests__/starWarsIntrospection-test.js)\n包含了一系列展示了内省系统的查询，它也是一个测试文件，用来检验参考实现的内省系统。\n\n如果是我们亲自设计了类型，那我们自然知道哪些类型是可用的。但如果类型不是我们设计的，我们也可以通过查询 `__schema` 字段来向 GraphQL 询问哪些类型是可用的。一个查询的根类型总是有 `__schema` 这个字段。现在来试试，查询一下有哪些可用的类型。\n\n\n```graphql\n# { \"graphiql\": true }\n{\n  __schema {\n    types {\n      name\n    }\n  }\n}\n```\n\n哇，有好多类型！它们都是什么？我们来总结一下：\n\n - **Query, Character, Human, Episode, Droid** - 这些是我们在类型系统中定义的类型。\n - **String, Boolean** - 这些是内建的标量，由类型系统提供。\n - **\\_\\_Schema, \\_\\_Type, \\_\\_TypeKind, \\_\\_Field, \\_\\_InputValue,\n\\_\\_EnumValue, \\_\\_Directive** - 这些有着两个下划线的类型是内省系统的一部分。\n\n现在，来试试找到一个可以探索出有哪些可用查询的地方。当我们设计类型系统的时候，我们确定了一个所有查询开始的地方，来问问内省系统它是什么！\n\n```graphql\n# { \"graphiql\": true }\n{\n  __schema {\n    queryType {\n      name\n    }\n  }\n}\n```\n\n这和我们在类型系统那章里说的一样，`Query` 类型是我们开始的地方！注意这里的命名只是一个惯例，我们也可以把 `Query` 取成别的名字，只要我们把它定义为所有查询出发的地方，它也依然会在这里被返回。尽管如此，还是把它命名为 `Query` 吧，这是一个有用的惯例。\n\n有时候也需要检验一个特定的类型。来看看 `Droid` 类型：\n\n```graphql\n# { \"graphiql\": true }\n{\n  __type(name: \"Droid\") {\n    name\n  }\n}\n```\n\n如果我们想要更了解 `Droid` 呢？例如，它是一个接口还是一个对象？\n\n```graphql\n# { \"graphiql\": true }\n{\n  __type(name: \"Droid\") {\n    name\n    kind\n  }\n}\n```\n\n`kind` 返回一个枚举类型 `__TypeKind`，其中一个值是 `OBJECT`。如果我们改问 `Character`，我们会发现它是一个接口：\n\n```graphql\n# { \"graphiql\": true }\n{\n  __type(name: \"Character\") {\n    name\n    kind\n  }\n}\n```\n\n对于一个对象来说，知道它有哪些字段是很有用的，所以来问问内省系统 `Droid` 有哪些字段：\n\n```graphql\n# { \"graphiql\": true }\n{\n  __type(name: \"Droid\") {\n    name\n    fields {\n      name\n      type {\n        name\n        kind\n      }\n    }\n  }\n}\n```\n\n这些正是我们为 `Droid` 定义的字段！\n\n`id` 看起来有点儿奇怪，这个类型没有名字。这是因为它是一个 `NON_NULL` 类型的“包装” 。如果我们请求它的\n`ofType` 字段，我们会发现它是 `ID` ，告诉我们这是一个非空的 ID。\n\n相似地，`friends` 和 `appearsIn` 都没有名字，因为它们都是 `LIST` 包装类型。我们可以看看它们的 `ofType`，就能知道它们是装什么东西的列表。\n\n```graphql\n# { \"graphiql\": true }\n{\n  __type(name: \"Droid\") {\n    name\n    fields {\n      name\n      type {\n        name\n        kind\n        ofType {\n          name\n          kind\n        }\n      }\n    }\n  }\n}\n```\n\n最后我们来看看内省系统特别适合用来开发工具的特性，我们来向内省系统请求文档！\n\n```graphql\n# { \"graphiql\": true }\n{\n  __type(name: \"Droid\") {\n    name\n    description\n  }\n}\n```\n\n因此我们可以通过内省系统接触到类型系统的文档，并做出文档浏览器，或是提供丰富的 IDE 体验。\n\n这些只是内省系统的浅浅一层。我们还可以查询枚举值、某个类型实现了什么接口等等，我们甚至可以对内省系统内省。关于这个主题的详细说明可以看规范的“Introspection”部分，以及 GraphQL.js 中的 [introspection](https://github.com/graphql/graphql-js/blob/master/src/type/introspection.js) 文件，它包含了符合规范的一个内省系统的实现。\n"},"nextDoc":{"frontmatter":{"title":"GraphQL 最佳实践","permalink":"/learn/best-practices/"}}},"pageContext":{"permalink":"/learn/introspection/","nextPermalink":"/learn/best-practices/","sideBarData":[{"name":"学习","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/Introduction.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"GraphQL 入门","permalink":"/learn/","next":"/learn/queries/","category":"学习","sublinks":null,"sidebarTitle":"入门","date":null,"tags":null},"id":"217af6f3-a44a-5351-8b0b-a514befda9cb"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/Learn-Queries.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"查询和变更","permalink":"/learn/queries/","next":"/learn/schema/","category":"学习","sublinks":"字段（Fields）,参数（Arguments）,别名（Aliases）,片段（Fragments）,操作名称（Operation Name）,变量（Variables）,指令（Directives）,变更（Mutations）,内联片段（Inline Fragments）","sidebarTitle":null,"date":null,"tags":null},"id":"0af86a15-fe6e-51e8-9448-8ccf0f5318ff"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/Learn-Schema.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"Schema 和类型","permalink":"/learn/schema/","next":"/learn/validation/","category":"学习","sublinks":"类型系统（Type System）,类型语言（Type Language）,对象类型和字段（Object Types and Fields）,参数（Arguments）,查询和变更类型（The Query and Mutation Types）,标量类型（Scalar Types）,枚举类型（Enumeration Types）,列表和非空（Lists and Non-Null）,接口（Interfaces）,联合类型（Union Types）,输入类型（Input Types）","sidebarTitle":null,"date":null,"tags":null},"id":"3e8d3b3c-c3e5-5aed-9f80-009e9e446f45"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/Learn-Validation.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"验证","permalink":"/learn/validation/","next":"/learn/execution/","category":"学习","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"0565a5eb-cc67-5734-ba9e-eb2c441a0f83"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/Learn-Execution.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"执行","permalink":"/learn/execution/","next":"/learn/introspection/","category":"学习","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"7e913b82-a77d-57b8-914f-31035755ef87"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/Learn-Introspection.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"内省","permalink":"/learn/introspection/","next":"/learn/best-practices/","category":"学习","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"84ba833b-73ca-5aa1-a7f7-89637e035ad9"}]},{"name":"最佳实践","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-Introduction.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"GraphQL 最佳实践","permalink":"/learn/best-practices/","next":"/learn/thinking-in-graphs/","category":"最佳实践","sublinks":null,"sidebarTitle":"介绍","date":null,"tags":null},"id":"c7c0e36e-a4b0-53f1-9ac7-ef52f07896f2"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-ThinkingInGraphs.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"关于 Graphs 的思考","permalink":"/learn/thinking-in-graphs/","next":"/learn/serving-over-http/","category":"最佳实践","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"9f665c8f-58a7-5167-a378-c25b8438940c"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-ServingOverHTTP.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"通过 HTTP 提供服务","permalink":"/learn/serving-over-http/","next":"/learn/authorization/","category":"最佳实践","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"7138fa24-001e-5307-b82e-da9310ea9994"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-Authorization.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"授权","permalink":"/learn/authorization/","next":"/learn/pagination/","category":"最佳实践","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"82fda3e7-22a0-5bac-9684-864ca66055e6"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-Pagination.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"分页","permalink":"/learn/pagination/","next":"/learn/global-object-identification/","category":"最佳实践","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"0001ba04-90f9-545f-8418-deef3908c174"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-NodeInterface.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"全局对象识别","permalink":"/learn/global-object-identification/","next":"/learn/caching/","category":"最佳实践","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"40758357-fb23-5aee-b52a-66ab6080c0a1"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-Caching.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"缓存","permalink":"/learn/caching/","next":null,"category":"最佳实践","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"7d69862f-8b98-56bc-b11e-8c532131021a"}]}],"sourcePath":"src/content/learn/Learn-Introspection.md"}},"staticQueryHashes":["1581580458","4162432391"]}