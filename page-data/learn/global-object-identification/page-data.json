{"componentChunkName":"component---src-templates-doc-tsx","path":"/learn/global-object-identification/","result":{"data":{"doc":{"frontmatter":{"title":"全局对象识别","date":null,"permalink":"/learn/global-object-identification/","byline":null,"guestBio":null,"sublinks":null,"layout":"docs"},"id":"40758357-fb23-5aee-b52a-66ab6080c0a1","rawMarkdownBody":"\n> 一致的对象访问实现了简单的缓存和对象查找\n\n为了提供给 GraphQL 客户端选项以优雅地处理缓存和数据重新获取，GraphQL 服务端需要以标准化的方式公开对象标识符。\n\n为此客户端需要通过以 ID 请求对象的标准机制进行查询。然后在响应中，schema 将需要提供一种提供这些 ID 的标准方式。\n\n因为除了 ID 之外，对对象知之甚少，所以我们称它们为对象“节点”。这是一个查询节点的示例：\n\n```graphql\n{\n  node(id: \"4\") {\n    id\n    ... on User {\n      name\n    }\n  }\n```\n\n- GraphQL schema 的格式允许通过根查询对象上的 `node` 字段获取任何对象。返回的对象符合 “Node” [接口](/learn/schema/#interfaces)。\n- 可以安全地从响应中提取出 `id` 字段，并可以通过缓存和重新获取将其存储以供重用。\n- 客户端可以使用接口片段来提取特定于类型的、符合节点接口的其他信息。在本示例中为 “User”。\n\nNode 接口如下：\n\n```graphql\n# 具有全局唯一 ID 的对象\ninterface Node {\n  # 对象的 ID\n  id: ID!\n}\n```\n\nUser 通过以下方式符合接口：\n\n```graphql\ntype User implements Node {\n  id: ID!\n  # 全名\n  name: String!\n}\n```\n\n# 规范\n\n下面的所有内容以更加正式的要求描述了围绕对象标识的规范，以确保在服务端实现之间的一致性。\n这些规范是基于服务端如何与 [Relay][relay] API 客户端兼容来写的，但是对任何客户端都有用。\n\n# 保留类型\n\n与此规范兼容的 GraphQL 服务端必须保留某些类型和类型名称，以支持一致的对象标识模型。特别地，此规范为以下类型创建了准则：\n\n - 一个名为 `Node` 的接口。\n - 根查询类型上的 `node` 字段。\n\n# Node 接口\n\n服务端必须提供一个名为 `Node` 的接口。该接口必须有且仅有一个名为 `id` 的字段，该字段返回非空的 `ID`。\n\n这个 `id` 应当是该对象的全局唯一标识符，并且只要给出这个 `id`，服务端就应该能够重新获取该对象。\n\n## 内省\n\n正确实现上述接口的服务端将接受如下的内省查询，并返回提供的响应：\n\n```graphql\n{\n  __type(name: \"Node\") {\n    name\n    kind\n    fields {\n      name\n      type {\n        kind\n        ofType {\n          name\n          kind\n        }\n      }\n    }\n  }\n}\n```\n\n返回\n\n```json\n{\n  \"__type\": {\n    \"name\": \"Node\",\n    \"kind\": \"INTERFACE\",\n    \"fields\": [\n      {\n        \"name\": \"id\",\n        \"type\": {\n          \"kind\": \"NON_NULL\",\n          \"ofType\": {\n            \"name\": \"ID\",\n            \"kind\": \"SCALAR\"\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n# Node 根字段\n\n服务端必须提供一个名为 `node`，且返回 `Node` 接口的根字段。该根字段必须有且仅有一个参数，即名为 `id` 的非空ID。\n\n如果一个查询返回的对象实现了 `Node`，那么当服务端在 `Node` 的 `id` 字段中返回的值作为 `id` 参数传递给 `node` 的根字段时，该根字段应该重新获取相同的对象。\n\n服务端必须尽最大努力来获取此数据，但并非总能成功。例如，服务端可能会返回一个带有有效 `id` 的 `User`，但是当发出使用 `node` 根字段重新获取该用户的请求时，该用户的数据库可能不可用，或者该用户可能已删除了他的\n帐户。在这种情况下，查询该字段的结果应为 `null`。\n\n## 内省\n\n正确实现上述需求的服务端将接受如下的内省查询，并返回包含所提供响应的响应：\n\n```graphql\n{\n  __schema {\n    queryType {\n      fields {\n        name\n        type {\n          name\n          kind\n        }\n        args {\n          name\n          type {\n            kind\n            ofType {\n              name\n              kind\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n返回\n\n```json\n{\n  \"__schema\": {\n    \"queryType\": {\n      \"fields\": [\n        // 该数组可能还有其他条目\n        {\n          \"name\": \"node\",\n          \"type\": {\n            \"name\": \"Node\",\n            \"kind\": \"INTERFACE\"\n          },\n          \"args\": [\n            {\n              \"name\": \"id\",\n              \"type\": {\n                \"kind\": \"NON_NULL\",\n                \"ofType\": {\n                  \"name\": \"ID\",\n                  \"kind\": \"SCALAR\"\n                }\n              }\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n# 字段稳定性\n\n如果一个查询中出现两个对象，并且都使用相同的ID来实现 `Node`，则这两个对象必须相等。\n\n出于此定义的目的，对象相等性定义如下：\n \n - 如果在两个对象上都查询了一个字段，则在第一个对象上查询该字段的结果必须等于在第二个对象上查询该字段的结果。\n   - 如果该字段返回一个标量，则相等性定义为该标量的相等性。\n   - 如果该字段返回一个枚举，则相等性定义为两个字段都返回相同的枚举值。\n   - 如果该字段返回一个对象，则按照上述方法递归定义相等性。\n\n例如：\n\n```graphql\n{\n  fourNode: node(id: \"4\") {\n    id\n    ... on User {\n      name\n      userWithIdOneGreater {\n        id\n        name\n      }\n    }\n  }\n  fiveNode: node(id: \"5\") {\n    id\n    ... on User {\n      name\n      userWithIdOneLess {\n        id\n        name\n      }\n    }\n  }\n}\n```\n\n可能会返回：\n\n```json\n{\n  \"fourNode\": {\n    \"id\": \"4\",\n    \"name\": \"Mark Zuckerberg\",\n    \"userWithIdOneGreater\": {\n      \"id\": \"5\",\n      \"name\": \"Chris Hughes\"\n    }\n  },\n  \"fiveNode\": {\n    \"id\": \"5\",\n    \"name\": \"Chris Hughes\",\n    \"userWithIdOneLess\": {\n      \"id\": \"4\",\n      \"name\": \"Mark Zuckerberg\",\n    }\n  }\n}\n```\n\n由于 `fourNode.id` 与 `fiveNode.userWithIdOneLess.id` 相同，我们可以通过上述条件保证 `fourNode.name` 必须与 `fiveNode.userWithIdOneLess.name` 相同，并且确实如此。\n\n# 复数识别根字段\n\n想象一下一个名为 `username` 的根字段，该根字段使用用户的用户名为参数并返回对应的用户：\n\n```graphql\n{\n  username(username: \"zuck\") {\n    id\n  }\n}\n```\n\n可能会返回：\n\n```json\n{\n  \"username\": {\n    \"id\": \"4\",\n  }\n}\n```\n\n显然，我们可以将响应中的对象（ID 为 4 的用户）与请求链接起来，以用户名 “zuck” 识别对象。现在想象一下一个名为 `usernames` 的根字段，它包含一个用户名列表并返回一个对象列表：\n\n```graphql\n{\n  usernames(usernames: [\"zuck\", \"moskov\"]) {\n    id\n  }\n}\n```\n\n可能会返回：\n\n```json\n{\n  \"usernames\": [\n    {\n      \"id\": \"4\",\n    },\n    {\n      \"id\": \"6\"\n    }\n  ]\n}\n```\n\n为了使客户端能够将用户名链接到响应，它需要知道响应中的数组将与作为参数传递的数组大小相同，并且响应中的顺序将与参数中的顺序匹配。我们称这些为**复数识别根字段**，其要求如下所述。\n\n## 字段\n\n符合此规范的服务端可能会公开接受输入参数列表的根字段，并返回响应列表。为了使符合规范的客户端使用这些字段，这些字段必须是**复数识别根字段**，并且必须满足以下要求。\n\n注意：符合规范的服务端也可能会公开不是**复数识别根字段**的根字段。符合规范的客户端将无法在其查询中将这些字段用作根字段。\n\n**复数识别根字段**必须有且仅有一个参数。该参数的类型必须是非空的非空值列表。在我们的 `usernames` 示例中，该字段将使用名为 `usernames` 的单一参数，其类型（使用我们的类型系统速记）将为 `[String!]!`。\n\n**复数识别根字段**的返回类型必须是列表，或者包含一个列表的非空包装器。该列表必须包装 `Node` 接口，一个实现 `Node` 接口的对象或是包含这些类型的非空包装器。\n\n每当使用**复数识别根字段**时，响应中列表的长度必须与参数中列表的长度相同。响应中的每个项目都必须与输入中的项目相对应。\n更正式地来说，如果传递给根字段一个输入列表 `Lin` 使得输出值为 `Lout`，那么对于任意置换 `P`，传递根字段 `P(Lin)` 必须使得输出值为 `P(Lout)`。\n\n因此，建议服务端不要将为响应类型添加非空包装器，因为如果无法为输入中的给定条目获取对象，它仍然必须在输出中为该输入条目提供一个值；对这种情况来说 `null` 是一个有用的值。\n\n[relay]: https://facebook.github.io/relay/"},"nextDoc":{"frontmatter":{"title":"缓存","permalink":"/learn/caching/"}}},"pageContext":{"permalink":"/learn/global-object-identification/","nextPermalink":"/learn/caching/","sideBarData":[{"name":"学习","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/Introduction.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"GraphQL 入门","permalink":"/learn/","next":"/learn/queries/","category":"学习","sublinks":null,"sidebarTitle":"入门","date":null},"id":"217af6f3-a44a-5351-8b0b-a514befda9cb"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/Learn-Queries.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"查询和变更","permalink":"/learn/queries/","next":"/learn/schema/","category":"学习","sublinks":"字段（Fields）,参数（Arguments）,别名（Aliases）,片段（Fragments）,操作名称（Operation Name）,变量（Variables）,指令（Directives）,变更（Mutations）,内联片段（Inline Fragments）","sidebarTitle":null,"date":null},"id":"0af86a15-fe6e-51e8-9448-8ccf0f5318ff"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/Learn-Schema.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"Schema 和类型","permalink":"/learn/schema/","next":"/learn/validation/","category":"学习","sublinks":"类型系统（Type System）,类型语言（Type Language）,对象类型和字段（Object Types and Fields）,参数（Arguments）,查询和变更类型（The Query and Mutation Types）,标量类型（Scalar Types）,枚举类型（Enumeration Types）,列表和非空（Lists and Non-Null）,接口（Interfaces）,联合类型（Union Types）,输入类型（Input Types）","sidebarTitle":null,"date":null},"id":"3e8d3b3c-c3e5-5aed-9f80-009e9e446f45"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/Learn-Validation.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"验证","permalink":"/learn/validation/","next":"/learn/execution/","category":"学习","sublinks":null,"sidebarTitle":null,"date":null},"id":"0565a5eb-cc67-5734-ba9e-eb2c441a0f83"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/Learn-Execution.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"执行","permalink":"/learn/execution/","next":"/learn/introspection/","category":"学习","sublinks":null,"sidebarTitle":null,"date":null},"id":"7e913b82-a77d-57b8-914f-31035755ef87"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/Learn-Introspection.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"内省","permalink":"/learn/introspection/","next":"/learn/best-practices/","category":"学习","sublinks":null,"sidebarTitle":null,"date":null},"id":"84ba833b-73ca-5aa1-a7f7-89637e035ad9"}]},{"name":"最佳实践","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-Introduction.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"GraphQL 最佳实践","permalink":"/learn/best-practices/","next":"/learn/thinking-in-graphs/","category":"最佳实践","sublinks":null,"sidebarTitle":"介绍","date":null},"id":"c7c0e36e-a4b0-53f1-9ac7-ef52f07896f2"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-ThinkingInGraphs.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"关于 Graphs 的思考","permalink":"/learn/thinking-in-graphs/","next":"/learn/serving-over-http/","category":"最佳实践","sublinks":null,"sidebarTitle":null,"date":null},"id":"9f665c8f-58a7-5167-a378-c25b8438940c"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-ServingOverHTTP.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"通过 HTTP 提供服务","permalink":"/learn/serving-over-http/","next":"/learn/authorization/","category":"最佳实践","sublinks":null,"sidebarTitle":null,"date":null},"id":"7138fa24-001e-5307-b82e-da9310ea9994"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-Authorization.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"授权","permalink":"/learn/authorization/","next":"/learn/pagination/","category":"最佳实践","sublinks":null,"sidebarTitle":null,"date":null},"id":"82fda3e7-22a0-5bac-9684-864ca66055e6"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-Pagination.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"分页","permalink":"/learn/pagination/","next":"/learn/global-object-identification/","category":"最佳实践","sublinks":null,"sidebarTitle":null,"date":null},"id":"0001ba04-90f9-545f-8418-deef3908c174"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-NodeInterface.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"全局对象识别","permalink":"/learn/global-object-identification/","next":"/learn/caching/","category":"最佳实践","sublinks":null,"sidebarTitle":null,"date":null},"id":"40758357-fb23-5aee-b52a-66ab6080c0a1"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-Caching.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"缓存","permalink":"/learn/caching/","next":null,"category":"最佳实践","sublinks":null,"sidebarTitle":null,"date":null},"id":"7d69862f-8b98-56bc-b11e-8c532131021a"}]}],"sourcePath":"src/content/learn/BestPractice-NodeInterface.md"}},"staticQueryHashes":["1581580458"]}