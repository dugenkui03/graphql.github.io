{"componentChunkName":"component---src-templates-doc-tsx","path":"/learn/schema/","result":{"data":{"doc":{"frontmatter":{"title":"Schema 和类型","date":null,"permalink":"/learn/schema/","byline":null,"guestBio":null,"sublinks":"类型系统（Type System）,类型语言（Type Language）,对象类型和字段（Object Types and Fields）,参数（Arguments）,查询和变更类型（The Query and Mutation Types）,标量类型（Scalar Types）,枚举类型（Enumeration Types）,列表和非空（Lists and Non-Null）,接口（Interfaces）,联合类型（Union Types）,输入类型（Input Types）","layout":"docs"},"id":"3e8d3b3c-c3e5-5aed-9f80-009e9e446f45","rawMarkdownBody":"\n在本页，你将学到关于 GraphQL 类型系统中所有你需要了解的知识，以及类型系统如何描述可以查询的数据。因为 GraphQL 可以运行在任何后端框架或者编程语言之上，我们将摒除实现上的细节而仅仅专注于其概念。\n\n### 类型系统（Type System）\n\n如果你之前见到过 GraphQL 查询，你就知道 GraphQL 查询语言基本上就是关于选择对象上的字段。因此，例如在下列查询中：\n\n```graphql\n# { \"graphiql\": true }\n{\n  hero {\n    name\n    appearsIn\n  }\n}\n```\n\n1. 我们以一个特殊的对象 \"root\" 开始\n2. 选择其上的 `hero` 字段\n3. 对于 `hero` 返回的对象，我们选择 `name` 和 `appearsIn` 字段\n\n因为一个 GraphQL 查询的结构和结果非常相似，因此即便不知道服务器的情况，你也能预测查询会返回什么结果。但是一个关于我们所需要的数据的确切描述依然很有意义，我们能选择什么字段？服务器会返回哪种对象？这些对象下有哪些字段可用？这便是引入 schema 的原因。\n\n每一个 GraphQL 服务都会定义一套类型，用以描述你可能从那个服务查询到的数据。每当查询到来，服务器就会根据 schema 验证并执行查询。\n\n### 类型语言（Type Language）\n\nGraphQL 服务可以用任何语言编写，因为我们并不依赖于任何特定语言的句法句式（譬如 JavaScript）来与 GraphQL schema 沟通，我们定义了自己的简单语言，称之为 “GraphQL schema language” —— 它和 GraphQL 的查询语言很相似，让我们能够和 GraphQL schema 之间可以无语言差异地沟通。\n\n### 对象类型和字段（Object Types and Fields）\n\n一个 GraphQL schema 中的最基本的组件是对象类型，它就表示你可以从服务上获取到什么类型的对象，以及这个对象有什么字段。使用 GraphQL schema language，我们可以这样表示它：\n\n```graphql\ntype Character {\n  name: String!\n  appearsIn: [Episode!]!\n}\n```\n\n虽然这语言可读性相当好，但我们还是一起看看其用语，以便我们可以有些共通的词汇：\n\n- `Character` 是一个 **GraphQL 对象类型**，表示其是一个拥有一些字段的类型。你的 schema 中的大多数类型都会是对象类型。\n- `name` 和 `appearsIn` 是 `Character` 类型上的**字段**。这意味着在一个操作 `Character` 类型的 GraphQL 查询中的任何部分，都只能出现 `name` 和 `appearsIn` 字段。\n- `String` 是内置的**标量**类型之一 —— 标量类型是解析到单个标量对象的类型，无法在查询中对它进行次级选择。后面我们将细述标量类型。\n- `String!` 表示这个字段是**非空的**，GraphQL 服务保证当你查询这个字段后总会给你返回一个值。在类型语言里面，我们用一个感叹号来表示这个特性。\n- `[Episode!]!` 表示一个 `Episode` **数组**。因为它也是**非空的**，所以当你查询 `appearsIn` 字段的时候，你也总能得到一个数组（零个或者多个元素）。且由于 `Episode!` 也是**非空的**，你总是可以预期到数组中的每个项目都是一个 `Episode` 对象。\n\n现在你知道一个 GraphQL 对象类型看上去是怎样，也知道如何阅读基础的 GraphQL 类型语言了。\n\n### 参数（Arguments）\n\nGraphQL 对象类型上的每一个字段都可能有零个或者多个参数，例如下面的 `length` 字段：\n\n```graphql\ntype Starship {\n  id: ID!\n  name: String!\n  length(unit: LengthUnit = METER): Float\n}\n```\n\n所有参数都是具名的，不像 JavaScript 或者 Python 之类的语言，函数接受一个有序参数列表，而在 GraphQL 中，所有参数必须具名传递。本例中，`length` 字段定义了一个参数，`unit`。\n\n参数可能是必选或者可选的，当一个参数是可选的，我们可以定义一个**默认值** —— 如果 `unit` 参数没有传递，那么它将会被默认设置为 `METER`。\n\n### 查询和变更类型（The Query and Mutation Types）\n\n你的 schema 中大部分的类型都是普通对象类型，但是一个 schema 内有两个特殊类型：\n\n```graphql\nschema {\n  query: Query\n  mutation: Mutation\n}\n```\n\n每一个 GraphQL 服务都有一个 `query` 类型，可能有一个 `mutation` 类型。这两个类型和常规对象类型无差，但是它们之所以特殊，是因为它们定义了每一个 GraphQL 查询的**入口**。因此如果你看到一个像这样的查询：\n\n```graphql\n# { \"graphiql\": true }\nquery {\n  hero {\n    name\n  }\n  droid(id: \"2000\") {\n    name\n  }\n}\n```\n\n那表示这个 GraphQL 服务需要一个 `Query` 类型，且其上有 `hero` 和 `droid` 字段：\n\n```graphql\ntype Query {\n  hero(episode: Episode): Character\n  droid(id: ID!): Droid\n}\n```\n\n变更也是类似的工作方式 —— 你在 `Mutation` 类型上定义一些字段，然后这些字段将作为 mutation 根字段使用，接着你就能在你的查询中调用。\n\n有必要记住的是，除了作为 schema 的入口，`Query` 和 `Mutation` 类型与其它 GraphQL 对象类型别无二致，它们的字段也是一样的工作方式。\n\n### 标量类型（Scalar Types）\n\n一个对象类型有自己的名字和字段，而某些时候，这些字段必然会解析到具体数据。这就是标量类型的来源：它们表示对应 GraphQL 查询的叶子节点。\n\n下列查询中，`name` 和 `appearsIn` 字段将解析到标量类型：\n\n```graphql\n# { \"graphiql\": true }\n{\n  hero {\n    name\n    appearsIn\n  }\n}\n```\n\n我们知道这些字段没有任何次级字段 —— 因为让它们是查询的叶子节点。\n\nGraphQL 自带一组默认标量类型：\n\n- `Int`：有符号 32 位整数。\n- `Float`：有符号双精度浮点值。\n- `String`：UTF‐8 字符序列。\n- `Boolean`：`true` 或者 `false`。\n- `ID`：ID 标量类型表示一个唯一标识符，通常用以重新获取对象或者作为缓存中的键。ID 类型使用和 String 一样的方式序列化；然而将其定义为 ID 意味着并不需要人类可读型。\n\n大部分的 GraphQL 服务实现中，都有自定义标量类型的方式。例如，我们可以定义一个 `Date` 类型：\n\n```graphql\nscalar Date\n```\n\n然后就取决于我们的实现中如何定义将其序列化、反序列化和验证。例如，你可以指定 `Date` 类型应该总是被序列化成整型时间戳，而客户端应该知道去要求任何 date 字段都是这个格式。\n\n### 枚举类型（Enumeration Types）\n\n也称作**枚举（enum）**，枚举类型是一种特殊的标量，它限制在一个特殊的可选值集合内。这让你能够：\n\n1. 验证这个类型的任何参数是可选值的某一个\n2. 与类型系统沟通，一个字段总是一个有限值集合的其中一个值。\n\n下面是一个用 GraphQL schema 语言表示的 enum 定义：\n\n```graphql\nenum Episode {\n  NEWHOPE\n  EMPIRE\n  JEDI\n}\n```\n\n这表示无论我们在 schema 的哪处使用了 `Episode`，都可以肯定它返回的是 `NEWHOPE`、`EMPIRE` 和 `JEDI` 之一。\n\n注意，各种语言实现的 GraphQL 服务会有其独特的枚举处理方式。对于将枚举作为一等公民的语言，它的实现就可以利用这个特性；而对于像 JavaScript 这样没有枚举支持的语言，这些枚举值可能就被内部映射成整数值。当然，这些细节都不会泄漏到客户端，客户端会根据字符串名称来操作枚举值。\n\n### 列表和非空（Lists and Non-Null）\n\n对象类型、标量以及枚举是 GraphQL 中你唯一可以定义的类型种类。但是当你在 schema 的其他部分使用这些类型时，或者在你的查询变量声明处使用时，你可以给它们应用额外的**类型修饰符**来影响这些值的验证。我们先来看一个例子：\n\n```graphql\ntype Character {\n  name: String!\n  appearsIn: [Episode]!\n}\n```\n\n此处我们使用了一个 `String` 类型，并通过在类型名后面添加一个感叹号`!`将其标注为**非空**。这表示我们的服务器对于这个字段，总是会返回一个非空值，如果它结果得到了一个空值，那么事实上将会触发一个 GraphQL 执行错误，以让客户端知道发生了错误。\n\n非空类型修饰符也可以用于定义字段上的参数，如果这个参数上传递了一个空值（不管通过 GraphQL 字符串还是变量），那么会导致服务器返回一个验证错误。\n\n```graphql\n# { \"graphiql\": true, \"variables\": { \"id\": null } }\nquery DroidById($id: ID!) {\n  droid(id: $id) {\n    name\n  }\n}\n```\n\n列表的运作方式也类似：我们也可以使用一个类型修饰符来标记一个类型为 `List`，表示这个字段会返回这个类型的数组。在 GraphQL schema 语言中，我们通过将类型包在方括号（`[` 和 `]`）中的方式来标记列表。列表对于参数也是一样的运作方式，验证的步骤会要求对应值为数组。\n\n非空和列表修饰符可以组合使用。例如你可以要求一个非空字符串的数组：\n\n```graphql\nmyField: [String!]\n```\n\n这表示**数组本身**可以为空，但是其不能有任何空值成员。用 JSON 举例如下：\n\n```js\nmyField: null // 有效\nmyField: [] // 有效\nmyField: ['a', 'b'] // 有效\nmyField: ['a', null, 'b'] // 错误\n```\n\n然后，我们来定义一个不可为空的字符串数组：\n\n```graphql\nmyField: [String]!\n```\n\n这表示数组本身不能为空，但是其可以包含空值成员：\n\n```js\nmyField: null // 错误\nmyField: [] // 有效\nmyField: ['a', 'b'] // 有效\nmyField: ['a', null, 'b'] // 有效\n```\n\n你可以根据需求嵌套任意层非空和列表修饰符。\n\n### 接口（Interfaces）\n\n跟许多类型系统一样，GraphQL 支持接口。一个**接口**是一个抽象类型，它包含某些字段，而对象类型必须包含这些字段，才能算实现了这个接口。\n\n例如，你可以用一个 `Character` 接口用以表示《星球大战》三部曲中的任何角色：\n\n```graphql\ninterface Character {\n  id: ID!\n  name: String!\n  friends: [Character]\n  appearsIn: [Episode]!\n}\n```\n\n这意味着任何**实现** `Character` 的类型都要具有这些字段，并有对应参数和返回类型。\n\n例如，这里有一些可能实现了 `Character` 的类型：\n\n```graphql\ntype Human implements Character {\n  id: ID!\n  name: String!\n  friends: [Character]\n  appearsIn: [Episode]!\n  starships: [Starship]\n  totalCredits: Int\n}\n\ntype Droid implements Character {\n  id: ID!\n  name: String!\n  friends: [Character]\n  appearsIn: [Episode]!\n  primaryFunction: String\n}\n```\n\n可见这两个类型都具备 `Character` 接口的所有字段，但也引入了其他的字段 `totalCredits`、`starships` 和 `primaryFunction`，这都属于特定的类型的角色。\n\n当你要返回一个对象或者一组对象，特别是一组不同的类型时，接口就显得特别有用。\n\n注意下面例子的查询会产生错误：\n\n```graphql\n# { \"graphiql\": true, \"variables\": { \"ep\": \"JEDI\" } }\nquery HeroForEpisode($ep: Episode!) {\n  hero(episode: $ep) {\n    name\n    primaryFunction\n  }\n}\n```\n\n`hero` 字段返回 `Character` 类型，取决于 `episode` 参数，它可能是 `Human` 或者 `Droid` 类型。上面的查询中，你只能查询 `Character` 接口中存在的字段，而其中并不包含 `primaryFunction`。\n\n如果要查询一个只存在于特定对象类型上的字段，你需要使用内联片段：\n\n```graphql\n# { \"graphiql\": true, \"variables\": { \"ep\": \"JEDI\" } }\nquery HeroForEpisode($ep: Episode!) {\n  hero(episode: $ep) {\n    name\n    ... on Droid {\n      primaryFunction\n    }\n  }\n}\n```\n\n你可以在查询指南的 [内联片段](/learn/queries/#inline-fragments) 章节了解更多相关信息。\n\n### 联合类型（Union Types）\n\n联合类型和接口十分相似，但是它并不指定类型之间的任何共同字段。\n\n```graphql\nunion SearchResult = Human | Droid | Starship\n```\n\n在我们的schema中，任何返回一个 `SearchResult` 类型的地方，都可能得到一个 `Human`、`Droid` 或者 `Starship`。注意，联合类型的成员需要是具体对象类型；你不能使用接口或者其他联合类型来创造一个联合类型。\n\n这时候，如果你需要查询一个返回 `SearchResult` 联合类型的字段，那么你得使用内联片段才能查询任意字段。\n\n```graphql\n# { \"graphiql\": true}\n{\n  search(text: \"an\") {\n    __typename\n    ... on Human {\n      name\n      height\n    }\n    ... on Droid {\n      name\n      primaryFunction\n    }\n    ... on Starship {\n      name\n      length\n    }\n  }\n}\n```\n\n`_typename` 字段解析为 `String`，它允许你在客户端区分不同的数据类型。\n\n此外，在这种情况下，由于 `Human` 和 `Droid` 共享一个公共接口（`Character`），你可以在一个地方查询它们的公共字段，而不必在多个类型中重复相同的字段：\n\n```graphql\n{\n  search(text: \"an\") {\n    __typename\n    ... on Character {\n      name\n    }\n    ... on Human {\n      height\n    }\n    ... on Droid {\n      primaryFunction\n    }\n    ... on Starship {\n      name\n      length\n    }\n  }\n}\n```\n\n注意 `name` 仍然需要指定在 `Starship` 上，否则它不会出现在结果中，因为 `Starship` 并不是一个 `Character`！\n\n### 输入类型（Input Types） \n\n目前为止，我们只讨论过将例如枚举和字符串等标量值作为参数传递给字段，但是你也能很容易地传递复杂对象。这在变更（mutation）中特别有用，因为有时候你需要传递一整个对象作为新建对象。在 GraphQL schema language 中，输入对象看上去和常规对象一模一样，除了关键字是 `input` 而不是 `type`：\n\n```graphql\ninput ReviewInput {\n  stars: Int!\n  commentary: String\n}\n```\n\n你可以像这样在变更（mutation）中使用输入对象类型：\n\n```graphql\n# { \"graphiql\": true, \"variables\": { \"ep\": \"JEDI\", \"review\": { \"stars\": 5, \"commentary\": \"This is a great movie!\" } } }\nmutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) {\n  createReview(episode: $ep, review: $review) {\n    stars\n    commentary\n  }\n}\n```\n\n输入对象类型上的字段本身也可以指代输入对象类型，但是你不能在你的 schema 混淆输入和输出类型。输入对象类型的字段当然也不能拥有参数。\n"},"nextDoc":{"frontmatter":{"title":"验证","permalink":"/learn/validation/"}}},"pageContext":{"permalink":"/learn/schema/","nextPermalink":"/learn/validation/","sideBarData":[{"name":"学习","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/Introduction.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"GraphQL 入门","permalink":"/learn/","next":"/learn/queries/","category":"学习","sublinks":null,"sidebarTitle":"入门","date":null},"id":"217af6f3-a44a-5351-8b0b-a514befda9cb"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/Learn-Queries.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"查询和变更","permalink":"/learn/queries/","next":"/learn/schema/","category":"学习","sublinks":"字段（Fields）,参数（Arguments）,别名（Aliases）,片段（Fragments）,操作名称（Operation Name）,变量（Variables）,指令（Directives）,变更（Mutations）,内联片段（Inline Fragments）","sidebarTitle":null,"date":null},"id":"0af86a15-fe6e-51e8-9448-8ccf0f5318ff"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/Learn-Schema.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"Schema 和类型","permalink":"/learn/schema/","next":"/learn/validation/","category":"学习","sublinks":"类型系统（Type System）,类型语言（Type Language）,对象类型和字段（Object Types and Fields）,参数（Arguments）,查询和变更类型（The Query and Mutation Types）,标量类型（Scalar Types）,枚举类型（Enumeration Types）,列表和非空（Lists and Non-Null）,接口（Interfaces）,联合类型（Union Types）,输入类型（Input Types）","sidebarTitle":null,"date":null},"id":"3e8d3b3c-c3e5-5aed-9f80-009e9e446f45"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/Learn-Validation.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"验证","permalink":"/learn/validation/","next":"/learn/execution/","category":"学习","sublinks":null,"sidebarTitle":null,"date":null},"id":"0565a5eb-cc67-5734-ba9e-eb2c441a0f83"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/Learn-Execution.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"执行","permalink":"/learn/execution/","next":"/learn/introspection/","category":"学习","sublinks":null,"sidebarTitle":null,"date":null},"id":"7e913b82-a77d-57b8-914f-31035755ef87"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/Learn-Introspection.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"内省","permalink":"/learn/introspection/","next":"/learn/best-practices/","category":"学习","sublinks":null,"sidebarTitle":null,"date":null},"id":"84ba833b-73ca-5aa1-a7f7-89637e035ad9"}]},{"name":"最佳实践","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-Introduction.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"GraphQL 最佳实践","permalink":"/learn/best-practices/","next":"/learn/thinking-in-graphs/","category":"最佳实践","sublinks":null,"sidebarTitle":"介绍","date":null},"id":"c7c0e36e-a4b0-53f1-9ac7-ef52f07896f2"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-ThinkingInGraphs.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"关于 Graphs 的思考","permalink":"/learn/thinking-in-graphs/","next":"/learn/serving-over-http/","category":"最佳实践","sublinks":null,"sidebarTitle":null,"date":null},"id":"9f665c8f-58a7-5167-a378-c25b8438940c"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-ServingOverHTTP.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"通过 HTTP 提供服务","permalink":"/learn/serving-over-http/","next":"/learn/authorization/","category":"最佳实践","sublinks":null,"sidebarTitle":null,"date":null},"id":"7138fa24-001e-5307-b82e-da9310ea9994"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-Authorization.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"授权","permalink":"/learn/authorization/","next":"/learn/pagination/","category":"最佳实践","sublinks":null,"sidebarTitle":null,"date":null},"id":"82fda3e7-22a0-5bac-9684-864ca66055e6"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-Pagination.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"分页","permalink":"/learn/pagination/","next":"/learn/global-object-identification/","category":"最佳实践","sublinks":null,"sidebarTitle":null,"date":null},"id":"0001ba04-90f9-545f-8418-deef3908c174"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-NodeInterface.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"全局对象识别","permalink":"/learn/global-object-identification/","next":"/learn/caching/","category":"最佳实践","sublinks":null,"sidebarTitle":null,"date":null},"id":"40758357-fb23-5aee-b52a-66ab6080c0a1"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/learn/BestPractice-Caching.md","parent":{"relativeDirectory":"learn","sourceInstanceName":"content"},"frontmatter":{"title":"缓存","permalink":"/learn/caching/","next":null,"category":"最佳实践","sublinks":null,"sidebarTitle":null,"date":null},"id":"7d69862f-8b98-56bc-b11e-8c532131021a"}]}],"sourcePath":"src/content/learn/Learn-Schema.md"}},"staticQueryHashes":["1581580458"]}