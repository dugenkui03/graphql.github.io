{"componentChunkName":"component---src-pages-code-tsx","path":"/code/","result":{"pageContext":{"sourcePath":"src/pages/code.tsx","otherLibraries":{"Services":[{"name":"Altair","description":"An alternative to Postman that supports editing GraphQL queries directly and autoload your GraphQL schema.","howto":"","url":"https://altair.sirmuel.design/","sourcePath":"src/content/code/services/altair.md"},{"name":"Apollo Graph Manager","description":"A cloud service for monitoring the performance and usage of your GraphQL backend.","howto":"","url":"https://engine.apollographql.com","sourcePath":"src/content/code/services/apollo-graph-manager.md"},{"name":"AWS AppSync","description":"Fully managed GraphQL service with realtime subscriptions, offline programming & synchronization, and enterprise security features as well as fine grained authorization controls.","howto":"","url":"https://aws.amazon.com/appsync/","sourcePath":"src/content/code/services/aws-appsync.md"},{"name":"Elide","description":"A Java library that can expose a JPA annotated data model as a GraphQL service over any relational database.","howto":"","url":"https://elide.io","sourcePath":"src/content/code/services/elide.md"},{"name":"FaunaDB","description":"Create an instant GraphQL backend by importing a gql schema. The database will create relations and indexes for you, so you'll be ready to query in seconds, without writing any database code. Serverless pricing, free to get started.","howto":"","url":"https://docs.fauna.com/fauna/current/graphql","sourcePath":"src/content/code/services/faunadb.md"},{"name":"GraphCMS","description":"A BaaS (Backend as a Service) that sets you up with a GraphQL backend as well as tools for content editors to work with the stored data.","howto":"","url":"https://graphcms.com/","sourcePath":"src/content/code/services/graphcms.md"},{"name":"Hasura","description":"Hasura connects to your databases & microservices and instantly gives you a production-ready GraphQL API.","howto":"","url":"https://hasura.io","github":"hasura/graphql-engine","sourcePath":"src/content/code/services/hasura.md"},{"name":"LexasCMS","description":"A headless CMS (Content Management System) that combines powerful content personalisation and scheduling capabilities with a modern content editing experience and a blazing fast GraphQL/REST content delivery API.","howto":"","url":"https://www.lexascms.com","sourcePath":"src/content/code/services/lexascms.md"},{"name":"Moesif API Analytics","description":"A GraphQL analaytics and monitoring Service to find functional and performance issues.","howto":"","url":"https://www.moesif.com/features/graphql-analytics","sourcePath":"src/content/code/services/moesif-api-analytics.md"},{"name":"Postman","description":"An HTTP Client that supports editing GraphQL queries.","howto":"","url":"https://learning.postman.com/docs/sending-requests/supported-api-frameworks/graphql/","sourcePath":"src/content/code/services/postman.md"},{"name":"Prisma","description":"A BaaS (Backend as a Service) providing a GraphQL backend for your applications with a powerful web ui for managing your database and stored data.","howto":"","url":"https://www.prisma.io","github":"prisma/prisma","sourcePath":"src/content/code/services/prisma.md"},{"name":"Tipe","description":"A SaaS (Software as a Service) content management system that allows you to create your content with powerful editing tools and access it from anywhere with a GraphQL or REST API.","howto":"","url":"https://tipe.io","github":"tipeio/tipe","sourcePath":"src/content/code/services/tipe.md"}],"Tools":[{"name":"GraphQL Code Generator","description":"GraphQL code generator with flexible support for custom plugins and templates like Typescript (frontend and backend), React Hooks, resolvers signatures and more.","howto":"","url":"https://graphql-code-generator.com","github":"dotansimha/graphql-code-generator","npm":"@graphql-codegen/cli","sourcePath":"src/content/code/tools/graphql-code-generator.md","downloadCount":1107948},{"name":"quicktype","description":"Generate types for GraphQL queries in TypeScript, Swift, golang, C#, C++, and more.","howto":"","url":"https://quicktype.io/","github":"quicktype/quicktype","npm":"quicktype","sourcePath":"src/content/code/tools/quicktype.md","downloadCount":20624},{"name":"Schemathesis","description":"A modern API testing tool for web applications built with Open API and GraphQL specifications.","howto":"Install Schemathesis via `pip`:\n\n```bash\npip install schemathesis\n```\n\nThen, create a file `test_api.py` with the content below and replace the `URL` value with your own GraphQL endpoint URL:\n\n```python\nfrom hypothesis import settings\nimport schemathesis\n\nURL = \"https://your.app.com/graphql\"\nschema = schemathesis.graphql.from_url(URL)\n\n@schema.parametrize()\n@settings(deadline=None)\ndef test_api(case):\n    response = case.call()\n    case.validate_response(response)\n```\n\nThen run `pytest test_api.py`. Note that you can write your app in any programming language; the tool will communicate with it over HTTP.\n\nSchemathesis will generate valid queries automatically based on the schema and will minimize failing cases.\nFor example, running the code above against `https://bahnql.herokuapp.com/graphql` uncovers that running the `{ search(searchTerm: \"\") { stations { name } } }` query leads to a server error:\n\n```\n{\"errors\":[{\"message\":\"Cannot read property \\'city\\' of undefined\",\"locations\":[{\"line\":1,\"column\":28}],\"path\":[\"search\",\"stations\"]}],\"data\":null}\n```","url":"https://github.com/schemathesis/schemathesis","github":"schemathesis/schemathesis","sourcePath":"src/content/code/tools/schemathesis.md"}]},"languageList":[{"name":"C / C++","totalStars":0,"categoryMap":{"Tools":[{"name":"libgraphqlparser","description":"A GraphQL query language parser in C++ with C and C++ APIs.","howto":"","url":"https://github.com/graphql/libgraphqlparser","github":"graphql/libgraphqlparser","sourcePath":"src/content/code/language-support/c-c/tools/libgraphqlparser.md"}]}},{"name":"C# / .NET","totalStars":0,"categoryMap":{"Client":[{"name":"GraphQL.Client","description":"A GraphQL Client for .NET.","howto":"","url":"https://github.com/graphql-dotnet/graphql-client","github":"graphql-dotnet/graphql-client","sourcePath":"src/content/code/language-support/c-net/client/graphql-client.md"},{"name":"graphql-net-client","description":"Basic example GraphQL client for .NET.","howto":"","url":"https://github.com/bkniffler/graphql-net-client","github":"bkniffler/graphql-net-client","sourcePath":"src/content/code/language-support/c-net/client/graphql-net-client.md"},{"name":"SAHB.GraphQLClient","description":"GraphQL client which supports generating queries from C# classes","howto":"","url":"https://github.com/sahb1239/SAHB.GraphQLClient","github":"sahb1239/SAHB.GraphQLClient","sourcePath":"src/content/code/language-support/c-net/client/sahb-graphqlclient.md"},{"name":"Strawberry Shake","description":"Strawberry Shake is a open-source reactive GraphQL client for .NET","howto":"Strawberry Shake removes the complexity of state management and lets you interact with local and remote data through GraphQL.\n\nYou can use Strawberry Shake to:\n\n- Generate a C# client from your GraphQL queries.\n- Interact with local and remote data through GraphQL.\n- Use reactive APIs to interact with your state.\n\n```csharp\nclient.GetHero\n    .Watch(ExecutionStrategy.CacheFirst)\n    .Subscribe(result => \n    {\n        Console.WriteLine(result.Data.Name);\n    })\n```","url":"https://chillicream.com/docs/strawberryshake/","github":"ChilliCream/hotchocolate","sourcePath":"src/content/code/language-support/c-net/client/strawberry-shake.md"}],"Server":[{"name":"Entity GraphQL","description":".NET Core GraphQL library. Compiles to IQueryable to easily expose a schema from an existing data model (E.g. from an Entity Framework data model)","howto":"","url":"https://github.com/lukemurray/EntityGraphQL","github":"lukemurray/EntityGraphQL","sourcePath":"src/content/code/language-support/c-net/server/entity-graphql.md"},{"name":"graphql-dotnet","description":"GraphQL for .NET","howto":"```csharp\nusing System;\nusing System.Threading.Tasks;\nusing GraphQL;\nusing GraphQL.Types;\nusing GraphQL.SystemTextJson; // First add PackageReference to GraphQL.SystemTextJson\n\npublic class Program\n{\n  public static async Task Main(string[] args)\n  {\n    var schema = Schema.For(@\"\n      type Query {\n        hello: String\n      }\n    \");\n\n    var json = await schema.ExecuteAsync(_ =>\n    {\n      _.Query = \"{ hello }\";\n      _.Root = new { Hello = \"Hello World!\" };\n    });\n\n    Console.WriteLine(json);\n  }\n}                       \n```","url":"https://github.com/graphql-dotnet/graphql-dotnet","github":"graphql-dotnet/graphql-dotnet","sourcePath":"src/content/code/language-support/c-net/server/graphql-dotnet.md"},{"name":"graphql-net","description":"Convert GraphQL to IQueryable","howto":"","url":"https://github.com/ckimes89/graphql-net","github":"chkimes/graphql-net","sourcePath":"src/content/code/language-support/c-net/server/graphql-net.md"},{"name":"Hot Chocolate","description":"Hot Chocolate is an open-source GraphQL Server for .NET","howto":"Hot Chocolate takes the complexity away from building a fully-fledged GraphQL server and lets you focus on delivering the next big thing.\n\n```csharp\nusing Microsoft.AspNetCore;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\n\nWebHost\n    .CreateDefaultBuilder(args)\n    .ConfigureServices(services =>\n        services\n            .AddGraphQLServer()\n            .AddQueryType<Query>())\n    .Configure(builder =>\n        builder\n            .UseRouting()\n            .UseEndpoints(e => e.MapGraphQL()))\n    .Build()\n    .Run();\n\npublic class Query\n{\n    public Hero GetHero() => new Hero();\n}\n\npublic class Hero\n{\n    public string Name => \"Luke Skywalker\";\n}\n```","url":"https://chillicream.com/docs/hotchocolate/","github":"ChilliCream/hotchocolate","sourcePath":"src/content/code/language-support/c-net/server/hot-chocolate.md"},{"name":"NGraphQL","description":"A set of packages for implementing high-performant GraphQL servers in .NET. Faithful implementation of official 2018 Specification. Features batched execution support (aka Data Loader); support for custom scalars; HTTP server based on ASP.NET Core; parsed query cache; modular API construction (equivalent of schema stiching); full introspection support; runtime metrics and quotas.","howto":"","url":"https://github.com/rivantsov/ngraphql","github":"rivantsov/ngraphql","sourcePath":"src/content/code/language-support/c-net/server/ngraphql.md"}]}},{"name":"Clojure","totalStars":0,"categoryMap":{"Client":[{"name":"regraph","description":"A GraphQL client implemented in Clojurescript with support for websockets.","howto":"","url":"https://github.com/oliyh/re-graph/","github":"oliyh/re-graph","sourcePath":"src/content/code/language-support/clojure/client/regraph.md"}],"Server":[{"name":"alumbra","description":"A set of reusable GraphQL components for Clojure conforming to the data structures given in [alumbra.spec](https://github.com/alumbra/alumbra.spec).","howto":"```clojure\n(require '[alumbra.core :as alumbra]\n         '[claro.data :as data])\n\n(def schema\n  \"type Person { name: String!, friends: [Person!]! }\n   type QueryRoot { person(id: ID!): Person, me: Person! }\n   schema { query: QueryRoot }\")\n\n(defrecord Person [id]\n  data/Resolvable\n  (resolve! [_ _]\n    {:name    (str \"Person #\" id)\n     :friends (map ->Person  (range (inc id) (+ id 3)))}))\n\n(def QueryRoot\n  {:person (map->Person {})\n   :me     (map->Person {:id 0})})\n\n(def app\n  (alumbra/handler\n    {:schema schema\n     :query  QueryRoot}))\n\n(defonce my-graphql-server\n  (aleph.http/start-server #'app {:port 3000}))\n```\n\n```bash\n$ curl -XPOST \"http://0:3000\" -H'Content-Type: application/json' -d'{\n  \"query\": \"{ me { name, friends { name } } }\"\n}'\n{\"data\":{\"me\":{\"name\":\"Person #0\",\"friends\":[{\"name\":\"Person #1\"},{\"name\":\"Person #2\"}]}}}\n```","url":"https://github.com/alumbra/alumbra","github":"alumbra/alumbra","sourcePath":"src/content/code/language-support/clojure/server/alumbra.md"},{"name":"graphql-clj","description":"A Clojure library that provides a GraphQL implementation.","howto":"Code that executes a hello world GraphQL query with `graphql-clj`:\n```clojure\n\n(def schema \"type QueryRoot {\n    hello: String\n  }\")\n\n(defn resolver-fn [type-name field-name]\n  (get-in {\"QueryRoot\" {\"hello\" (fn [context parent & rest]\n                              \"Hello world!\")}}\n          [type-name field-name]))\n\n(require '[graphql-clj.executor :as executor])\n\n(executor/execute nil schema resolver-fn \"{ hello }\")\n```","url":"https://github.com/tendant/graphql-clj","github":"tendant/graphql-clj","sourcePath":"src/content/code/language-support/clojure/server/graphql-clj.md"},{"name":"lacinia","description":"A full implementation of the GraphQL specification that aims to maintain external compliance with the specification.","howto":"","url":"https://github.com/walmartlabs/lacinia","github":"walmartlabs/lacinia","sourcePath":"src/content/code/language-support/clojure/server/lacinia.md"}]}},{"name":"D","totalStars":0,"categoryMap":{"Server":[{"name":"graphqld","description":"A GraphQL implementaiton for the D Programming Language.","howto":"","url":"https://github.com/burner/graphqld","github":"burner/graphqld","sourcePath":"src/content/code/language-support/d/server/graphqld.md"}]}},{"name":"Elixir","totalStars":0,"categoryMap":{"Client":[{"name":"common_graphql_client","description":"Elixir GraphQL Client with HTTP and WebSocket support","howto":"","url":"https://github.com/annkissam/common_graphql_client","github":"annkissam/common_graphql_client","sourcePath":"src/content/code/language-support/elixir/client/common-graphql-client.md"},{"name":"Neuron","description":"A GraphQL client for Elixir","howto":"","url":"https://github.com/uesteibar/neuron","github":"uesteibar/neuron","sourcePath":"src/content/code/language-support/elixir/client/neuron.md"}],"Server":[{"name":"absinthe","description":"GraphQL implementation for Elixir.","howto":"","url":"https://github.com/absinthe-graphql/absinthe","github":"absinthe-graphql/absinthe","sourcePath":"src/content/code/language-support/elixir/server/absinthe.md"},{"name":"graphql-elixir","description":"An Elixir implementation of Facebook's GraphQL.","howto":"","url":"https://github.com/graphql-elixir/graphql","github":"graphql-elixir/graphql","sourcePath":"src/content/code/language-support/elixir/server/graphql-elixir.md"}]}},{"name":"Elm","totalStars":0,"categoryMap":{"Client":[{"name":"dillonkearns/elm-graphql","description":"Library and command-line code generator to create type-safe Elm code for a GraphQL endpoint.","howto":"","url":"https://github.com/dillonkearns/elm-graphql","github":"dillonkearns/elm-graphql","sourcePath":"src/content/code/language-support/elm/client/dillonkearns-elm-graphql.md"}]}},{"name":"Erlang","totalStars":0,"categoryMap":{"Server":[{"name":"graphql-erlang","description":"GraphQL implementation in Erlang.","howto":"","url":"https://github.com/shopgun/graphql-erlang","github":"jlouis/graphql-erlang","sourcePath":"src/content/code/language-support/erlang/server/graphql-erlang.md"}]}},{"name":"Flutter","totalStars":0,"categoryMap":{"Client":[{"name":"Ferry","description":"Ferry is a simple, powerful GraphQL Client for Flutter and Dart.","howto":"","url":"https://ferrygraphql.com/","github":"gql-dart/ferry","sourcePath":"src/content/code/language-support/flutter/client/ferry.md"},{"name":"graphql","description":"A GraphQL client implementation in Flutter.","howto":"","url":"https://github.com/zino-app/graphql-flutter#readme","github":"zino-app/graphql-flutter","sourcePath":"src/content/code/language-support/flutter/client/graphql.md"}]}},{"name":"Go","totalStars":0,"categoryMap":{"Client":[{"name":"go-graphql-client","description":"A GraphQL Go client with Mutation, Query and Subscription support.","howto":"","url":"https://github.com/hasura/go-graphql-client","github":"hasura/go-graphql-client","sourcePath":"src/content/code/language-support/go/client/go-graphql-client.md"},{"name":"graphql","description":"A GraphQL client implementation in Go.","howto":"","url":"https://github.com/shurcooL/graphql#readme","github":"shurcooL/graphql","sourcePath":"src/content/code/language-support/go/client/graphql.md"},{"name":"machinebox/graphql","description":"An elegant low-level HTTP client for GraphQL.","howto":"","url":"https://github.com/machinebox/graphql","github":"machinebox/graphql","sourcePath":"src/content/code/language-support/go/client/machinebox-graphql.md"}],"Server":[{"name":"99designs/gqlgen","description":"Go generate based graphql server library.","howto":"","url":"https://github.com/99designs/gqlgen","github":"99designs/gqlgen","sourcePath":"src/content/code/language-support/go/server/99designs-gqlgen.md"},{"name":"appointy/jaal","description":"Develop spec compliant GraphQL servers in Go.","howto":"","url":"https://github.com/appointy/jaal","github":"appointy/jaal","sourcePath":"src/content/code/language-support/go/server/appointy-jaal.md"},{"name":"graph-gophers/graphql-go","description":"An active implementation of GraphQL in Golang (was https://github.com/neelance/graphql-go).","howto":"","url":"https://github.com/graph-gophers/graphql-go","github":"graph-gophers/graphql-go","sourcePath":"src/content/code/language-support/go/server/graph-gophers-graphql-go.md"},{"name":"graphql-go","description":"An implementation of GraphQL for Go / Golang.","howto":"","url":"https://github.com/graphql-go/graphql","github":"graphql-go/graphql","sourcePath":"src/content/code/language-support/go/server/graphql-go.md"},{"name":"graphql-relay-go","description":"A Go/Golang library to help construct a graphql-go server supporting react-relay.","howto":"","url":"https://github.com/graphql-go/relay","github":"graphql-go/relay","sourcePath":"src/content/code/language-support/go/server/graphql-relay-go.md"},{"name":"samsarahq/thunder","description":"A GraphQL implementation with easy schema building, live queries, and batching.","howto":"","url":"https://github.com/samsarahq/thunder","github":"samsarahq/thunder","sourcePath":"src/content/code/language-support/go/server/samsarahq-thunder.md"}],"Tools":[{"name":"graphjin","description":"An instant GraphQL to SQL compiler. Use as a standalone service or a Go library. Formerly super-graph.","howto":"","url":"https://github.com/dosco/graphjin","github":"dosco/graphjin","sourcePath":"src/content/code/language-support/go/tools/graphjin.md"}]}},{"name":"Groovy","totalStars":0,"categoryMap":{"Server":[{"name":"gorm-graphql","description":"An automatic GraphQL schema generator for GORM","howto":"**Core Library** - The GORM GraphQL library provides functionality to generate a GraphQL schema based on your GORM entities. In addition to mapping domain classes to a GraphQL schema, the core library also provides default implementations of \"data fetchers\" to query, update, and delete data through executions of the schema.\n\n**Grails Plugin** - In a addition to the Core Library, the GORM GraphQL Grails Plugin:\n\n- Provides a controller to receive and respond to GraphQL requests through HTTP, based on their guidelines.\n\n- Generates the schema at startup with spring bean configuration to make it easy to extend.\n\n- Includes a [GraphiQL](https://github.com/graphql/graphiql) browser enabled by default in development. The browser is accessible at /graphql/browser.\n\n- Overrides the default data binder to use the data binding provided by Grails\n- Provides a [trait](https://grails.github.io/gorm-graphql/latest/api/org/grails/gorm/graphql/plugin/testing/GraphQLSpec.html) to make integration testing of your GraphQL endpoints easier\n\nSee [the documentation](https://grails.github.io/gorm-graphql/latest/guide/index.html) for more information.","url":"https://grails.github.io/gorm-graphql/latest/guide/index.html","github":"grails/gorm-graphql","sourcePath":"src/content/code/language-support/groovy/server/gorm-graphql.md"},{"name":"GQL","description":"GQL is a Groove library for GraphQL","howto":"","url":"https://grooviter.github.io/gql/","github":"grooviter/gql","sourcePath":"src/content/code/language-support/groovy/server/gql.md"}]}},{"name":"Haskell","totalStars":0,"categoryMap":{"Client":[{"name":"morpheus-graphql-client","description":"A strongly-typed GraphQL client implementation in Haksell.","howto":"","url":"https://github.com/morpheusgraphql/morpheus-graphql","github":"morpheusgraphql/morpheus-graphql","sourcePath":"src/content/code/language-support/haskell/client/morpheus-graphql-client.md"}],"Server":[{"name":"Morpheus GraphQL","description":"A Haskell library for building GraphQL APIs.","howto":"Hello world example with `morpheus-graphql`:\n\n```graphql\n# schema.gql\n\"\"\"\nA supernatural being considered divine and sacred\n\"\"\"\ntype Deity {\n  name: String!\n  power: String @deprecated(reason: \"no more supported\")\n}\ntype Query {\n  deity(name: String! = \"Morpheus\"): Deity!\n}\n```\n\n\n```haskell\n{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE DuplicateRecordFields #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE MultiParamTypeClasses #-}\n{-# LANGUAGE NamedFieldPuns #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE TemplateHaskell #-}\n{-# LANGUAGE TypeFamilies #-}\nmodule API (api) where\nimport Data.ByteString.Lazy.Char8 (ByteString)\nimport Data.Morpheus (interpreter)\nimport Data.Morpheus.Document (importGQLDocument)\nimport Data.Morpheus.Types (RootResolver (..), Undefined (..))\nimport Data.Text (Text)\nimportGQLDocument \"schema.gql\"\nrootResolver :: RootResolver IO () Query Undefined Undefined\nrootResolver =\n  RootResolver\n    { queryResolver = Query {deity},\n      mutationResolver = Undefined,\n      subscriptionResolver = Undefined\n    }\n  where\n    deity DeityArgs {name} =\n      pure\n        Deity\n          { name = pure name,\n            power = pure (Just \"Shapeshifting\")\n          }\napi :: ByteString -> IO ByteString\napi = interpreter rootResolver\n```\n\nSee [morpheus-graphql-examples](https://github.com/morpheusgraphql/morpheus-graphql) for more sophisticated APIs.","url":"https://github.com/morpheusgraphql/morpheus-graphql","github":"morpheusgraphql/morpheus-graphql","sourcePath":"src/content/code/language-support/haskell/server/morpheus-graphql.md"},{"name":"Mu-Haskell with Mu-GraphQL","description":"A Haskell library for building microservices (gRPC, HTTP) and GraphQL APIs.","howto":"Example implementation of a GraphQL server with type-level representation of the schema auto-generated:\n\n```haskell\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE NamedFieldPuns #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE PartialTypeSignatures #-}\n{-# LANGUAGE TypeApplications #-}\n{-# LANGUAGE TypeFamilies #-}\n{-# LANGUAGE TypeOperators #-}\n\n-- imports omitted for brevity...\n\ngraphql \"Library\" \"library.graphql\" -- all the magic happens here! 🪄🎩\n\n-- ... a bit more code...\n\nlibraryServer :: SqlBackend -> ServerT ObjectMapping i Library ServerErrorIO _\nlibraryServer conn =\n  resolver\n    ( object @\"Book\"\n        ( field @\"id\" bookId,\n          field @\"title\" bookTitle,\n          field @\"author\" bookAuthor,\n          field @\"imageUrl\" bookImage\n        ),\n      object @\"Author\"\n        ( field @\"id\" authorId,\n          field @\"name\" authorName,\n          field @\"books\" authorBooks\n        ),\n      object @\"Query\"\n        ( method @\"authors\" allAuthors,\n          method @\"books\" allBooks\n        ),\n      object @\"Mutation\"\n        ( method @\"newAuthor\" newAuthor,\n          method @\"newBook\" newBook\n        ),\n      object @\"Subscription\"\n        (method @\"allBooks\" allBooksConduit)\n    )\n  where\n    bookId :: Entity Book -> ServerErrorIO Integer\n    bookId (Entity (BookKey k) _) = pure $ toInteger k\n    -- ... more resolvers...\n```\n\nSee [our docs](https://higherkindness.io/mu-haskell/graphql/) for more information about how to build your own GraphQL server and [the library example](https://github.com/higherkindness/mu-graphql-example-elm) for a more end-to-end example that includes a client written in Elm!","url":"https://higherkindness.io/mu-haskell/","github":"higherkindness/mu-haskell","sourcePath":"src/content/code/language-support/haskell/server/mu-haskell.md"}]}},{"name":"Java / Kotlin","totalStars":0,"categoryMap":{"Client":[{"name":"Apollo Android","description":"A strongly-typed, caching GraphQL client for Android, written in Java.","howto":"","url":"https://github.com/apollographql/apollo-android","github":"apollographql/apollo-android","sourcePath":"src/content/code/language-support/java-kotlin-android/client/apollo-android.md"},{"name":"graphql-kotlin","description":"A set of libraries for running GraphQL client and server in Kotlin.","howto":"GraphQL Kotlin provides a set of lightweight type-safe GraphQL HTTP clients. The library provides Ktor HTTP client and Spring WebClient based reference implementations as well as allows for custom implementations using other engines. Type-safe data models are generated at build time by the GraphQL Kotlin Gradle and Maven plugins.\n\nTo generate Ktor based GraphQL client add following to your Gradle build file:\n\n```kotlin\n// build.gradle.kts\nimport com.expediagroup.graphql.plugin.generator.GraphQLClientType\nimport com.expediagroup.graphql.plugin.gradle.graphql\n\nplugins {\n    id(\"com.expediagroup.graphql\") version $latestGraphQLKotlinVersion\n}\n\ndependencies {\n  implementation(\"com.expediagroup:graphql-kotlin-ktor-client:$latestGraphQLKotlinVersion\")\n}\n\ngraphql {\n    client {\n        // target GraphQL endpoint\n        endpoint = \"http://localhost:8080/graphql\"\n        // package for generated client code\n        packageName = \"com.example.generated\"\n        clientType = GraphQLClientType.KTOR\n    }\n}\n```\n\nBy default, GraphQL Kotlin plugin will look for query files under `src/main/resources`. Given `helloWorld: String!` query we can add following `HelloWorldQuery.graphql` sample query to our repo:\n\n```graphql\nquery HelloWorldQuery {\n  helloWorld\n}\n```\n\nPlugin will generate following client code:\n\n```kotlin\npackage com.example.generated\n\nimport com.expediagroup.graphql.client.GraphQLKtorClient\nimport com.expediagroup.graphql.types.GraphQLResponse\nimport kotlin.String\n\nconst val HELLO_WORLD_QUERY: String = \"query HelloWorldQuery {\\n    helloWorld\\n}\"\n\nclass HelloWorldQuery(\n  private val graphQLClient: GraphQLKtorClient<*>\n) {\n  suspend fun execute(requestBuilder: HttpRequestBuilder.() -> Unit = {}): GraphQLResponse<HelloWorldQuery.Result> =\n      graphQLClient.execute(HELLO_WORLD_QUERY, \"HelloWorldQuery\", null, requestBuilder)\n\n  data class Result(\n    val helloWorld: String\n  )\n}\n```\n\nWe can then execute the client \n\n```kotlin\npackage com.example.client\n\nimport com.expediagroup.graphql.client.GraphQLKtorClient\nimport com.expediagroup.graphql.generated.HelloWorldQuery\nimport kotlinx.coroutines.runBlocking\nimport java.net.URL\n\nfun main() {\n    val client = GraphQLKtorClient(url = URL(\"http://localhost:8080/graphql\"))\n    val helloWorldQuery = HelloWorldQuery(client)\n    runBlocking {\n        val result = helloWorldQuery.execute()\n        println(\"hello world query result: ${result.data?.helloWorld}\")\n    }\n    client.close()\n}\n```\n\nSee [graphql-kotlin docs](https://expediagroup.github.io/graphql-kotlin/docs/getting-started) for additial details.","url":"https://github.com/ExpediaGroup/graphql-kotlin/","github":"ExpediaGroup/graphql-kotlin","sourcePath":"src/content/code/language-support/java-kotlin-android/client/graphql-kotlin.md"},{"name":"Nodes","description":"A GraphQL JVM Client designed for constructing queries from standard model definitions. By American Express.","howto":"","url":"https://github.com/americanexpress/nodes","github":"americanexpress/nodes","sourcePath":"src/content/code/language-support/java-kotlin-android/client/nodes.md"}],"Server":[{"name":"graphql-java","description":"A Java library for building GraphQL APIs.","howto":"Code that executes a hello world GraphQL query with `graphql-java`:\n\n```java\nimport graphql.ExecutionResult;\nimport graphql.GraphQL;\nimport graphql.schema.GraphQLSchema;\nimport graphql.schema.StaticDataFetcher;\nimport graphql.schema.idl.RuntimeWiring;\nimport graphql.schema.idl.SchemaGenerator;\nimport graphql.schema.idl.SchemaParser;\nimport graphql.schema.idl.TypeDefinitionRegistry;\n\nimport static graphql.schema.idl.RuntimeWiring.newRuntimeWiring;\n\npublic class HelloWorld {\n\n    public static void main(String[] args) {\n        String schema = \"type Query{hello: String} schema{query: Query}\";\n\n        SchemaParser schemaParser = new SchemaParser();\n        TypeDefinitionRegistry typeDefinitionRegistry = schemaParser.parse(schema);\n\n        RuntimeWiring runtimeWiring = new RuntimeWiring()\n                .type(\"Query\", builder -> builder.dataFetcher(\"hello\", new StaticDataFetcher(\"world\")))\n                .build();\n\n        SchemaGenerator schemaGenerator = new SchemaGenerator();\n        GraphQLSchema graphQLSchema = schemaGenerator.makeExecutableSchema(typeDefinitionRegistry, runtimeWiring);\n\n        GraphQL build = GraphQL.newGraphQL(graphQLSchema).build();\n        ExecutionResult executionResult = build.execute(\"{hello}\");\n\n        System.out.println(executionResult.getData().toString());\n        // Prints: {hello=world}\n    }\n}\n```\n\nSee [the graphql-java docs](https://github.com/graphql-java/graphql-java) for more information on setup.","url":"https://github.com/graphql-java/graphql-java","github":"graphql-java/graphql-java","sourcePath":"src/content/code/language-support/java-kotlin-android/server/graphql-java.md"},{"name":"graphql-kotlin","description":"A set of libraries for running GraphQL client and server in Kotlin.","howto":"GraphQL Kotlin follows a code first approach for generating your GraphQL schemas. Given the similarities between Kotlin and GraphQL, such as the ability to define nullable/non-nullable types, a schema can be generated from Kotlin code without any separate schema specification. To create a reactive GraphQL web server add following dependency to your Gradle build file:\n\n```kotlin\n// build.gradle.kts\nimplementation(\"com.expediagroup\", \"graphql-kotlin-spring-server\", latestVersion)\n```\n\nWe also need to provide a list of supported packages that can be scanned for exposing your schema objects through reflections. Add following configuration to your `application.yml` file:\n\n```yaml\ngraphql:\n  packages:\n    - \"com.your.package\"\n```\n\nWith the above configuration we can now create our schema. In order to expose your queries, mutations and/or subscriptions in the GraphQL schema you simply need to implement corresponding marker interface and they will be automatically picked up by `graphql-kotlin-spring-server` auto-configuration library.\n\n```kotlin\n@Component\nclass HelloWorldQuery : Query {\n  fun helloWorld() = \"Hello World!!!\"\n}\n```\n\nThis will result in a reactive GraphQL web application with following schema:\n\n```graphql\ntype Query {\n  helloWorld: String!\n}\n```\n\nSee [graphql-kotlin docs](https://expediagroup.github.io/graphql-kotlin/docs/getting-started) for additial details.","url":"https://github.com/ExpediaGroup/graphql-kotlin/","github":"ExpediaGroup/graphql-kotlin","sourcePath":"src/content/code/language-support/java-kotlin-android/server/graphql-kotlin.md"},{"name":"KGraphQL","description":"KGraphQL is a Kotlin implementation of GraphQL. It provides a rich DSL to set up the GraphQL schema.","howto":"Here's an example on how to create a simple schema based on a kotlin data class plus a property resolver that gets applied onto your class.\n\n```kotlin\ndata class Article(val id: Int, val text: String)\n\nfun main() {\n    val schema = KGraphQL.schema {\n        query(\"article\") {\n            resolver { id: Int?, text: String ->\n                Article(id ?: -1, text)\n            }\n        }\n        type<Article> {\n            property<String>(\"fullText\") {\n                resolver { article: Article ->\n                    \"${article.id}: ${article.text}\"\n                }\n            }\n        }\n    }\n\n    schema.execute(\"\"\"\n        {\n            article(id: 5, text: \"Hello World\") {\n                id\n                fullText\n            }\n        }\n    \"\"\").let(::println)\n}\n```\n\nKGraphQL is using coroutines behind the scenes to provide great asynchronous performance.\n\nSee [KGraphQL docs](https://kgraphql.io/Installation/) for more in depth usage.\n\n## Ktor Plugin\n\nKGraphQL has a Ktor plugin which gives you a fully functional GraphQL server with a single [install](https://ktor.io/docs/zfeatures.html) function call. Example below shows how to set up a GraphQL server within Ktor and it will give you a [GraphQL Playground](https://github.com/graphql/graphql-playground) out of the box by entering `localhost:8080/graphql`.\n\n```kotlin\nfun Application.module() {\n  install(GraphQL) {\n    playground = true \n    schema {\n      query(\"hello\") {\n        resolver { -> \"World!\" }\n      }\n    }\n  }\n}\n```\n\nYou can follow the [Ktor tutorial](https://kgraphql.io/Tutorials/ktor/) to set up a KGraphQL server with ktor from scratch up.","url":"https://kgraphql.io/","github":"aPureBase/KGraphQL","sourcePath":"src/content/code/language-support/java-kotlin-android/server/kgraphql.md"}],"Tools":[{"name":"GraphQL Java Generator","description":"GraphQL Java Generator is a tool that generates Java code to speed up development for Client and Server of GraphQL APIs","howto":"* GraphQL Java client: it generates the Java classes that call the GraphQL endpoint, and the POJO that will contain the data returned by the server. \nThe GraphQL endpoint can then be queried by using a simple call to a Java method (see sample below)\n* GraphQL Java server: it is based on [graphql-java](https://github.com/graphql-java/graphql-java) (listed here above). It generates all the boilerplate code. \nYou'll only have to implement what's specific to your server, which are the joins between the GraphQL types.\nGraphQL Java Generator is available as a [Maven Plugin](https://graphql-maven-plugin-project.graphql-java-generator.com/index.html).\nA Gradle plugin is coming soon.\nPlease note that GraphQL Java Generator is an accelerator: the generated code doesn’t depend on any library specific to GraphQL Java Generator. \nSo, it  helps you to start building application based on graphql-java. Once the code is generated, you can decide to manually edit it as any standard java application, and get rid of GraphQL Java Generator. \nOf course you can, and should, according to us :), continue using GraphQL Java Generator when your projet evolves.","url":"https://github.com/graphql-java-generator","github":"graphql-java-generator/graphql-gradle-plugin-project","sourcePath":"src/content/code/language-support/java-kotlin-android/tools/graphql-java-generator.md"}]}},{"name":"Julia","totalStars":0,"categoryMap":{"Client":[{"name":"Diana.jl","description":"A Julia GraphQL server implementation.","howto":"","url":"https://github.com/neomatrixcode/Diana.jl","github":"neomatrixcode/Diana.jl","sourcePath":"src/content/code/language-support/julia/client/diana-jl.md"}]}},{"name":"OCaml / Reason","totalStars":0,"categoryMap":{"Server":[{"name":"ocaml-graphql-server","description":"GraphQL server library for OCaml and Reason","howto":"","url":"https://github.com/andreas/ocaml-graphql-server","github":"andreas/ocaml-graphql-server","sourcePath":"src/content/code/language-support/ocaml-reason/server/ocaml-graphql-server.md"}]}},{"name":"Perl","totalStars":0,"categoryMap":{"Server":[{"name":"graphql-perl","description":"A Perl port of GraphQL reference implementation","howto":"- [MetaCPAN documentation](https://metacpan.org/pod/GraphQL)\n\n    - [Mojolicious-Plugin-GraphQL](https://github.com/graphql-perl/Mojolicious-Plugin-GraphQL) - connect your GraphQL service to a Mojolicious app\n\n    - [GraphQL-Plugin-Convert-DBIC](https://github.com/graphql-perl/GraphQL-Plugin-Convert-DBIC) - automatically connect your DBIx::Class schema to GraphQL\n\n    - [GraphQL-Plugin-Convert-OpenAPI](https://github.com/graphql-perl/GraphQL-Plugin-Convert-OpenAPI) - automatically connect any OpenAPI service (either local Mojolicious one, or remote) to GraphQL","url":"https://github.com/graphql-perl/graphql-perl","github":"graphql-perl/graphql-perl","sourcePath":"src/content/code/language-support/perl/server/graphql-perl.md"}]}},{"name":"PHP","totalStars":0,"categoryMap":{"Server":[{"name":"API Platform","description":"API Platform is a fully-featured, flexible and extensible API framework built on top of Symfony.","howto":"The following class is enough to create both a Relay-compatible GraphQL server and a hypermedia API supporting modern REST formats (JSON-LD, JSONAPI...):\n\n```php\n<?php\n\nnamespace AppEntity;\n\nuse ApiPlatformCoreAnnotationApiResource;\nuse DoctrineORMMapping as ORM;\n\n/**\n * Greet someone!\n *\n * @ApiResource\n * @ORMEntity\n */\nclass Greeting\n{\n    /**\n     * @ORMId\n     * @ORMColumn(type=\"guid\")\n     */\n    public $id;\n\n    /**\n     * @var string Your nice message\n     *\n     * @ORMColumn\n     */\n    public $hello;\n}\n```\nOther API Platform features include data validation, authentication, authorization, deprecations, cache and GraphiQL integration.","url":"https://api-platform.com","github":"api-platform/api-platform","sourcePath":"src/content/code/language-support/php/server/api-platform.md"},{"name":"GraPHPinator","description":"A GraphQL implementation for modern PHP. Includes features from latest draft, middleware directives and modules with extra functionality.","howto":"GraPHPinator is feature complete PHP implementation of GraphQL server. Its job is transformation of query string into resolved Json result for a given Schema. \n\n- Aims to be compliant with the latest draft of GraphQL specification.\n- Fully typesafe, and therefore minimum required PHP version is 8.0. Sacrafices a tiny bit of convenience for huge amount of clarity and safety - no random configuration `array`s, no mixed types, no variable function arguments - this library doesnt try to save you from verbosity, but makes sure you always know what you've got.\n- Code first.\n- Flexible. Easy to extend with extra functionality using Modules or middleware Directives.\n- Includes some opt-in extensions which are out of scope of official specs:\n    - [Printer](https://github.com/infinityloop-dev/graphpinator-printer) - Schema printing for GraPHPinator typesystem.\n    - [Extra types](https://github.com/infinityloop-dev/graphpinator-extra-types) - Some useful and commonly used types, both scalar or composite.\n    - [Constraint directives](https://github.com/infinityloop-dev/graphpinator-constraint-directives) - Typesystem directives to declare additional validation on top of GraphQL typesystem.\n    - [Where directives](https://github.com/infinityloop-dev/graphpinator-where-directives) - Executable directives to filter values in lists.\n    - File upload using [multipart-formdata](https://github.com/jaydenseric/graphql-multipart-request-spec) specs (currently bundled).\n    - [Query cost limit module](https://github.com/infinityloop-dev/graphpinator-query-cost) - Modules to limit query cost by restricting maximum depth or number of nodes.\n- Project is composed from multiple smaller packages, which may be used standalone:\n    - [Tokenizer](https://github.com/infinityloop-dev/graphpinator-tokenizer) - Lexical analyzer of GraphQL document.\n    - [Parser](https://github.com/infinityloop-dev/graphpinator-parser) - Syntactic analyzer of GraphQL document.","url":"https://github.com/infinityloop-dev/graphpinator","github":"infinityloop-dev/graphpinator","sourcePath":"src/content/code/language-support/php/server/graphpinator.md"},{"name":"GraphQL API for WordPress","description":"A GraphQL server for WordPress. Based on GraphQL by PoP","howto":"","url":"https://graphql-api.com","github":"leoloso/PoP","sourcePath":"src/content/code/language-support/php/server/graphql-api-for-wordpress.md"},{"name":"GraphQL by PoP","description":"CMS-agnostic GraphQL server in PHP. It follows the code-first approach, generating the schema dynamically","howto":"GraphQL by PoP follows the [code-first approach](https://graphql-by-pop.com/docs/architecture/code-first.html) to generate the schema (it can be customized for different clients/applications). Fields are dynamically \"subscribed\" to types, and may or may not be added to the schema depending on the context.\n\nThis is how a `User` type is satisfied:\n\n```php\nclass UserTypeResolver extends AbstractTypeResolver\n{\n  public function getTypeName(): string\n  {\n    return 'User';\n  }\n\n  public function getSchemaTypeDescription(): ?string\n  {\n    $translationAPI = TranslationAPIFacade::getInstance();\n    return $translationAPI->__('Representation of a user', 'users');\n  }\n\n  public function getID(object $user)\n  {\n    return $user->ID;\n  }\n\n  public function getTypeDataLoaderClass(): string\n  {\n    return UserTypeDataLoader::class;\n  }\n}\n```\n\nPlease notice how the `TypeResolver` does not indicate which are its fields. It also does not load the objects from the database, but instead delegates this task to a `TypeDataLoader`.\n\nAdding fields to the type is done via a `FieldResolver`:\n\n```php\nclass UserFieldResolver extends AbstractDBDataFieldResolver\n{\n  public static function getClassesToAttachTo(): array\n  {\n    return [\n      UserTypeResolver::class,\n    ];\n  }\n\n  public static function getFieldNamesToResolve(): array\n  {\n    return [\n      'username',\n      'email',\n      'url',\n    ];\n  }\n\n  public function getSchemaFieldDescription(\n    TypeResolverInterface $typeResolver,\n    string $fieldName\n  ): ?string {\n    $translationAPI = TranslationAPIFacade::getInstance();\n    $descriptions = [\n      'username' => $translationAPI->__(\"User's username handle\", \"users\"),\n      'email' => $translationAPI->__(\"User's email\", \"users\"),\n      'url' => $translationAPI->__(\"URL of the user's profile in the website\", \"users\"),\n    ];\n    return $descriptions[$fieldName];\n  }\n\n  public function getSchemaFieldType(\n    TypeResolverInterface $typeResolver,\n    string $fieldName\n  ): ?string {\n    $types = [\n      'username' => SchemaDefinition::TYPE_STRING,\n      'email' => SchemaDefinition::TYPE_EMAIL,\n      'url' => SchemaDefinition::TYPE_URL,\n    ];\n    return $types[$fieldName];\n  }\n\n  public function resolveValue(\n    TypeResolverInterface $typeResolver,\n    object $user,\n    string $fieldName,\n    array $fieldArgs = []\n  ) {\n    switch ($fieldName) {\n      case 'username':\n        return $user->user_login;\n\n      case 'email':\n        return $user->user_email;\n\n      case 'url':\n        $userService = UserServiceFacade::getInstance();\n        return $userService->getUserProfileURL($user->ID);\n    }\n\n    return null;\n  }\n}\n```\n\nThe definition of a field for the GraphQL schema, and its resolution, is split into a multitude of functions from the `FieldResolver`: \n\n- `getSchemaFieldDescription`\n- `getSchemaFieldType`\n- `resolveValue`\n- `getSchemaFieldArgs`\n- `isSchemaFieldResponseNonNullable`\n- `getImplementedInterfaceClasses`\n- `resolveFieldTypeResolverClass`\n- `resolveFieldMutationResolverClass`\n\nThis code is more legible than if all functionality is satisfied through a single function, or through a configuration array, making it easier to implement and maintain the resolvers.","url":"https://graphql-by-pop.com","github":"leoloso/PoP","sourcePath":"src/content/code/language-support/php/server/graphql-by-pop.md"},{"name":"graphql-php","description":"A PHP port of GraphQL reference implementation","howto":"","url":"https://github.com/webonyx/graphql-php","github":"webonyx/graphql-php","sourcePath":"src/content/code/language-support/php/server/graphql-php.md"},{"name":"graphql-relay-php","description":"A library to help construct a graphql-php server supporting react-relay.","howto":"","url":"https://github.com/ivome/graphql-relay-php","github":"ivome/graphql-relay-php","sourcePath":"src/content/code/language-support/php/server/graphql-relay-php.md"},{"name":"GraphQLBundle","description":"A GraphQL server for Symfony","howto":"","url":"https://github.com/overblog/GraphQLBundle","github":"overblog/GraphQLBundle","sourcePath":"src/content/code/language-support/php/server/graphqlbundle.md"},{"name":"GraphQLite","description":"GraphQLite is a library that offers an annotations-based syntax for GraphQL schema definition.","howto":"It is framework agnostic with bindings available for Symfony and Laravel.\nThis code declares a \"product\" query and a \"Product\" Type:\n```php\nclass ProductController\n{\n    /**\n     * @Query()\n     */\n    public function product(string $id): Product\n    {\n        // Some code that looks for a product and returns it.\n    }\n}\n\n/**\n * @Type()\n */\nclass Product\n{\n    /**\n     * @Field()\n     */\n    public function getName(): string\n    {\n        return $this->name;\n    }\n    // ...\n}\n```\nOther GraphQLite features include validation, security, error handling, loading via data-loader pattern...","url":"https://graphqlite.thecodingmachine.io","github":"thecodingmachine/graphqlite","sourcePath":"src/content/code/language-support/php/server/graphqlite.md"},{"name":"Lighthouse","description":"A GraphQL server for Laravel","howto":"","url":"https://github.com/nuwave/lighthouse","github":"nuwave/lighthouse","sourcePath":"src/content/code/language-support/php/server/lighthouse.md"},{"name":"Railt","description":"A PHP GraphQL Framework.","howto":"","url":"https://github.com/railt/railt","github":"railt/railt","sourcePath":"src/content/code/language-support/php/server/railt.md"},{"name":"serge","description":"Use GraphQL to define your Domain Model for CQRS/ES and let serge generate code to handle GraphQL requests.","howto":"","url":"https://github.com/kepawni/serge","github":"kepawni/serge","sourcePath":"src/content/code/language-support/php/server/serge.md"},{"name":"Siler","description":"Siler is a PHP library powered with high-level abstractions to work with GraphQL.","howto":"To run a Siler hello world script:\n```graphql\ntype Query {\n  hello: String\n}\n```\n\n```php\n<?php\ndeclare(strict_types=1);\nrequire_once '/path/to/vendor/autoload.php';\n\nuse SilerDiactoros;\nuse SilerGraphql;\nuse SilerHttp;\n\n$typeDefs = file_get_contents(__DIR__.'/schema.graphql');\n$resolvers = [\n    'Query' => [\n        'hello' => 'world',\n    ],\n];\n$schema = Graphqlschema($typeDefs, $resolvers);\n\necho \"Server running at http://127.0.0.1:8080\";\n\nHttpserver(Graphqlpsr7($schema), function (Throwable $err) {\n    var_dump($err);\n    return Diactorosjson([\n        'error'   => true,\n        'message' => $err->getMessage(),\n    ]);\n})()->run();\n```\nIt also provides functionality for the construction of a WebSocket Subscriptions Server based on how Apollo works.","url":"https://siler.leocavalcante.com/graphql/","github":"leocavalcante/siler","sourcePath":"src/content/code/language-support/php/server/siler.md"},{"name":"WPGraphQL","description":"A free, open-source WordPress plugin that provides an extendable GraphQL schema and API for any WordPress site","howto":"","url":"https://github.com/wp-graphql/wp-graphql","github":"wp-graphql/wp-graphql","sourcePath":"src/content/code/language-support/php/server/wpgraphql.md"}]}},{"name":"Python","totalStars":0,"categoryMap":{"Client":[{"name":"GQL","description":"A GraphQL client in Python.","howto":"","url":"https://github.com/graphql-python/gql","github":"graphql-python/gql","sourcePath":"src/content/code/language-support/python/client/gql.md"},{"name":"python-graphql-client","description":"Simple GraphQL client for Python 2.7+.","howto":"","url":"https://github.com/prisma/python-graphql-client","github":"prisma-labs/python-graphql-client","sourcePath":"src/content/code/language-support/python/client/python-graphql-client.md"},{"name":"sgqlc","description":"A simple Python GraphQL client. Supports generating code generation for types defined in a GraphQL schema.","howto":"","url":"https://github.com/profusion/sgqlc","github":"profusion/sgqlc","sourcePath":"src/content/code/language-support/python/client/sgqlc.md"}],"Server":[{"name":"Ariadne","description":"Ariadne is a Python library for implementing GraphQL servers using schema-first approach. It supports both synchronous and asynchronous query execution, ships with batteries included for common GraphQL server problems like query cost validation or performance tracing and has simple API that is easy to extend or replace.","howto":"Ariadne can be installed with pip:\n\n```bash\npip install ariadne\n```\n\nIt ships with many GraphQL server implementations, enabling easy experimentation:\n\n```python\nfrom ariadne import ObjectType, QueryType, gql, make_executable_schema\nfrom ariadne.asgi import GraphQL\n# Define types using Schema Definition Language (https://graphql.org/learn/schema/)\n# Wrapping string in gql function provides validation and better error traceback\ntype_defs = gql(\"\"\"\n    type Query {\n        hello: String!\n    }\n\"\"\")\n# Bind resolver functions to Query's fields using QueryType\nquery_type = QueryType()\n# Resolvers are simple python functions\n@query_type.field(\"hello\")\ndef resolve_hello(*_):\n    return \"Hello world!\"\n# Create executable GraphQL schema\nschema = make_executable_schema(type_defs, query_type)\n# Create an ASGI app using the schema, running in debug mode\napp = GraphQL(schema, debug=True)\n```\n\nAbove server can be ran with uvicorn:\n\n```\npip install uvicorn\nuvicorn example:app\n```","url":"https://ariadnegraphql.org","github":"mirumee/ariadne","sourcePath":"src/content/code/language-support/python/server/ariadne.md"},{"name":"Graphene","description":"A Python library for building GraphQL APIs.","howto":"To run a Graphene hello world script:\n\n```bash\npip install graphene\n```\n\nThen run `python hello.py` with this code in `hello.py`:\n\n```python\nimport graphene\n\nclass Query(graphene.ObjectType):\n  hello = graphene.String(name=graphene.String(default_value=\"World\"))\n\n  def resolve_hello(self, info, name):\n    return 'Hello ' + name\n\nschema = graphene.Schema(query=Query)\nresult = schema.execute('{ hello }')\nprint(result.data['hello']) # \"Hello World\"\n```\n\nThere are also nice bindings for [Relay](https://facebook.github.io/relay/), Django, SQLAlchemy, and Google App Engine.","url":"http://graphene-python.org/","github":"graphql-python/graphene","sourcePath":"src/content/code/language-support/python/server/graphene.md"},{"name":"Strawberry","description":"Strawberry is a Python library for implementing code first GraphQL servers using modern Python features like type hints.","howto":"Here's an example of a Strawberry hello world, first install the library:\n\n```bash\npip install strawberry-graphql\n```\n\nCreate an `app.py` file with this content:\n\n```python\nimport strawberry\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self, name: str = \"World\") -> str:\n        return f\"Hello {name}\"\n\nschema = strawberry.Schema(query=Query)\n```\n\nThen run `strawberry server app` and you will have a basic schema server\nrunning on `http://localhost:8000/`.\n\nStrawberry also has views for ASGI, Flask and Django and provides utilities\nlike dataloaders and tracing.","url":"https://strawberry.rocks","github":"strawberry-graphql/strawberry","sourcePath":"src/content/code/language-support/python/server/strawberry.md"},{"name":"Tartiflette","description":"A Python 3.6+ _(asyncio)_ library for building GraphQL APIs.","howto":"To run a tartiflette hello world script:\n```bash\npip install tartiflette\n```\nThen run `python hello.py` with this code in `hello.py`:\n```python\nimport asyncio\nfrom tartiflette import Engine, Resolver\n@Resolver(\"Query.hello\")\nasync def resolver_hello(parent, args, ctx, info):\n    return \"hello \" + args[\"name\"]\nasync def run():\n    tftt_engine = Engine(\"\"\"\n    type Query {\n        hello(name: String): String\n    }\n    \"\"\")\n    result = await tftt_engine.execute(\n        query='query { hello(name: \"Chuck\") }'\n    )\n    print(result)\n    # {'data': {'hello': 'hello Chuck'}}\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(run())\n```\nThere is also a nice [HTTP wrapper](https://github.com/dailymotion/tartiflette-aiohttp).","url":"https://tartiflette.io","github":"tartiflette/tartiflette","sourcePath":"src/content/code/language-support/python/server/tartiflette.md"}]}},{"name":"R","totalStars":0,"categoryMap":{"Server":[{"name":"ghql","description":"General purpose GraphQL R client","howto":"","url":"https://github.com/ropensci/ghql","github":"ropensci/ghql","sourcePath":"src/content/code/language-support/r/server/ghql.md"}]}},{"name":"Rust","totalStars":0,"categoryMap":{"Client":[{"name":"cynic","description":"A bring your own types GraphQL client for Rust","howto":"A client library for rust that generates queries from types you provide,\nverifying that the types match the shape of your schema.\n\nIt provides [a generator](https://generator.cynic-rs.dev) to bootstrap types\nfrom existing GraphQL queries.\n\nUsage example:\n\n```rust\n#[derive(cynic::QueryFragment, Debug)]\n#[cynic(\n    schema_path = \"../schemas/starwars.schema.graphql\",\n    query_module = \"query_dsl\",\n    graphql_type = \"Root\",\n    argument_struct = \"FilmArguments\"\n)]\nstruct FilmDirectorQuery {\n    #[arguments(id = &args.id)]\n    film: Option<Film>,\n}\n\n#[derive(cynic::QueryFragment, Debug)]\n#[cynic(\n    schema_path = \"../schemas/starwars.schema.graphql\",\n    query_module = \"query_dsl\",\n    graphql_type = \"Film\"\n)]\nstruct Film {\n    title: Option<String>,\n    director: Option<String>,\n}\n\n#[derive(cynic::FragmentArguments)]\nstruct FilmArguments {\n    id: Option<cynic::Id>,\n}\n\nfn main() {\n    use cynic::{QueryBuilder, http::ReqwestBlockingExt};\n\n    let query = FilmDirectorQuery::build(&FilmArguments {\n        id: Some(\"ZmlsbXM6MQ==\".into()),\n    })\n\n    reqwest::blocking::Client::new()\n        .post(\"https://swapi-graphql.netlify.com/.netlify/functions/index\")\n        .run_graphql(query)\n        .unwrap()\n}\n\nmod query_dsl {\n    cynic::query_dsl!(\"../schemas/starwars.schema.graphql\");\n}\n```","url":"https://cynic-rs.dev","github":"obmarg/cynic","sourcePath":"src/content/code/language-support/rust/client/cynic.md"},{"name":"gql_client","description":"Minimal GraphQL client for Rust","howto":"Usage example\n```rust\nuse gql_client::Client;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n  let endpoint = \"https://graphqlzero.almansi.me/api\";\n  let query = r#\"\n    query AllPostsQuery {\n      posts {\n        data {\n          id\n        }\n      }\n    }\n  \"#;\n\n  let client = Client::new(endpoint);\n  let data: AllPosts = client.query::<AllPosts>(query).await.unwrap();\n\n  println!(\"{:?}\" data);\n\n  Ok(())\n}\n```","url":"https://github.com/arthurkhlghatyan/gql-client-rs","github":"arthurkhlghatyan/gql-client-rs","sourcePath":"src/content/code/language-support/rust/client/gql_client.md"}],"Server":[{"name":"Async-graphql","description":"Async-graphql is a high-performance server-side library that supports all GraphQL specifications.","howto":"```rust\n use async_graphql::*;\n struct Query;\n #[Object]\n impl Query {\n    /// Returns the sum of a and b\n    async fn add(&self, a: i32, b: i32) -> i32 {\n        a + b\n    }\n }\n ```","url":"https://github.com/async-graphql/async-graphql","github":"async-graphql/async-graphql","sourcePath":"src/content/code/language-support/rust/server/async-graphql.md"},{"name":"graphql-rust/juniper","description":"GraphQL server library for Rust","howto":"","url":"https://github.com/graphql-rust/juniper","github":"graphql-rust/juniper","sourcePath":"src/content/code/language-support/rust/server/graphql-rust-juniper.md"}]}},{"name":"Scala","totalStars":0,"categoryMap":{"Client":[{"name":"Caliban","description":"Functional GraphQL library for Scala, with client code generation and type-safe queries.","howto":"","url":"https://ghostdogpr.github.io/caliban/","github":"ghostdogpr/caliban","sourcePath":"src/content/code/language-support/scala/client/caliban.md"}],"Server":[{"name":"Caliban","description":"Caliban is a purely functional library for building GraphQL servers and clients in Scala","howto":"An example of a GraphQL schema and query with `caliban`:\n```scala\nimport caliban.GraphQL.graphQL\nimport caliban.RootResolver\n\ncase class Character(name: String, age: Int)\n\ndef getCharacters(): List[Character] = ??? \n\n// schema\ncase class Queries(characters: List[Character])\n\n// resolver\nval queries = Queries(getCharacters)\n\nval api = graphQL(RootResolver(queries))\n\nfor {\n  interpreter <- api.interpreter\n  result      <- interpreter.execute(\"{ characters { name } }\")\n} yield result\n```","url":"https://ghostdogpr.github.io/caliban/","github":"ghostdogpr/caliban","sourcePath":"src/content/code/language-support/scala/server/caliban.md"},{"name":"Sangria","description":"A Scala GraphQL library that supports [Relay](https://facebook.github.io/relay/).","howto":"An example of a hello world GraphQL schema and query with `sangria`:\n```scala\nimport sangria.schema._\nimport sangria.execution._\nimport sangria.macros._\n\nval QueryType = ObjectType(\"Query\", fields[Unit, Unit](\n  Field(\"hello\", StringType, resolve = _ ⇒ \"Hello world!\")\n))\n\nval schema = Schema(QueryType)\n\nval query = graphql\"{ hello }\"\n\nExecutor.execute(schema, query) map println\n```","url":"http://sangria-graphql.org/","github":"sangria-graphql/sangria","sourcePath":"src/content/code/language-support/scala/server/sangria.md"}]}},{"name":"Swift / Objective-C","totalStars":0,"categoryMap":{"Client":[{"name":"Apollo iOS","description":"A GraphQL client for iOS that returns results as query-specific Swift types, and integrates with Xcode to show your Swift source and GraphQL side by side, with inline validation errors.","howto":"","url":"https://www.apollographql.com/docs/ios/","github":"apollographql/apollo-ios","sourcePath":"src/content/code/language-support/swift-objective-c-ios/client/apollo-ios.md"},{"name":"Graphaello","description":"A Tool for Writing Declarative, Type-Safe and Data-Driven Applications in SwiftUI using GraphQL and Apollo","howto":"","url":"https://github.com/nerdsupremacist/Graphaello","github":"nerdsupremacist/Graphaello","sourcePath":"src/content/code/language-support/swift-objective-c-ios/client/graphaello.md"},{"name":"GraphQL iOS","description":"An Objective-C GraphQL client for iOS.","howto":"","url":"https://github.com/funcompany/graphql-ios","github":"funcompany/graphql-ios","sourcePath":"src/content/code/language-support/swift-objective-c-ios/client/graphql-ios.md"},{"name":"SwiftGraphQL","description":"A GraphQL client that lets you forget about GraphQL.","howto":"SwiftGraphQL is a Swift code generator and a lightweight GraphQL client. It lets you create queries using Swift, and guarantees that every query you create is valid.\n\nThe library is centered around three core principles:\n\n🚀 If your project compiles, your queries work.\n🦉 Use Swift in favour of GraphQL wherever possible.\n🌳 Your application model should be independent of your schema.\n\nHere's a short preview of the SwiftGraphQL code\n\n```swift\nimport SwiftGraphQL\n\n// Define a Swift model.\nstruct Human: Identifiable {\n    let id: String\n    let name: String\n    let homePlanet: String?\n}\n\n// Create a selection.\nlet human = Selection.Human {\n    Human(\n        id: try $0.id(),\n        name: try $0.name(),\n        homePlanet: try $0.homePlanet()\n    )\n}\n\n// Construct a query.\nlet query = Selection.Query {\n    try $0.humans(human.list)\n}\n\n// Perform the query.\nsend(query, to: \"http://swift-graphql.heroku.com\") { result in\n    if let data = try? result.get() {\n        print(data) // [Human]\n    }\n}\n```","url":"https://github.com/maticzav/swift-graphql","github":"maticzav/swift-graphql","sourcePath":"src/content/code/language-support/swift-objective-c-ios/client/swift-graphql.md"}],"Server":[{"name":"Graphiti","description":"Swift library for building GraphQL schemas/types fast, safely and easily.","howto":"","url":"https://github.com/GraphQLSwift/Graphiti","github":"GraphQLSwift/Graphiti","sourcePath":"src/content/code/language-support/swift-objective-c-ios/server/graphiti.md"},{"name":"GraphZahl","description":"Swift library for writing Declarative, Type-Safe GraphQL APIs with Zero Boilerplate.","howto":"","url":"https://github.com/nerdsupremacist/GraphZahl","github":"nerdsupremacist/GraphZahl","sourcePath":"src/content/code/language-support/swift-objective-c-ios/server/graphzahl.md"}]}},{"name":"Ruby","totalStars":0,"categoryMap":{"Server":[{"name":"graphql-ruby","description":"A Ruby library for building GraphQL APIs.","howto":"To run a hello world script with `graphql-ruby`:\n```bash\ngem install graphql\n```\n\nThen run `ruby hello.rb` with this code in `hello.rb`:\n\n```ruby\nrequire 'graphql'\n\nclass QueryType < GraphQL::Schema::Object\n  graphql_name 'Query'\n  field :hello do\n    type types.String\n    resolve -> (obj, args, ctx) { 'Hello world!' }\n  end\nend\n\nclass Schema < GraphQL::Schema\n  query QueryType\nend\n\nputs Schema.execute('{ hello }').to_json\n```\nThere are also nice bindings for Relay and Rails.","url":"https://github.com/rmosolgo/graphql-ruby","github":"rmosolgo/graphql-ruby","gem":"graphql","sourcePath":"src/content/code/language-support/ruby/server/graphql-ruby.md","downloadCount":36215221},{"name":"Agoo","description":"A high performance web server with support for GraphQL. Agoo strives for a simple, easy to use API for GraphQL.","howto":"```ruby\nrequire 'agoo'\n\nclass Query\n  def hello\n    'hello'\n  end\nend\n\nclass Schema\n  attr_reader :query\n\n  def initialize\n    @query = Query.new()\n  end\nend\n\nAgoo::Server.init(6464, 'root', thread_count: 1, graphql: '/graphql')\nAgoo::Server.start()\nAgoo::GraphQL.schema(Schema.new) {\n  Agoo::GraphQL.load(%^type Query { hello: String }^)\n}\nsleep\n\n# To run this GraphQL example type the following then go to a browser and enter\n# a URL of localhost:6464/graphql?query={hello}\n#\n# ruby hello.rb\n```","url":"https://github.com/ohler55/agoo","github":"ohler55/agoo","gem":"agoo","sourcePath":"src/content/code/language-support/ruby/server/agoo.md","downloadCount":74046}]}},{"name":"JavaScript","totalStars":0,"categoryMap":{"Client":[{"name":"Apollo Client","description":"A powerful JavaScript GraphQL client, designed to work well with React, React Native, Angular 2, or just plain JavaScript.","howto":"","url":"http://apollographql.com/client/","github":"apollographql/apollo-client","npm":"@apollo/client","sourcePath":"src/content/code/language-support/javascript/client/apollo-client.md","downloadCount":1871051},{"name":"GraphQL Request","description":"A simple and flexible JavaScript GraphQL client that works in all JavaScript environments (the browser, Node.js, and React Native) - basically a lightweight wrapper around `fetch`.","howto":"","url":"https://github.com/prisma/graphql-request","github":"prisma-labs/graphql-request","npm":"graphql-request","sourcePath":"src/content/code/language-support/javascript/client/graphql-request.md","downloadCount":1716726},{"name":"AWS Amplify","description":"A JavaScript library for application development using cloud services, which supports GraphQL backend and React components for working with GraphQL data.","howto":"","url":"https://docs.amplify.aws/","github":"aws-amplify/amplify-js","npm":"aws-amplify","sourcePath":"src/content/code/language-support/javascript/client/aws-amplify.md","downloadCount":321720},{"name":"urql","description":"A highly customizable and versatile GraphQL client with which you add on features like normalized caching as you grow.","howto":"`urql` is a GraphQL client that exposes a set of helpers for several frameworks.\nIt's built to be highly customisable and versatile so you can take it from getting started with your first GraphQL project\nall the way to building complex apps and experimenting with GraphQL clients.\n\n- Currently supports React, React Native, Preact, Svelte, and Vue, and is supported by GraphQL Code Generator.\n- Logical yet simple default behaviour and document caching, and normalized caching via `@urql/exchange-graphcache`\n- Fully customizable behaviour via \"exchanges\" (addon packages)","url":"https://formidable.com/open-source/urql/docs/","github":"FormidableLabs/urql","npm":"@urql/core","sourcePath":"src/content/code/language-support/javascript/client/urql.md","downloadCount":138535},{"name":"Relay","description":"Facebook's framework for building React applications that talk to a GraphQL backend.","howto":"","url":"https://facebook.github.io/relay/","github":"facebook/relay","npm":"react-relay","sourcePath":"src/content/code/language-support/javascript/client/relay.md","downloadCount":93361},{"name":"graphql-hooks","description":"Minimal React hooks-first GraphQL client with a tiny bundle, SSR support and caching","howto":"- 🥇 First-class hooks API\n- ⚖️ _Tiny_ bundle: only 7.6kB (2.8 gzipped)\n- 📄 Full SSR support: see [graphql-hooks-ssr](packages/graphql-hooks-ssr)\n- 🔌 Plugin Caching: see [graphql-hooks-memcache](packages/graphql-hooks-memcache)\n- 🔥 No more render props hell\n- ⏳ Handle loading and error states with ease\n\n### Quickstart\n\n```bash\nnpm install graphql-hooks\n```\n\nFirst you'll need to create a client and wrap your app with the provider:\n\n```js\nimport { GraphQLClient, ClientContext } from 'graphql-hooks'\n\nconst client = new GraphQLClient({\n  url: '/graphql'\n})\n\nfunction App() {\n  return (\n    <ClientContext.Provider value={client}>\n      {/* children */}\n    </ClientContext.Provider>\n  )\n}\n```\n\nNow in your child components you can make use of `useQuery`:\n\n```js\nimport { useQuery } from 'graphql-hooks'\n\nconst HOMEPAGE_QUERY = `query HomePage($limit: Int) {\n  users(limit: $limit) {\n    id\n    name\n  }\n}`\n\nfunction MyComponent() {\n  const { loading, error, data } = useQuery(HOMEPAGE_QUERY, {\n    variables: {\n      limit: 10\n    }\n  })\n\n  if (loading) return 'Loading...'\n  if (error) return 'Something Bad Happened'\n\n  return (\n    <ul>\n      {data.users.map(({ id, name }) => (\n        <li key={id}>{name}</li>\n      ))}\n    </ul>\n  )\n}\n```","url":"https://github.com/nearform/graphql-hooks","github":"nearform/graphql-hooks","npm":"graphql-hooks","sourcePath":"src/content/code/language-support/javascript/client/graphql-hooks.md","downloadCount":11623},{"name":"graphqurl","description":"curl for GraphQL with autocomplete, subscriptions and GraphiQL. Also a dead-simple universal javascript GraphQL client.","howto":"","url":"https://github.com/hasura/graphqurl","github":"hasura/graphqurl","npm":"graphqurl","sourcePath":"src/content/code/language-support/javascript/client/graphqurl.md","downloadCount":9615},{"name":"Lokka","description":"A simple JavaScript GraphQL client that works in all JavaScript environments (the browser, Node.js, and React Native).","howto":"","url":"https://github.com/kadirahq/lokka","github":"kadirahq/lokka","npm":"lokka","sourcePath":"src/content/code/language-support/javascript/client/lokka.md","downloadCount":3335},{"name":"nanogql","description":"Tiny GraphQL client library using template strings.","howto":"","url":"https://github.com/yoshuawuyts/nanogql","github":"choojs/nanographql","npm":"nanographql","sourcePath":"src/content/code/language-support/javascript/client/nanogql.md","downloadCount":445},{"name":"Grafoo","description":"An all purpose GraphQL client with view layer integrations for multiple frameworks in just 1.6kb.","howto":"","url":"https://github.com/grafoojs/grafoo","github":"grafoojs/grafoo","npm":"@grafoo/core","sourcePath":"src/content/code/language-support/javascript/client/grafoo.md","downloadCount":51},{"name":"gq-loader","description":"A simple JavaScript GraphQL client，Let the *.gql file be used as a module through webpack loader.","howto":"","url":"https://github.com/Houfeng/gq-loader","github":"Houfeng/gq-loader","npm":"gq-loader","sourcePath":"src/content/code/language-support/javascript/client/gq-loader.md","downloadCount":13}],"Server":[{"name":"GraphQL.js","description":"The reference implementation of the GraphQL specification, designed for running GraphQL in a Node.js environment.","howto":"To run a `GraphQL.js` hello world script from the command line:\n\n```bash\nnpm install graphql\n```\n\nThen run `node hello.js` with this code in `hello.js`:\n\n```js\nvar { graphql, buildSchema } = require('graphql');\n\nvar schema = buildSchema(`\n  type Query {\n    hello: String\n  }\n`);\n\nvar root = { hello: () => 'Hello world!' };\n\ngraphql(schema, '{ hello }', root).then((response) => {\n  console.log(response);\n});\n```","url":"/graphql-js/","github":"graphql/graphql-js","npm":"graphql","sourcePath":"src/content/code/language-support/javascript/server/graphql-js.md","downloadCount":6605198},{"name":"Apollo Server","description":"A set of GraphQL server packages from Apollo that work with various Node.js HTTP frameworks (Express, Connect, Hapi, Koa etc).","howto":"To run a hello world server with apollo-server-express:\n\n```bash\nnpm install apollo-server-express express \n```\n\nThen run `node server.js` with this code in `server.js`:\n\n```js\nconst express = require('express');\nconst { ApolloServer, gql } = require('apollo-server-express');\n\nconst typeDefs = gql`\n  type Query {\n    hello: String\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello world!',\n  },\n};\n\nconst server = new ApolloServer({ typeDefs, resolvers });\n\nconst app = express();\nserver.applyMiddleware({ app });\n\napp.listen({ port: 4000 }, () =>\n  console.log('Now browse to http://localhost:4000' + server.graphqlPath)\n);\n```\n\nApollo Server also supports all Node.js HTTP server frameworks: Express, Connect, HAPI, Koa and NestJs.","url":"https://www.apollographql.com/docs/apollo-server/","github":"apollographql/apollo-server","npm":"apollo-server-express","sourcePath":"src/content/code/language-support/javascript/server/apollo-server.md","downloadCount":1338316},{"name":"Express GraphQL","description":"The reference implementation of a GraphQL API server over an Express webserver. You can use this to run GraphQL in conjunction with a regular Express webserver, or as a standalone GraphQL server.","howto":"To run an `express-graphql` hello world server:\n\n```bash\nnpm install express express-graphql graphql\n```\n\nThen run `node server.js` with this code in `server.js`:\n\n```js\nvar express = require('express');\nvar { graphqlHTTP } = require('express-graphql');\nvar { buildSchema } = require('graphql');\n\nvar schema = buildSchema(`\n  type Query {\n    hello: String\n  }\n`);\n\nvar root = { hello: () => 'Hello world!' };\n\nvar app = express();\napp.use('/graphql', graphqlHTTP({\n  schema: schema,\n  rootValue: root,\n  graphiql: true,\n}));\napp.listen(4000, () => console.log('Now browse to localhost:4000/graphql'));\n```","url":"/graphql-js/running-an-express-graphql-server/","github":"graphql/express-graphql","npm":"express-graphql","sourcePath":"src/content/code/language-support/javascript/server/express-graphql.md","downloadCount":609693},{"name":"GraphQL Helix","description":"A collection of utility functions for building your own GraphQL HTTP server.  You can check out [Building a GraphQL server with GraphQL Helix](https://dev.to/danielrearden/building-a-graphql-server-with-graphql-helix-2k44) on DEV for a detailed tutorial on getting started.","howto":"To run a hello world server with GraphQL Helix:\n\n```bash\nnpm install graphql graphql-helix express\n```\n\nThen run `node server.js` with this code in `server.js`:\n\n```js\nconst express = require('express')\nconst {\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLString\n} = require('graphql');\nconst {\n  getGraphQLParameters,\n  processRequest,\n  renderGraphiQL,\n  shouldRenderGraphiQL\n} = require('graphql-helix');\n\nconst schema = new GraphQLSchema({\n  query: new GraphQLObjectType({\n    name: 'Query',\n    fields: {\n      hello: {\n        type: GraphQLString,\n        resolve: () => 'Hello world!',\n      },\n    },\n  }),\n});\n\nconst app = express();\n\napp.use(express.json());\n\napp.use('/graphql', async (req, res) => {\n  const request = {\n    body: req.body,\n    headers: req.headers,\n    method: req.method,\n    query: req.query,\n  };\n\n  if (shouldRenderGraphiQL(request)) {\n    res.send(renderGraphiQL());\n  } else {\n    const { operationName, query, variables } = getGraphQLParameters(request);\n\n    const result = await processRequest({\n      operationName,\n      query,\n      variables,\n      request,\n      schema,\n    });\n\n    if (result.type === 'RESPONSE') {\n      result.headers.forEach(({ name, value }) => res.setHeader(name, value));\n      res.status(result.status);\n      res.json(result.payload);\n    } else {\n    // graphql-helix also supports subscriptions and incremental delivery (i.e. @defer and @stream directives)\n    // out of the box. See the repo for more complete examples that also implement those features.\n    }\n  }\n});\n\napp.listen(4000, () =>\n  console.log('Now browse to http://localhost:4000/graphql');\n)\n```\n\nThis example uses Express, but GraphQL Helix is framework- and runtime-agnostic -- it can run in Node, Deno and the browser. GraphQL Helix provides you with a handful of utility functions to build your own HTTP server but leaves the ultimate implementation details up to you.","url":"https://github.com/contrawork/graphql-helix","github":"contrawork/graphql-helix","npm":"graphql-helix","sourcePath":"src/content/code/language-support/javascript/server/graphql-helix.md","downloadCount":17836},{"name":"graphql-yoga","description":"Fully-featured GraphQL Server with focus on easy setup, performance & great developer experience","howto":"- Sensible defaults & includes everything you need with minimal setup.\n- Built-in support for GraphQL subscriptions using WebSockets.\n- Works with all GraphQL clients (Apollo, Relay...) and fits seamless in your GraphQL workflow.\n\nTo run a hello world server with graphql-yoga:\n\n```bash\nnpm install graphql-yoga\n```\n\nThen run `node server.js` with this code in `server.js`:\n\n```js\nimport { GraphQLServer } from 'graphql-yoga'\n// ... or using \"require()\"\n// const { GraphQLServer } = require('graphql-yoga')\nconst typeDefs = `\n  type Query {\n    hello(name: String): String!\n  }\n`;\nconst resolvers = {\n  Query: {\n    hello: (_, { name }) => `Hello ${name || 'World'}`,\n  },\n};\nconst server = new GraphQLServer({ typeDefs, resolvers })\nserver.start(() => console.log('Server is running on localhost:4000'))\n```","url":"https://github.com/dotansimha/graphql-yoga","github":"dotansimha/graphql-yoga","npm":"graphql-yoga","sourcePath":"src/content/code/language-support/javascript/server/graphql-yoga.md","downloadCount":15607}],"Tools":[{"name":"GraphQL Config","description":"One configuration for all your GraphQL tools (supported by most tools, editors & IDEs).","howto":"","url":"https://graphql-config.com","github":"kamilkisiela/graphql-config","npm":"graphql-config","sourcePath":"src/content/code/language-support/javascript/tools/graphql-config.md","downloadCount":1969442},{"name":"GraphQL Tools","description":"A set of utils for faster development of GraphQL tools (Schema and documents loading, Schema merging and more).","howto":"","url":"https://graphql-tools.com","github":"ardatan/graphql-tools","npm":"graphql-tools","sourcePath":"src/content/code/language-support/javascript/tools/graphql-tools.md","downloadCount":1919258},{"name":"GraphQL-WS","description":"Coherent, zero-dependency, lazy, simple, GraphQL over WebSocket Protocol compliant server and client.","howto":"","url":"https://github.com/enisdenjo/graphql-ws","github":"enisdenjo/graphql-ws","npm":"graphql-ws","sourcePath":"src/content/code/language-support/javascript/tools/graphql-ws.md","downloadCount":1856484},{"name":"GraphQL Code Generator","description":"GraphQL code generator with flexible support for custom plugins and templates like Typescript (frontend and backend), React Hooks, resolvers signatures and more.","howto":"","url":"https://graphql-code-generator.com","github":"dotansimha/graphql-code-generator","npm":"@graphql-codegen/cli","sourcePath":"src/content/code/language-support/javascript/tools/graphql-code-generator.md","downloadCount":1107948},{"name":"GraphQL Live Query","description":"Real-Time with GraphQL for any GraphQL schema or transport.","howto":"","url":"https://github.com/n1ru4l/graphql-live-query","github":"n1ru4l/graphql-live-query","npm":"@n1ru4l/graphql-live-query","sourcePath":"src/content/code/language-support/javascript/tools/graphql-live-query.md","downloadCount":482034},{"name":"GraphQLMiddleware","description":"Split up your GraphQL resolvers in middleware functions.","howto":"GraphQL Middleware is a schema wrapper which allows you to manage additional functionality across multiple resolvers efficiently.\n\n## Features\n\n💡 Easy to use: An intuitive, yet familiar API that you will pick up in a second.\n💪 Powerful: Allows complete control over your resolvers (Before, After).\n🌈 Compatible: Works with any GraphQL Schema.\n\n## Example\n\n```ts\nconst { ApolloServer } = require('apollo-server')\nconst { makeExecutableSchema } = require('@graphql-tools/schema')\n\nconst typeDefs = `\ntype Query {\n  hello(name: String): String\n  bye(name: String): String\n}\n`\nconst resolvers = {\n  Query: {\n    hello: (root, args, context, info) => {\n      console.log(`3. resolver: hello`)\n      return `Hello ${args.name ? args.name : 'world'}!`\n    },\n    bye: (root, args, context, info) => {\n      console.log(`3. resolver: bye`)\n      return `Bye ${args.name ? args.name : 'world'}!`\n    },\n  },\n}\n\nconst logInput = async (resolve, root, args, context, info) => {\n  console.log(`1. logInput: ${JSON.stringify(args)}`)\n  const result = await resolve(root, args, context, info)\n  console.log(`5. logInput`)\n  return result\n}\n\nconst logResult = async (resolve, root, args, context, info) => {\n  console.log(`2. logResult`)\n  const result = await resolve(root, args, context, info)\n  console.log(`4. logResult: ${JSON.stringify(result)}`)\n  return result\n}\n\nconst schema = makeExecutableSchema({ typeDefs, resolvers })\n\nconst schemaWithMiddleware = applyMiddleware(schema, logInput, logResult)\n\nconst server = new ApolloServer({\n  schema: schemaWithMiddleware,\n})\n\nawait server.listen({ port: 8008 })\n```","url":"https://github.com/maticzav/graphql-middleware","github":"maticzav/graphql-middleware","npm":"graphql-middleware","sourcePath":"src/content/code/language-support/javascript/tools/graphql-middleware.md","downloadCount":208892},{"name":"GraphQL Scalars","description":"A library of custom GraphQL scalar types for creating precise, type-safe GraphQL schemas.","howto":"","url":"https://github.com/Urigo/graphql-scalars","github":"Urigo/graphql-scalars","npm":"graphql-scalars","sourcePath":"src/content/code/language-support/javascript/tools/graphql-scalars.md","downloadCount":168809},{"name":"GraphiQL","description":"An interactive in-browser GraphQL IDE.","howto":"","url":"https://github.com/graphql/graphiql","github":"graphql/graphiql","npm":"graphiql","sourcePath":"src/content/code/language-support/javascript/tools/graphiql.md","downloadCount":160095},{"name":"GraphQLShield","description":"A GraphQL tool to ease the creation of permission layer.","howto":"GraphQL Shield helps you create a permission layer for your application. Using an intuitive rule-API, you'll gain the power of the shield engine on every request and reduce the load time of every request with smart caching. This way you can make sure your application will remain quick, and no internal data will be exposed.\n\n```ts\nimport { rule, shield, and, or, not } from 'graphql-shield'\n\n// Rules\n\nconst isAuthenticated = rule({ cache: 'contextual' })(\n  async (parent, args, ctx, info) => {\n    return ctx.user !== null\n  },\n)\n\nconst isAdmin = rule({ cache: 'contextual' })(\n  async (parent, args, ctx, info) => {\n    return ctx.user.role === 'admin'\n  },\n)\n\nconst isEditor = rule({ cache: 'contextual' })(\n  async (parent, args, ctx, info) => {\n    return ctx.user.role === 'editor'\n  },\n)\n\n// Permissions\n\nconst permissions = shield({\n  Query: {\n    frontPage: not(isAuthenticated),\n    fruits: and(isAuthenticated, or(isAdmin, isEditor)),\n    customers: and(isAuthenticated, isAdmin),\n  },\n  Mutation: {\n    addFruitToBasket: isAuthenticated,\n  },\n  Fruit: isAuthenticated,\n  Customer: isAdmin,\n})\n\n// Server\n\nconst server = new GraphQLServer({\n  typeDefs,\n  resolvers,\n  middlewares: [permissions],\n  context: (req) => ({\n    ...req,\n    user: getUser(req),\n  }),\n})\n```","url":"https://github.com/maticzav/graphql-shield","github":"maticzav/graphql-shield","npm":"graphql-shield","sourcePath":"src/content/code/language-support/javascript/tools/graphql-shield.md","downloadCount":147520},{"name":"GraphQL Language Service","description":"An interface for building GraphQL language services for IDEs (diagnostics, autocomplete etc).","howto":"","url":"https://github.com/graphql/graphql-language-service","github":"graphql/graphql-language-service","npm":"graphql-language-service","sourcePath":"src/content/code/language-support/javascript/tools/graphql-language-service.md","downloadCount":119631},{"name":"GraphQL Inspector","description":"Compare schemas, validate documents, find breaking changes, find similar types, schema coverage, and more.","howto":"","url":"https://graphql-inspector.com/","github":"kamilkisiela/graphql-inspector","npm":"@graphql-inspector/cli","sourcePath":"src/content/code/language-support/javascript/tools/graphql-inspector.md","downloadCount":76530},{"name":"GraphQL-ESLint","description":"GraphQL-ESLint integrates GraphQL AST in the ESLint core (as a parser).","howto":"","url":"https://github.com/dotansimha/graphql-eslint/","github":"dotansimha/graphql-eslint/","npm":"@graphql-eslint/eslint-plugin","sourcePath":"src/content/code/language-support/javascript/tools/graphql-eslint.md","downloadCount":72056},{"name":"GraphQL CLI","description":"A command line tool for common GraphQL development workflows.","howto":"","url":"https://graphql-cli.com","github":"Urigo/graphql-cli","npm":"graphql-cli","sourcePath":"src/content/code/language-support/javascript/tools/graphql-cli.md","downloadCount":53812},{"name":"Postgraphile","description":"builds a powerful, extensible and performant GraphQL API from a PostgreSQL schema in seconds; saving you weeks if not months of development time.","howto":"","url":"https://www.graphile.org/postgraphile","github":"graphile/postgraphile","npm":"postgraphile","sourcePath":"src/content/code/language-support/javascript/tools/postgraphile.md","downloadCount":22475},{"name":"GraphQL Mesh","description":"GraphQL Mesh allows you to use GraphQL query language to access data in remote APIs that don't run GraphQL (and also ones that do run GraphQL). It can be used as a gateway to other services, or run as a local GraphQL schema that aggregates data from remote APIs.","howto":"","url":"https://graphql-mesh.com","github":"Urigo/graphql-mesh","npm":"@graphql-mesh/cli","sourcePath":"src/content/code/language-support/javascript/tools/graphql-mesh.md","downloadCount":8567},{"name":"GraphQL Modules","description":"GraphQL Modules lets you separate your backend implementation to small, reusable, easy-to-implement and easy-to-test pieces.","howto":"","url":"https://graphql-modules.com","github":"Urigo/graphql-modules","npm":"graphql-modules","sourcePath":"src/content/code/language-support/javascript/tools/graphql-modules.md","downloadCount":6616},{"name":"GiraphQL","description":"A plugin based schema builder for creating code-first GraphQL schemas in typescript","howto":"GiraphQL makes writing type-safe schemas simple, and works without a code generator,\nbuild process, or extensive manual type definitions.\n\n```ts\nimport { ApolloServer } from \"apollo-server\"\nimport SchemaBuilder from \"@giraphql/core\"\n\nconst builder = new SchemaBuilder({})\n\nbuilder.queryType({\n  fields: t => ({\n    hello: t.string({\n      args: {\n        name: t.arg.string({}),\n      },\n      resolve: (parent, { name }) => `hello, ${name || \"World\"}`,\n    }),\n  }),\n})\n\nnew ApolloServer({\n  schema: builder.toSchema({}),\n}).listen(3000)\n```","url":"https://giraphql.com/","github":"hayes/giraphql","npm":"@giraphql/core","sourcePath":"src/content/code/language-support/javascript/tools/giraphql.md","downloadCount":6235},{"name":"SOFA","description":"Generate REST API from your GraphQL API.","howto":"","url":"https://sofa-api.com/","github":"Urigo/SOFA","npm":"sofa-api","sourcePath":"src/content/code/language-support/javascript/tools/sofa.md","downloadCount":2508}]}}]}},"staticQueryHashes":["1581580458"]}