{"componentChunkName":"component---src-templates-tags-tsx","path":"/tags/announcements/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"GraphQL: A data query language","date":"14 Sep 2015","permalink":"/blog/graphql-a-query-language/","byline":"Lee Byron","guestBio":null,"sublinks":null,"layout":"blog","tags":["blog","spec"]},"id":"54662990-8461-5d87-a761-430d95b88d9d","excerpt":"When we built Facebook's mobile applications, we needed a data-fetching API powerful enough to describe all of Facebook, yet simple and easy…","rawMarkdownBody":"\nWhen we built Facebook's mobile applications, we needed a data-fetching API powerful enough to describe all of Facebook, yet simple and easy to learn so product developers can focus on building things quickly. We developed GraphQL three years ago to fill this need. Today it powers hundreds of billions of API calls a day. This year we've begun the process of open-sourcing GraphQL by drafting a specification, releasing a reference implementation, and forming a community around it here at [graphql.org](http://graphql.org/).\n\n## Why GraphQL?\n\nBack in 2012, we began an effort to rebuild Facebook's native mobile applications.\n\nAt the time, our iOS and Android apps were thin wrappers around views of our mobile website. While this brought us close to a platonic ideal of the \"write one, run anywhere\" mobile application, in practice it pushed our mobile-webview apps beyond their limits. As Facebook's mobile apps became more complex, they suffered poor performance and frequently crashed.\n\nAs we transitioned to natively implemented models and views, we found ourselves for the first time needing an API data version of News Feed — which up until that point had only been delivered as HTML. We evaluated our options for delivering News Feed data to our mobile apps, including RESTful server resources and FQL tables (Facebook's SQL-like API). We were frustrated with the differences between the data we wanted to use in our apps and the server queries they required. We don't think of data in terms of resource URLs, secondary keys, or join tables; we think about it in terms of a graph of objects and the models we ultimately use in our apps like NSObjects or JSON.\n\nThere was also a considerable amount of code to write on both the server to prepare the data and on the client to parse it. This frustration inspired a few of us to start the project that ultimately became GraphQL. GraphQL was our opportunity to rethink mobile app data-fetching from the perspective of product designers and developers. It moved the focus of development to the client apps, where designers and developers spend their time and attention.\n\n## What is GraphQL?\n\nA GraphQL query is a string that is sent to a server to be interpreted and fulfilled, which then returns JSON back to the client.\n\n```graphql\n# { \"graphiql\": true, \"schema\": \"Users\" }\n{\n  user(id: 4802170) {\n    id\n    name\n    isViewerFriend\n    profilePicture(size: 50)  {\n      uri\n      width\n      height\n    }\n    friendConnection(first: 5) {\n      totalCount\n      friends {\n        id\n        name\n      }\n    }\n  }\n}\n```\n\n**Defines a data shape:** The first thing you'll notice is that GraphQL queries mirror their response. This makes it easy to predict the shape of the data returned from a query, as well as to write a query if you know the data your app needs. More important, this makes GraphQL really easy to learn and use. GraphQL is unapologetically driven by the data requirements of products and of the designers and developers who build them.\n\n**Hierarchical:** Another important aspect of GraphQL is its hierarchical nature. GraphQL naturally follows relationships between objects, where a RESTful service may require multiple round-trips (resource-intensive on mobile networks) or a complex join statement in SQL. This data hierarchy pairs well with graph-structured data stores and ultimately with the hierarchical user interfaces it's used within.\n\n**Strongly typed:** Each level of a GraphQL query corresponds to a particular type, and each type describes a set of available fields. Similar to SQL, this allows GraphQL to provide descriptive error messages before executing a query. It also plays well with the strongly typed native environments of Obj-C and Java.\n\n**Protocol, not storage:** Each GraphQL field on the server is backed by a function - code linking to your application layer. While we were building GraphQL to support News Feed, we already had a sophisticated feed ranking and storage model, along with existing databases and business logic. GraphQL had to leverage all this existing work to be useful, and so does not dictate or provide any backing storage. Instead, GraphQL takes advantage of your existing code by exposing your application layer, not your storage layer.\n\n**Introspective:** A GraphQL server can be queried for the types it supports. This creates a powerful platform for tools and client software to build atop this information like code generation in statically typed languages, our application framework, Relay, or IDEs like GraphiQL (pictured below). GraphiQL helps developers learn and explore an API quickly without grepping the codebase or wrangling with cURL.\n\n```graphql\n# { \"graphiql\": true, \"schema\": \"Users\" }\n{\n  __type(name: \"User\") {\n    name\n    fields {\n      name\n      type {\n        name\n      }\n    }\n  }\n}\n`} />);\n```\n\n**Version free:** The shape of the returned data is determined entirely by the client's query, so servers become simpler and easy to generalize. When you're adding new product features, additional fields can be added to the server, leaving existing clients unaffected. When you're sunsetting older features, the corresponding server fields can be deprecated but continue to function. This gradual, backward-compatible process removes the need for an incrementing version number. We still support three years of released Facebook applications on a single version of our GraphQL API.\n\nWith GraphQL, we were able to build full-featured native News Feed on iOS in 2012, and on Android shortly after. Since then, GraphQL has become the primary way we build our mobile apps and the servers that power them. More than three years later, GraphQL powers almost all data-fetching in our mobile applications, serving millions of requests per second from nearly 1,000 shipped application versions.\n\nWhen we built GraphQL in 2012 we had no idea how important it would become to how we build things at Facebook and didn't anticipate its value beyond Facebook. However earlier this year we announced Relay, our application framework for the web and React Native built atop GraphQL. The community excitement for Relay inspired us to revisit GraphQL to evaluate every detail, make improvements, fix inconsistencies, and write a specification describing GraphQL and how it works.\n\nTwo months ago, we [made our progress public](https://www.youtube.com/watch?v=WQLzZf34FJ8) and released a working draft of the [GraphQL spec](http://facebook.github.io/graphql/) and a reference implementation: [GraphQL.js](https://github.com/graphql/graphql-js). Since then, a community has started to form around GraphQL, and versions of the GraphQL runtime are being [built in many languages](https://github.com/chentsulin/awesome-graphql), including Go, Ruby, Scala, Java, .Net, and Python. We've also begun to share some of the tools we use internally, like [GraphiQL](https://github.com/graphql/graphiql), an in-browser IDE, documentation browser, and query runner. GraphQL has also seen production usage outside Facebook, in a project for the [*Financial Times*](https://www.youtube.com/watch?v=S0s935RKKB4) by consultancy [Red Badger](http://red-badger.com/).\n\n“GraphQL makes orchestrating data fetching so much simpler and it pretty much functions as a perfect isolation point between the front end and the back end”\n— Viktor Charypar, software engineer at Red Badger\n\nWhile GraphQL is an established part of building products at Facebook, its use beyond Facebook is just beginning. Try out [GraphiQL](http://graphql-swapi.parseapp.com/graphiql/) and help provide feedback on our [specification](https://github.com/facebook/graphql/). We think GraphQL can greatly simplify data needs for both client product developers and server-side engineers, regardless of what languages you're using in either environment, and we're excited to continue to improve GraphQL, help a community grow around it, and see what we can build together.\n"}},{"node":{"frontmatter":{"title":"Subscriptions in GraphQL and Relay","date":"16 Oct 2015","permalink":"/blog/subscriptions-in-graphql-and-relay/","byline":"Dan Schafer and Laney Kuenzel","guestBio":null,"sublinks":null,"layout":"blog","tags":["blog","spec"]},"id":"68004958-9193-5dc8-9f9a-e0257002a44e","excerpt":"When we announced and open-sourced GraphQL and Relay this year, we described how they can be used to perform reads with queries, and to…","rawMarkdownBody":"\nWhen we announced and open-sourced GraphQL and Relay this year, we described how they can be used to perform reads with queries, and to perform writes with mutations. However, oftentimes clients want to get pushed updates from the server when data they care about changes. To support that, we’ve introduced a third operation into the GraphQL specification: subscription.\n\n## Event-based subscriptions\n\nThe approach that we’ve taken to subscriptions parallels that of mutations; just as the list of mutations that the server supports describes all of the actions that a client can take, the list of subscriptions that the server supports describes all of the events that it can subscribe to. Just as a client can tell the server what data to refetch after it performs a mutation with a GraphQL selection, the client can tell the server what data it wants to be pushed with the subscription with a GraphQL selection.\n\nFor example, in the Facebook schema, we have a mutation field named `storyLike`, that clients can use to like a post. The client might want to refetch the like count, as well as the like sentence (“Dan and 3 others like this”. We do this translation on the server because of the complexity of that translation in various languages). To do so, they would issue the following mutation:\n\n```\nmutation StoryLikeMutation($input: StoryLikeInput) {\n  storyLike(input: $input) {\n    story {\n      likers { count }\n      likeSentence { text }\n    }\n  }\n}\n```\n\nBut when you’re looking at a post, you also want to get pushed an update whenever someone else likes the post! That’s where subscriptions come in; the Facebook schema has a subscription field named `storyLikeSubscribe` that allows the client to get pushed data anytime someone likes or unlikes that story! The client would create a subscription like this:\n\n```\nsubscription StoryLikeSubscription($input: StoryLikeSubscribeInput) {\n  storyLikeSubscribe(input: $input) {\n    story {\n      likers { count }\n      likeSentence { text }\n    }\n  }\n}\n```\n\n\nThe client would then send this subscription to the server, along with the value for the `$input` variable, which would contain information like the story ID to which we are subscribing:\n\n```graphql\ninput StoryLikeSubscribeInput {\n  storyId: string\n  clientSubscriptionId: string\n}\n```\n\nAt Facebook, we send this query to the server at build time to generate a unique ID for it, then subscribe to a special MQTT topic with the subscription ID in it, but many different subscription mechanisms could be used here.\n\nOn the server, we then trigger this subscription every time someone likes a post. If all of our clients were using GraphQL, we could put this hook in the GraphQL mutation; since we have non-GraphQL clients as well, we put the hook in a layer below the GraphQL mutation to ensure it always fires.\n\n## Why not Live Queries?\n\nNotably, this approach requires the client to subscribe to events that it cares about. Another approach is to have the client subscribe to a query, and ask for updates every time the result of that query changes. Why didn’t we take that approach?\n\nLet’s look back at the data we wanted to refetch for the story:\n\n```\nfragment StoryLikeData on Story {\n  story {\n    likers { count }\n    likeSentence { text }\n  }\n}\n```\n\nWhat events could trigger that a change to the data fetched in that fragment?\n\n* Someone likes the post.\n* Someone unlikes the post.\n* Someone who had liked the post deactivates their account (changes the like count down one, changes the like sentence to decrement the translated count).\n* Someone who had liked the post reactivates their account (changes the like count up one, changes the like sentence to increment the translated count).\n* Someone who had liked the post blocks you (cannot show them in the like sentence).\n* Someone who had liked the post changes their name (need to update the text of the like sentence).\n* Our internal ranking model for the ordering of names in the like sentence updates, and we should be listing a different person first (want to update the text of the like sentence).\n\nAnd that’s just the tip of the iceberg in terms of events; each of those events also becomes tricky when there are thousands of people subscribed, and millions of people who liked the post. Implementing live queries for this set of data proved to be immensely complicated.\n\nWhen building event-based subscriptions, the problem of determining what should trigger an event is easy, since the event defines that explicitly. It also proved fairly straight-forward to implement atop existing message queue systems. For live queries, though, this appeared much harder. The value of our fields is determined by the result of their resolve function, and figuring out all of the things that could alter the result of that function was difficult. We could in theory have polled on the server to implement this, but that had efficiency and timeliness issues. Based on this, we decided to invest in the event-based subscription approach.\n\n## What’s next?\n\nWe’re actively building out the event-based subscription approach described above. We’ve built out live liking and commenting features on our iOS and Android apps using that approach, and are continuing to flesh out its functionality and API. While its current implementation at Facebook is coupled to Facebook’s infrastructure, we’re certainly looking forward to open sourcing our progress here as soon as we can.\n\nBecause our backend and schema don’t offer easy support for live queries, we don’t have any plans to develop them at Facebook. At the same time, it’s clear that there are backends and schemas for which live queries are feasible, and that they offer a lot of value in those situations. The discussion in the community on this topic has been fantastic, and we’re excited to see what kind of live query proposals emerge from it!\n\nSubscriptions create a ton of possibilities for creating truly dynamic applications. We’re excited to continue developing GraphQL and Relay with the help of the community to enable these possibilities.\n"}},{"node":{"frontmatter":{"title":"Mocking your server is easy with GraphQL","date":"19 Apr 2016","permalink":"/blog/mocking-with-graphql/","byline":"Jonas Helfer","guestBio":"engineer at Meteor working on Apollo","sublinks":null,"layout":"blog","tags":["blog"]},"id":"b23324d3-c2c9-5923-9b1a-9619ed9c0ab0","excerpt":"Do you think mocking your backend is always a tedious task? If you do, reading this post might change your mind… Mocking is the practice of…","rawMarkdownBody":"\nDo you think mocking your backend is always a tedious task? If you do, reading this post might change your mind…\n\nMocking is the practice of creating a fake version of a component, so that you can develop and test other parts of your application independently. Mocking your backend is a great way to quickly build a prototype of your frontend, and it lets you test your frontend without starting up any servers. API mocking is so useful that a [quick Google search](https://www.google.com/?ion=1&espv=2#q=mock+rest+api) will turn up dozens of expensive products and services that promise to help you.\n\nSadly, I think none of the solutions out there make it as easy as it should be. As it turns out, that’s because they’ve been trying to do it with the wrong technology!\n\n> Editor’s note : The concepts in this post are accurate, but some the code samples don’t demonstrate new usage patterns. After reading, consult the [graphql-tools docs](http://dev.apollodata.com/tools/graphql-tools/mocking.html) to see how to use mocking today.\n\n## Why mock?\n\nMocking the data a backend would return is very useful for two main reasons:\n\n1. It lets you start developing a frontend feature when you don’t have a working backend for it yet. This is critical for projects where the frontend and backend components are often developed in parallel.\n2. It lets you run tests locally without connecting to a real backend, which is much faster and safer. As your codebase grows and your app becomes more complex, starting up all of the server infrastructure just to run some tests isn’t feasible.\n\nIf mocking your backend API has such clear benefits, why doesn’t everyone do it? I think it's because mocking often seems like too much trouble to be worth it.\n\n## Why is mocking backends hard?\n\nLet’s say your backend is some REST API that is called over HTTP from the browser. You have someone working on the backend, and someone else working on the frontend. The backend code actually determines the shape of the data returned for each REST endpoint, but mocking has to be done in the frontend code. That means the mocking code will break every time the backend changes, unless both are changed at the same time. What’s worse, if you’re doing your frontend testing against a mock backend that is not up to date with your backend, your tests may pass, but your actual frontend won’t work.\n\nRather than having to keep more dependencies up to date, the easy option is to just not mock the REST API, or have the backend be in charge of mocking itself, just so it’s all in one place. That may be easier, but it will also slow you down.\n\nThe other reason I often hear for why people don’t mock the backend in their project is because it takes time to set up: first you have to include extra logic in your data fetching layer that lets you turn mocking on and off, and second you have to actually describe what that mock data should look like. For any non-trivial API that requires a lot of tedious work.\n\nBoth of these reasons for why mocking backends is hard are actually due to the same underlying reason: there is no standard REST API description in machine-consumable format and contains all the information necessary for mocking and can be used by both the backend and the frontend. There are some API description standards, like Swagger, but they don’t contain all of the information you need, and can be cumbersome to write and maintain. Unless you want to pay for a service or a product — and maybe even then — mocking is a lot of work.\n\nActually, I should say mocking used to be a lot of work, because a new technology is changing the way we think of APIs: GraphQL.\n\n## Mocking is easy with a type system!\n\nGraphQL makes mocking easy, because every GraphQL backend comes with a static type system. The types can be shared between your backend and your frontend, and they contain all of the information necessary to make mocking incredibly fast and convenient. With GraphQL, there is no excuse to not mock your backend for development or testing.\n\nHere’s how easy it is to create a mocked backend that will accept any valid GraphQL query with the GraphQL mocking tool we are building as part of our new [GraphQL server toolkit](https://github.com/apollostack/graphql-tools):\n\n```js\n// > npm install graphql-tools\nimport { mockServer } from 'graphql-tools';\nimport schema from './mySchema.graphql';\n\nconst myMockServer = mockServer(schema);\nmyMockServer.query(`{\n  allUsers: {\n    id\n    name\n  }\n}`);\n\n// returns\n// {\n//   data: {\n//     allUsers:[\n//       { id: 'ee5ae76d-9b91-4270-a007-fad2054e2e75', name: 'lorem ipsum' },\n//       { id: 'ca5c182b-99a8-4391-b4b4-4a20bd7cb13a', name: 'quis ut' }\n//     ]\n//   }\n// }\n```\n\nEvery GraphQL server needs a schema, so it’s not extra code you need to write just for mocking. And the query is the one your component already uses for fetching data, so that’s also not code you write just for mocking. Not counting the import statement, it only took us one line of code to mock the entire backend!\n\nPut that in contrast to most REST APIs out there, where mocking means parsing a URL and returning data in a custom shape for each endpoint. It takes dozens of lines to mock a single endpoint that returns some realistic-looking data. With GraphQL, the shape is encoded in the query, and together with the schema we have enough information to mock the server with a single line of code.\n\nDid I mention that this one line is all you need to return mock data for any valid GraphQL query you could send? Not just some valid query, any valid query! Pretty cool, right?\n\n## Customizing mock data\n\nIn the example above, the mock server will return completely random IDs and strings every time you query it. When you’ve just started building your app and only want to see what your UI code looks like in different states, that’s probably good enough, but as you start to fine-tune your layout, or want to use the mock server to test your component’s logic, you’ll probably need more realistic data.\n\nLuckily, this takes only a little more effort: customization of mock data is really where the Apollo mocking tool shines, because it lets you customize virtually everything about the mock data that it returns.\n\nIt lets you do all of the following and more:\n\n```js\n\n// customize mocking per type (i.e. Integer, Float, String)\nmockServer(schema, {\n  Int: () => 6,\n  Float: () => 22.1,\n  String: () => 'Hello',\n});\n\n// customize mocking per field in the schema (i.e. for Person.name and Person.age)\nmockServer(schema, {\n  Person: () => ({\n    name: casual.name,\n    age: () => casual.integer(0,120),\n  })\n});\n\n// mock lists of specific or random length( and lists of lists of lists …)\nmockServer(schema, {\n  Person: () => {\n    // a list of length between 2 and 6\n    friends: () => new MockList([2,6]),\n    // a list of three lists of two items: [[1, 1], [2, 2], [3, 3]]\n    listOfLists: () => new MockList(3, () => new MockList(2)),\n  },\n});\n\n// customize mocking of a field or type based on the query arguments\nmockServer(schema, {\n  Person: () => {\n    // the number of friends in the list now depends on numPages\n    paginatedFriends: (o, { numPages }) => new MockList(numPages * PAGE_SIZE),\n  },\n});\n\n// You can also disable mocking for specific fields, pass through to the backend, etc.\n```\n\nFor each type and each field you can provide a function that will be called on to generate mock data. Mock functions on fields have precedence over mock functions on types, but they work together really nicely: The field mock functions only need to describe the properties of the objects that matter to them, type mock functions will fill in the rest.\n\nThe mock functions are actually just GraphQL resolve functions in disguise. What that means is that your mocking can do anything that you could do inside a GraphQL resolve function. If you wanted, you could write your entire backend with it. I’m not saying you should, but you could.\n\nI think the real power of this tool is that while it allows almost arbitrarily complex customization, you can get started really quickly and increase the sophistication of your mocks in tiny steps whenever you need it. Each step is so simple that it will feel like a breeze.\n\nBut enough talking, here’s a complete example:\n\n```js\n\nimport { mockServer, MockList } from 'graphql-tools';\nimport casual from 'casual-browserify';\n\n// The GraphQL schema. Described in more detail here: \n// https://medium.com/apollo-stack/the-apollo-server-bc68762e93b\nconst schema = `\n  type User {\n    id: ID!\n    name: String\n    lists: [List]\n  }\n  type List {\n    id: ID!\n    name: String\n    owner: User\n    incomplete_count: Int\n    tasks(completed: Boolean): [Task]\n  }\n  type Task {\n    id: ID!\n    text: String\n    completed: Boolean\n    list: List\n  }\n  type RootQuery {\n    user(id: ID): User\n  }\n  schema {\n    query: RootQuery\n  }\n`;\n\n// Mock functions are defined per type and return an\n// object with some or all of the fields of that type.\n// If a field on the object is a function, that function\n// will be used to resolve the field if the query requests it.\nconst server = mockServer(schema, {\n  RootQuery: () => ({\n    user: (o, { id }) => ({ id }),\n  }),\n  List: () => ({\n    name: () => casual.word,\n    tasks: () => new MockList(4, (o, { completed }) => ({ completed })),\n  }),\n  Task: () => ({ text: casual.words(10) }),\n  User: () => ({ name: casual.name }),\n});\n\nmockServer.query(`\nquery tasksForUser{\n  user(id: 6) {\n    id\n    name\n    lists {\n      name\n      completeTasks: tasks(completed: true) {\n        completed\n        text\n      }\n      incompleteTasks: tasks(completed: false) {\n        completed\n        text\n      }\n      anyTasks: tasks {\n        completed\n        text\n      }\n    }\n  }\n}`);\n```\n\n## Live demo + try it yourself\nTo see the example in action and see what output it generates, head over to the [live demo](https://launchpad.graphql.com/98lq7vz8r) try running some queries!\n\nIf you want to fiddle around with the example, just click the \"Download\" button in the Launchpad UI. If you’re curious about how it works or want to see what other tools we’re building for GraphQL, then head over to [apollostack/graphql-tools](https://github.com/apollostack/graphql-tools).\n\nPretty cool, right? All of that becomes possible by using a type system. And that’s only just the beginning — we‘re working on bridging the gap between mocking and the real thing so that your mock server can gradually turn into your real server as you add more functionality to it.\n\n- - -\n\n*This post was originally published on [the Apollo Blog](https://medium.com/apollo-stack). We publish one or two posts every week, about the stuff we’re working on and thinking about.*\n"}},{"node":{"frontmatter":{"title":"Wrapping a REST API in GraphQL","date":"2016-05-05T00:00:00.000Z","permalink":"/blog/rest-api-graphql-wrapper/","byline":"Steven Luscher","guestBio":null,"sublinks":null,"layout":"blog","tags":["blog"]},"id":"d3cc340c-7c24-5e27-a664-64839d704b7c","excerpt":"Time and time again I hear the same aspiration from front-end web and mobile developers: they're eager to reap the developer efficiency…","rawMarkdownBody":"\nTime and time again I hear the same aspiration from front-end web and mobile developers: they're eager to reap the developer efficiency gains offered by new technologies like Relay and GraphQL, but they have years of momentum behind their existing REST API. Without data that clearly demonstrates the benefits of switching, they find it hard to justify an additional investment in GraphQL infrastructure.\n\nIn this post I will outline a rapid, low-investment method that you can use to stand up a GraphQL endpoint atop an existing REST API, using JavaScript alone. No backend developers will be harmed during the making of this blog post.\n\n## A client-side REST wrapper\n\nWe're going to create a _GraphQL schema_ – a type system that describes your universe of data – that wraps calls to your existing REST API. This schema will receive and resolve GraphQL queries all on the client side. This architecture features some inherent performance flaws, but is fast to implement and requires no server changes.\n\nImagine a REST API that exposes a `/people/` endpoint through which you can browse `Person` models and their associated friends.\n\n![A REST API that exposes an index of people][rest-api-people]\n\nWe will build a GraphQL schema that models people and their attributes (like `first_name` and `email`) as well as their association to other people through friendships.\n\n### Installation\n\nFirst we'll need a set of schema building tools.\n\n```\nnpm install --save graphql\n```\n\n### Building the GraphQL Schema\n\nUltimately we will want to export a `GraphQLSchema` that we can use to resolve queries.\n\n```js\nimport { GraphQLSchema } from 'graphql';\n\nexport default new GraphQLSchema({\n  query: QueryType,\n});\n```\n\nAt the root of all GraphQL schemas is a type called `query` whose definition we provide, and have specified here as `QueryType`. Let's build `QueryType` now – a type on which we will define all the possible things one might want to fetch.\n\nTo replicate all of the functionality of our REST API, let's expose two fields on `QueryType`:\n\n* an `allPeople` field – analogous to `/people/`\n* a `person(id: String)` field – analogous to `/people/{ID}/`\n\nEach field will consist of a return type, optional argument definitions, and a JavaScript method that resolves the data being queried for.\n\n```js\nimport {\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLString,\n} from 'graphql';\n\nconst QueryType = new GraphQLObjectType({\n  name: 'Query',\n  description: 'The root of all... queries',\n  fields: () => ({\n    allPeople: {\n      type: new GraphQLList(PersonType),\n      resolve: root => // Fetch the index of people from the REST API,\n    },\n    person: {\n      type: PersonType,\n      args: {\n        id: { type: GraphQLString },\n      },\n      resolve: (root, args) => // Fetch the person with ID `args.id`,\n    },\n  }),\n});\n```\n\nLet's leave the resolvers as a sketch for now, and move on to defining `PersonType`.\n\n```js\nimport {\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLString,\n} from 'graphql';\n\nconst PersonType = new GraphQLObjectType({\n  name: 'Person',\n  description: 'Somebody that you used to know',\n  fields: () => ({\n    firstName: {\n      type: GraphQLString,\n      resolve: person => person.first_name,\n    },\n    lastName: {\n      type: GraphQLString,\n      resolve: person => person.last_name,\n    },\n    email: {type: GraphQLString},\n    id: {type: GraphQLString},\n    username: {type: GraphQLString},\n    friends: {\n      type: new GraphQLList(PersonType),\n      resolve: person => // Fetch the friends with the URLs `person.friends`,\n    },\n  }),\n});\n```\n\nNote two things about the definition of `PersonType`. Firstly, we have not supplied a resolver for `email`, `id`, or `username`. The default resolver simply accesses the property of the `person` object that has the same name as the field. This works everywhere except where the property names do not match the field name (eg. the field `firstName` does not match the `first_name` property of the response object from the REST API) or where accessing the property would not yield the object that we want (eg. we want a list of person objects for the `friends` field, not a list of URLs).\n\nNow, let's write resolvers that fetch people from the REST API. Because we need to load from the network, we won't be able to return a value right away. Luckily for us, `resolve()` can return either a value or a `Promise` for a value. We're going to take advantage of this to fire off an HTTP request to the REST API that eventually resolves to a JavaScript object that conforms to `PersonType`.\n\nAnd here we have it – a complete first-pass at the schema:\n\n```js{28,38,45}\nimport {\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLString,\n} from 'graphql';\n\nconst BASE_URL = 'https://myapp.com/';\n\nfunction fetchResponseByURL(relativeURL) {\n  return fetch(`${BASE_URL}${relativeURL}`).then(res => res.json());\n}\n\nfunction fetchPeople() {\n  return fetchResponseByURL('/people/').then(json => json.people);\n}\n\nfunction fetchPersonByURL(relativeURL) {\n  return fetchResponseByURL(relativeURL).then(json => json.person);\n}\n\nconst PersonType = new GraphQLObjectType({\n  /* ... */\n  fields: () => ({\n    /* ... */\n    friends: {\n      type: new GraphQLList(PersonType),\n      resolve: person => person.friends.map(fetchPersonByURL),\n    },\n  }),\n});\n\nconst QueryType = new GraphQLObjectType({\n  /* ... */\n  fields: () => ({\n    allPeople: {\n      type: new GraphQLList(PersonType),\n      resolve: fetchPeople,\n    },\n    person: {\n      type: PersonType,\n      args: {\n        id: { type: GraphQLString },\n      },\n      resolve: (root, args) => fetchPersonByURL(`/people/${args.id}/`),\n    },\n  }),\n});\n\nexport default new GraphQLSchema({\n  query: QueryType,\n});\n```\n\n\n### Using a client-side schema with Relay\n\nNormally, Relay will send its GraphQL queries to a server over HTTP. We can inject [@taion](https://github.com/taion/)'s custom `relay-local-schema` network layer to resolve queries using the schema we just built. Put this code wherever it's guaranteed to be executed before you mount your Relay app.\n\n```\nnpm install --save relay-local-schema\n```\n\n```\nimport RelayLocalSchema from 'relay-local-schema';\n\nimport schema from './schema';\n\nRelay.injectNetworkLayer(\n  new RelayLocalSchema.NetworkLayer({ schema })\n);\n```\n\nAnd that's that. Relay will send all of its queries to your custom client-resident schema, which will in turn resolve them by making calls to your existing REST API.\n\n## A server-side REST wrapper\n\nThe client-side REST API wrapper demonstrated above should help you get up and running quickly so that you can try out a Relay version of your app (or part of your app).\n\nHowever, as we mentioned before, this architecture features some inherent performance flaws because of how GraphQL is still calling your underlying REST API which can be very network intensive. A good next step is to move the schema from the client side to the server side to minimize latency on the network and to give you more power to cache responses.\n\nTake the next 10 minutes to watch me build a server side version of the GraphQL wrapper above using Node and Express.\n\n<iframe id=\"ytplayer\" type=\"text/html\" width=\"640\" height=\"390\"\n  src=\"https://www.youtube.com/embed/UBGzsb2UkeY?autoplay=0&origin=http://graphql.org&start=900\"\n  frameborder=\"0\"></iframe>\n\n## Bonus round: A truly Relay compliant schema\n\nThe schema we developed above will work for Relay up until a certain point – the point at which you ask Relay to refetch data for records you've already downloaded. Relay's refetching subsystem relies on your GraphQL schema exposing a special field that can fetch any entity in your data universe by GUID. We call this the _node interface_.\n\nTo expose a node interface requires that you do two things: offer a `node(id: String!)` field at the root of the query, and switch all of your ids over to GUIDs (globally-unique ids).\n\nThe `graphql-relay` package contains some helper functions to make this easy to do.\n\n```\nnpm install --save graphql-relay\n```\n\n#### Global ids\n\nFirst, let's change the `id` field of `PersonType` into a GUID. To do this, we'll use the `globalIdField` helper from `graphql-relay`.\n\n```js\nimport {\n  globalIdField,\n} from 'graphql-relay';\n\nconst PersonType = new GraphQLObjectType({\n  name: 'Person',\n  description: 'Somebody that you used to know',\n  fields: () => ({\n    id: globalIdField('Person'),\n    /* ... */\n  }),\n});\n```\n\nBehind the scenes `globalIdField` returns a field definition that resolves `id` to a `GraphQLString` by hashing together the typename `'Person'` and the id returned by the REST API. We can later use `fromGlobalId` to convert the result of this field back into `'Person'` and the REST API's id.\n\n#### The node field\n\nAnother set of helpers from `graphql-relay` will give us a hand developing the node field. Your job is to supply the helper two functions:\n\n* One function that can resolve an object given a GUID.\n* One function that can resolve a typename given an object.\n\n```js\nimport {\n  fromGlobalId,\n  nodeDefinitions,\n} from 'graphql-relay';\n\nconst { nodeInterface, nodeField } = nodeDefinitions(\n  globalId => {\n    const { type, id } = fromGlobalId(globalId);\n    if (type === 'Person') {\n      return fetchPersonByURL(`/people/${id}/`);\n    }\n  },\n  object => {\n    if (object.hasOwnProperty('username')) {\n      return 'Person';\n    }\n  },\n);\n```\n\nThe object-to-typename resolver above is no marvel of engineering, but you get the idea.\n\nNext, we simply need to add the `nodeInterface` and the `nodeField` to our schema. A complete example follows:\n\n```js{27-39,54,61,72}\nimport {\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLString,\n} from 'graphql';\nimport {\n  fromGlobalId,\n  globalIdField,\n  nodeDefinitions,\n} from 'graphql-relay';\n\nconst BASE_URL = 'https://myapp.com/';\n\nfunction fetchResponseByURL(relativeURL) {\n  return fetch(`${BASE_URL}${relativeURL}`).then(res => res.json());\n}\n\nfunction fetchPeople() {\n  return fetchResponseByURL('/people/').then(json => json.people);\n}\n\nfunction fetchPersonByURL(relativeURL) {\n  return fetchResponseByURL(relativeURL).then(json => json.person);\n}\n\nconst { nodeInterface, nodeField } = nodeDefinitions(\n  globalId => {\n    const { type, id } = fromGlobalId(globalId);\n    if (type === 'Person') {\n      return fetchPersonByURL(`/people/${id}/`);\n    }\n  },\n  object => {\n    if (object.hasOwnProperty('username')) {\n      return 'Person';\n    }\n  },\n);\n\nconst PersonType = new GraphQLObjectType({\n  name: 'Person',\n  description: 'Somebody that you used to know',\n  fields: () => ({\n    firstName: {\n      type: GraphQLString,\n      resolve: person => person.first_name,\n    },\n    lastName: {\n      type: GraphQLString,\n      resolve: person => person.last_name,\n    },\n    email: {type: GraphQLString},\n    id: globalIdField('Person'),\n    username: {type: GraphQLString},\n    friends: {\n      type: new GraphQLList(PersonType),\n      resolve: person => person.friends.map(fetchPersonByURL),\n    },\n  }),\n  interfaces: [ nodeInterface ],\n});\n\nconst QueryType = new GraphQLObjectType({\n  name: 'Query',\n  description: 'The root of all... queries',\n  fields: () => ({\n    allPeople: {\n      type: new GraphQLList(PersonType),\n      resolve: fetchPeople,\n    },\n    node: nodeField,\n    person: {\n      type: PersonType,\n      args: {\n        id: { type: GraphQLString },\n      },\n      resolve: (root, args) => fetchPersonByURL(`/people/${args.id}/`),\n    },\n  }),\n});\n\nexport default new GraphQLSchema({\n  query: QueryType,\n});\n```\n\n## Taming pathological queries\n\nConsider the following friends-of-friends-of-friends query:\n\n```graphql\nquery {\n  person(id: \"1\") {\n    firstName\n    friends {\n      firstName\n      friends {\n        firstName\n        friends {\n          firstName\n        }\n      }\n    }\n  }\n}\n```\n\nThe schema we created above will generate multiple round trips to the REST API for the same data.\n\n![Duplicate queries to the REST API][pathological-query]\n\nThis is obviously something we would like to avoid! At the very least, we need a way to cache the result of these requests.\n\nWe created a library called DataLoader to help tame these sorts of queries.\n\n```\nnpm install --save dataloader\n```\n\nAs a special note, make sure that your runtime offers native or polyfilled versions of `Promise` and `Map`. Read more [at the DataLoader site](https://github.com/facebook/dataloader#getting-started).\n\n#### Creating a data loader\n\nTo create a `DataLoader` you supply a method that can resolve a list of objects given a list of keys. In our example, the keys are URLs at which we access our REST API.\n\n```js\nconst personLoader = new DataLoader(\n  urls => Promise.all(urls.map(fetchPersonByURL))\n);\n```\n\nIf this data loader sees a key more than once in its lifetime, it will return a memoized (cached) version of the response.\n\n#### Loading data\n\nWe can make use of the `load()` and `loadMany()` methods on `personLoader` to load URLs without fear of hitting the REST API more than once per URL. A complete example follows:\n\n```js{36,63,83}\nimport DataLoader from 'dataloader';\nimport {\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLString,\n} from 'graphql';\nimport {\n  fromGlobalId,\n  globalIdField,\n  nodeDefinitions,\n} from 'graphql-relay';\n\nconst BASE_URL = 'https://myapp.com/';\n\nfunction fetchResponseByURL(relativeURL) {\n  return fetch(`${BASE_URL}${relativeURL}`).then(res => res.json());\n}\n\nfunction fetchPeople() {\n  return fetchResponseByURL('/people/').then(json => json.people);\n}\n\nfunction fetchPersonByURL(relativeURL) {\n  return fetchResponseByURL(relativeURL).then(json => json.person);\n}\n\nconst personLoader = new DataLoader(\n  urls => Promise.all(urls.map(fetchPersonByURL))\n);\n\nconst { nodeInterface, nodeField } = nodeDefinitions(\n  globalId => {\n    const {type, id} = fromGlobalId(globalId);\n    if (type === 'Person') {\n      return personLoader.load(`/people/${id}/`);\n    }\n  },\n  object => {\n    if (object.hasOwnProperty('username')) {\n      return 'Person';\n    }\n  },\n);\n\nconst PersonType = new GraphQLObjectType({\n  name: 'Person',\n  description: 'Somebody that you used to know',\n  fields: () => ({\n    firstName: {\n      type: GraphQLString,\n      resolve: person => person.first_name,\n    },\n    lastName: {\n      type: GraphQLString,\n      resolve: person => person.last_name,\n    },\n    email: {type: GraphQLString},\n    id: globalIdField('Person'),\n    username: {type: GraphQLString},\n    friends: {\n      type: new GraphQLList(PersonType),\n      resolve: person => personLoader.loadMany(person.friends),\n    },\n  }),\n  interfaces: [nodeInterface],\n});\n\nconst QueryType = new GraphQLObjectType({\n  name: 'Query',\n  description: 'The root of all... queries',\n  fields: () => ({\n    allPeople: {\n      type: new GraphQLList(PersonType),\n      resolve: fetchPeople,\n    },\n    node: nodeField,\n    person: {\n      type: PersonType,\n      args: {\n        id: { type: GraphQLString },\n      },\n      resolve: (root, args) => personLoader.load(`/people/${args.id}/`),\n    },\n  }),\n});\n\nexport default new GraphQLSchema({\n  query: QueryType,\n});\n```\n\nNow, our pathological query produces the following nicely de-duped set of requests to the REST API:\n\n![De-duped queries to the REST API][dataloader-query]\n\n### Query planning and beyond\n\nConsider that your REST API might already offer configuration offers that let you eagerly load associations. Maybe to load a person and all of their direct friends you might hit the URL `/people/1/?include_friends`. To take advantage of this in your GraphQL schema you will need the ability to develop a resolution plan based on the structure of the query itself (eg. whether the `friends` field is part of the query or not).\n\nFor those interested in the current thinking around advanced resolution strategies, keep an eye on [pull request #304](https://github.com/graphql/graphql-js/pull/304).\n\n## Thanks for reading\n\nI hope that this demonstration has torn down some of the barriers between you and a functional GraphQL endpoint, and has inspired you to experiment with GraphQL and Relay on an existing project.\n\n[rest-api-people]: /img/blog/20160502-rest-api-graphql-wrapper/rest-api-people.png \"A REST API that exposes an index of people\"\n[pathological-query]: /img/blog/20160502-rest-api-graphql-wrapper/pathological-query.png \"Duplicate queries to the REST API\"\n[dataloader-query]: /img/blog/20160502-rest-api-graphql-wrapper/dataloader-query.png \"De-duped queries to the REST API\"\n"}},{"node":{"frontmatter":{"title":"Leaving technical preview","date":"14 Sep 2016","permalink":"/blog/production-ready/","byline":"Lee Byron","guestBio":null,"sublinks":null,"layout":"blog","tags":["blog"]},"id":"b6b98148-ef53-5ee8-8430-1d3e5238fdbf","excerpt":"After over a year of being open sourced we're bringing GraphQL out of \"technical preview\" and relaunching graphql.org. For us at Facebook…","rawMarkdownBody":"\nAfter over a year of being open sourced we're bringing GraphQL out of \"technical preview\" and relaunching [graphql.org](http://graphql.org/).\n\nFor us at Facebook, GraphQL isn't a new technology. GraphQL has been delivering data to mobile News Feed since 2012. Since then it's expanded to support the majority of the Facebook mobile product and evolved in the process.\n\nEarly last year when we first [spoke publicly about GraphQL](https://www.youtube.com/watch?v=9sc8Pyc51uU) we received overwhelming demand to share more about this technology. That sparked an internal project to revisit GraphQL, make improvements, draft a specification, produce a reference implementation you could use to try it out, and build new versions of some of our favorite tools, like [GraphiQL](https://github.com/graphql/graphiql). We moved quickly, and released parts that were ready along the way.\n\nPart of Facebook's open source philosophy is that we want to only open source what is ready for production. While it's true that we had been using GraphQL in production at Facebook for years, we knew that these newly released pieces had yet to be proven. We expected feedback. So we carefully released GraphQL as a \"technical preview.\"\n\nExactly one year ago, we published graphql.org, with a [formal announcement](/blog/graphql-a-query-language/) that GraphQL was open source and ready to be \"technically previewed\". Since then we've seen GraphQL implemented [in many languages](/code/), and successfully adopted by other companies. That includes today's exciting announcement of the [GitHub GraphQL API](http://githubengineering.com/the-github-graphql-api/), the first major public API to use GraphQL.\n\nIn recognition of the fact that GraphQL is now being used in production by many companies, we're excited to remove the \"technical preview\" moniker. GraphQL is production ready.\n\nWe've also revamped this website, [graphql.org](http://graphql.org/), with clearer and more relevant content in response to some the most common questions we've received over the last year.\n\nWe think GraphQL can greatly simplify data needs for both client product developers and server-side engineers, regardless of what languages you're using in either environment, and we're excited to continue to improve GraphQL, support the already growing community, and see what we can build together.\n"}},{"node":{"frontmatter":{"title":"ProgrammableWeb: GraphQL Moving to Neutral, Open-Source Foundation","date":"2017-11-08T00:00:00.000Z","permalink":"/blog/2017-11-08-programmableweb-graphql-moving-to-neutral-open-source-foundation","byline":"ProgrammableWeb","guestBio":null,"sublinks":null,"layout":"blog","tags":["in-the-news"]},"id":"946b6e8c-821f-52f1-9255-8869fa933e70","excerpt":"GraphQL will now have its own foundation: the GraphQL Foundation. Although GraphQL was initially incubated by Facebook, GraphQL is now…","rawMarkdownBody":"\nGraphQL will now have its own foundation: the [GraphQL Foundation](/foundation/). Although GraphQL was initially incubated by Facebook, GraphQL is now utilized heavily by a diverse set of companies including major tech giants (e.g. Twitter, Airbnb, Shopify, etc.). Accordingly, it makes sense that the data query language move to a neutral, open source home.  Like many open source projects, the GraphQL Foundation will be hosted by the Linux Foundation. Linux will implement an open governance model similar to many collaborations overseen by Linux. The exact details of the model, and future plans continue to be a work in progress. The current founding members include Airbnb, Apollo, Coursera, Elementl, Facebook, GitHub, Hasura, Prisma, Shopify and Twitter. \n\n[Read More »](https://www.programmableweb.com/news/graphql-moving-to-neutral-open-source-foundation/brief/2018/11/08)"}},{"node":{"frontmatter":{"title":"eWeek: GraphQL API Specification Moving Forward with Independent Foundation","date":"2018-11-06T00:00:00.000Z","permalink":"/blog/2018-11-06-eweek-graphql-api-specification-moving-forward-with-independent-foundation","byline":"eweek","guestBio":null,"sublinks":null,"layout":"blog","tags":["in-the-news"]},"id":"1e4a6e1b-cdd6-5a9b-993c-a5ed90a0f18e","excerpt":"The Linux Foundation announced on Nov. 6 that it is forming a new foundation to support the open source GraphQL specification, which enables…","rawMarkdownBody":"\nThe Linux Foundation announced on Nov. 6 that it is forming a new foundation to support the open source GraphQL specification, which enables a new generation of APIs. For nearly two decades, REST (Representational State Transfer) has been one of the primary approaches for enabling APIs that help to connect and extend applications and web services.  REST however has multiple limitations, which is where GraphQL steps into the picture, finding wide adoption by large web properties. GraphQL was created in 2012 by Facebook and became open source in 2015. The move to create a new vendor-neutral independent foundation under the Linux Foundation will serve to help further advance the development of GraphQL.\n\n[Read more »](https://www.eweek.com/development/graphql-api-specification-moving-forward-with-independent-foundation)"}},{"node":{"frontmatter":{"title":"InfoWorld: GraphQL gets its own foundation","date":"2018-11-06T00:00:00.000Z","permalink":"/blog/2018-11-06-infoworld-graphql-gets-its-own-foundation","byline":"InfoWorld","guestBio":null,"sublinks":null,"layout":"blog","tags":["in-the-news"]},"id":"b17f197e-2c9e-5f92-be5f-508a22269643","excerpt":"The Linux Foundation plans to host a foundation to support the GraphQL API project, with the intent of growing a neutral ecosystem for the…","rawMarkdownBody":"\nThe Linux Foundation plans to host a foundation to support the GraphQL API project, with the intent of growing a neutral ecosystem for the technology.\n\nGraphQL is a specification for building APIs. It is intended to make cross-platform and mobile development simpler. Providing an alternative to REST, GraphQL lets developers use a strongly typed query language to define requests and responses, letting an application specify what it needs from an API. GraphQL enables access to multiple data sources through a single request.\n\n[Read more »](https://www.infoworld.com/article/3318255/apis/graphql-gets-its-own-foundation.html)"}},{"node":{"frontmatter":{"title":"The Linux Foundation Announces Intent to Form New Foundation to Support GraphQL","date":"2018-11-06T00:00:00.000Z","permalink":"/blog/2018-11-06-linux-foundation-announces-intent-to-form-new-foundation-to-support-graphql","byline":"GraphQL Foundation","guestBio":null,"sublinks":null,"layout":"blog","tags":["announcements"]},"id":"c503e763-b025-5066-a0c5-403bb518472b","excerpt":"The Linux Foundation, the nonprofit organization enabling mass innovation through open source, announces a broad coalition of industry…","rawMarkdownBody":"\n[The Linux Foundation](https://www.linuxfoundation.org/), the nonprofit organization enabling mass innovation through open source, announces a broad coalition of industry leaders and users have joined forces to create a new open source foundation for the [GraphQL](https://graphql.org/) project, which will be dedicated to growing and sustaining a neutral GraphQL ecosystem. Hosted under the Linux Foundation, the [GraphQL Foundation](https://gql.foundation/)'s mission will be to enable widespread adoption and help accelerate development of GraphQL and the surrounding ecosystem.\n\n“As one of GraphQL’s co-creators, I’ve been amazed and proud to see it grow in adoption since its open sourcing. Through the formation of the GraphQL Foundation, I hope to see GraphQL become industry standard by encouraging contributions from a broader group and creating a shared investment in vendor-neutral events, documentation, tools, and support,” said Lee Byron, co-creator of GraphQL.\n\nGraphQL is a next­-generation API technology developed internally by Facebook in 2012 before being publicly [open sourced in 2015](https://code.fb.com/core-data/graphql-a-data-query-language/). As application development shifts towards microservices architectures with an emphasis on flexibility and speed to market, tools like GraphQL are redefining API design and client-server interaction to improve the developer experience, increasing developer productivity and minimizing amounts of data transferred. GraphQL makes cross-platform and mobile development simpler with availability in multiple programming languages, allowing developers to create seamless user experiences for their customers.\n\nGraphQL is being used in production by a [variety of high scale companies](https://graphql.org/users/) such as Airbnb, Atlassian, Audi, CNBC, GitHub, Major League Soccer, Netflix, Shopify, The New York Times, Twitter, Pinterest and Yelp. GraphQL also [powers hundreds of billions of API calls a day at Facebook](https://code.fb.com/core-data/graphql-a-data-query-language/).\n\n“We are thrilled to welcome the GraphQL Foundation into the Linux Foundation. This advancement is important because it allows for long-term support and accelerated growth of this essential and groundbreaking technology that is changing the approach to API design for cloud-connected applications in any language,” said Jim Zemlin, Executive Director, the Linux Foundation.\n\nUnlike REST-­based APIs, which take advantage of HTTP and existing protocols, GraphQL APIs provide developers with the flexibility to query the exact data they need from a diverse set of cloud data sources, with less code, greater performance and security, and a faster development cycle. Not only does this enable developers to rapidly build top­ quality apps, it also helps them achieve consistency and feature parity across multiple platforms such as web, iOS, Android, and embedded and IoT applications.\n\nThe GraphQL Foundation will have an open governance model that encourages participation and technical contribution and will provide a framework for long-term stewardship by an ecosystem invested in GraphQL’s success.\n\n“At Facebook, our mission is to give people the power to build community and bring the world closer together. We believe open source projects and the communities built around them help accelerate the pace of innovation and bring many minds to bear to solve large-scale challenges. GraphQL is one such project and community and the GraphQL Foundation will help ensure GraphQL continues to solve the real data fetching challenges that developers will face in building the products of tomorrow,” said Killian Murphy, Director, Facebook Open Source.\n\n“GraphQL has redefined how developers work with APIs and client-server interactions. We look forward to working with the diverse GraphQL community from end users like Facebook to a diverse ecosystem of vendors to become an independent foundation, draft their governance and continue to foster the growth and adoption of GraphQL,” said Chris Aniszczyk, Vice President of Developer Relations, the Linux Foundation.\n\n## Supporting Quotes\n\n“Airbnb is making a massive investment in GraphQL, putting it at the center of our API strategy across both our product and internal tools. We are excited to see the Foundation play a key role in cultivating the community around GraphQL and continue to evolve GraphQL as a technology, paving the way for continued innovation of Airbnb’s API.” — Adam Neary, Tech Lead, Airbnb\n\n“Given GraphQL’s centrality in the modern app development stack, the foundation we’re announcing today is not just necessary, but overdue. As the creators of Apollo, the most widely used implementation of GraphQL, we’re looking forward to working together with the Linux Foundation to define appropriate governance processes for this critical Internet standard.” – Geoff Schmidt, co­-founder and CEO of Apollo GraphQL\n\n“GraphQL, and the strong ecosystem behind it, is leading to a fundamental change in how we build products, and it helps bring together teams and organizations of every size. At Coursera, GraphQL assists us in understanding the massive breadth of our APIs and helps us create transformative educational experiences for everyone, everywhere. We’re excited to see the impact of the GraphQL Foundation in making both the technology and the community stronger.” – Jon Wong, Staff Software Engineer, Coursera\n\n“GraphQL has come a long way since its creation in 2012. It’s been an honor seeing the technology grow from a prototype, to powering Facebook’s core applications, to an open source technology on the way to becoming a ubiquitous standard across the entire industry. The GraphQL Foundation is an exciting step forward. This new governance model is a major milestone in that maturation process that will ensure a neutral venue and structure for the entire community to drive the technology forward.” – Nick Schrock, Founder, Elementl, GraphQL Co-Creator\n\n“We created GraphQL at Facebook six years ago to help us build high-performance mobile experiences, so to see it grow and gain broad industry adoption has been amazing. Since Facebook open-sourced GraphQL in 2015, the community has grown to include developers around the world, newly-founded startups, and well-established companies. The creation of the GraphQL Foundation is a new chapter that will create a governance structure we believe will empower the community and provide GraphQL long-term technical success. I’m excited to see its continued growth under the Foundation’s guidance.” – Dan Schafer, Facebook Software Engineer, GraphQL Co-Creator\n\n“GraphQL has proven to be a valuable, extensible tool for GitHub, our customers, and our integrators over the past two years. The GraphQL Foundation embodies openness, transparency, and community — all of which we believe in at GitHub.” – Kyle Daigle, Director, Ecosystem Engineering, GitHub\n\n“This is a very welcome announcement, and we believe that this is a necessary step. The GraphQL community has grown rapidly over the last few years, and has reached the point where transparent, neutral governance policies are necessary for future growth. At Hasura, we look forward to helping the Foundation in its work.” – Tanmai Gopal, CEO, Hasura\n\n“GraphQL has become one of the most important technologies in the modern application development stack and sees rapid adoption by developers and companies across all industries. At Prisma, we’re very excited to support the GraphQL Foundation to enable a healthy community and sustain the continuous development of GraphQL.” – Johannes Schickling, Founder and CEO, Prisma\n\n“At Shopify, GraphQL powers our core APIs and all our mobile and web clients. We strongly believe in open development and look to the Foundation to help expand the community and nurture its evolution.” – Jean-Michel Lemieux, SVP Engineering, Shopify\n\n“GraphQL is gaining tremendous adoption as one of the best protocols for remote retrieval of large object graphs. At Twitter, we are looking forward to what’s to come in the GraphQL ecosystem and are very excited to support the GraphQL Foundation.” – Anna Sulkina Sr. Engineering Manager, Core Services Group, Twitter\n"}},{"node":{"frontmatter":{"title":"Datanami: Will GraphQL Become a Standard for the New Data Economy?","date":"2018-11-07T00:00:00.000Z","permalink":"/blog/2018-11-07-datanami-will-graphql-become-a-standard-for-the-new-data-economy","byline":"Datanami","guestBio":null,"sublinks":null,"layout":"blog","tags":["in-the-news"]},"id":"1e6b5b67-2ceb-5b5c-86c6-56fc1ce12f8a","excerpt":"Don’t look now but a new language called GraphQL is emerging that could radically simplify how developers use APIs to get data into…","rawMarkdownBody":"\nDon’t look now but a new language called GraphQL is emerging that could radically simplify how developers use APIs to get data into applications, and potentially provide a graph-like alternative to procedural REST. The company behind the open source software, Apollo, today announced the GraphQL Platform to standardize access to the new technology.\n\n[Read more »](https://www.datanami.com/2018/11/07/will-graphql-become-a-standard-for-the-new-data-economy/)\n"}},{"node":{"frontmatter":{"title":"SD Times: The Linux Foundation announces plans to form GraphQL foundation","date":"2018-11-07T00:00:00.000Z","permalink":"/blog/2018-11-07-sd-times-lf-announces-plans-to-form-graphql-foundation","byline":"SD Times","guestBio":null,"sublinks":null,"layout":"blog","tags":["in-the-news"]},"id":"ce3427b2-7fdb-51be-a5eb-b9ec28ac8770","excerpt":"In an effort to grow and sustain the GraphQL ecosystem, The Linux Foundation has announced plans to launch a new open-source foundation for…","rawMarkdownBody":"\nIn an effort to grow and sustain the GraphQL ecosystem, The Linux Foundation has announced plans to launch a new open-source foundation for it. GraphQL is an [API](https://sdtimes.com/tag/apis/) technology that was initially developed by Facebook.\n\nThe GraphQL Foundation will be a collaborative effort between industry leaders and users.\n\n[Read more »](https://sdtimes.com/api/the-linux-foundation-announces-plans-to-form-graphql-foundation/)\n"}},{"node":{"frontmatter":{"title":"The Register: Facebook’s open-source license drama-zone GraphQL gets swanky digs in Linux mansion","date":"2018-11-07T00:00:00.000Z","permalink":"/blog/2018-11-07-the-register","byline":"The Register","guestBio":null,"sublinks":null,"layout":"blog","tags":["in-the-news"]},"id":"a06863ea-bba8-5b3f-9dca-13d33c400cef","excerpt":"GraphQL, a query language for APIs that was on the verge of being shunned last year over software license concerns, has bounced back and…","rawMarkdownBody":"\nGraphQL, a query language for APIs that was on the verge of being shunned last year over software license concerns, has bounced back and landed in the arms of the Linux Foundation. \n\n[Read more »](https://www.theregister.co.uk/2018/11/07/graphql_on_linux/)"}},{"node":{"frontmatter":{"title":"Channel Futures: GraphQL API Query Language Growing, Gets Own Support Foundation","date":"2018-11-12T00:00:00.000Z","permalink":"/blog/2018-11-12-channel-futures-graphql-api-query-language-growing","byline":"Channel Futures","guestBio":null,"sublinks":null,"layout":"blog","tags":["in-the-news"]},"id":"766c89d5-07fc-58f7-a23e-c5a7d4e4cf8a","excerpt":"The growing popularity and use of the open-source GraphQL API language by software developers has inspired the creation of a GraphQL…","rawMarkdownBody":"\nThe growing popularity and use of the open-source GraphQL API language by software developers has inspired the creation of a [GraphQL Foundation](https://www.linuxfoundation.org/press-release/2018/11/intent_to_form_graphql/) to promote the technology and help it accelerate its development and footprint in future code.\n\n<!-- more -->\n\nThe new organization, hosted by the non-profit [Linux Foundation](http://www.linuxfoundation.org/), is made up of a wide range of companies and users that are interested in growing and nurturing the GraphQL API project, which Facebook originally developed internally. After several years of development, Facebook released the code for GraphQL as an opn-source project.\n\n[Read more »](https://www.channelfutures.com/open-source/graphql-api-query-language-growing-gets-own-support-foundation\n)"}},{"node":{"frontmatter":{"title":"The GraphQL Foundation Announces Collaboration with the Joint Development Foundation to Drive Open Source and Open Standards","date":"2019-03-12T00:00:00.000Z","permalink":"/blog/2019-03-12-graphql-foundation-announces-collaboration-with-jdf","byline":"GraphQL Foundation","guestBio":null,"sublinks":null,"layout":"blog","tags":["announcements"]},"id":"5e901127-d944-5e55-9dc2-9a75251ea4a0","excerpt":"The  GraphQL Foundation, a neutral home for the GraphQL community to accelerate development of the surrounding ecosystem, today announces it…","rawMarkdownBody":"\nThe  [GraphQL Foundation](/foundation/), a neutral home for the GraphQL community to accelerate development of the surrounding ecosystem, today announces it is collaborating with the Joint Development Foundation (JDF), [which recently joined the Linux Foundation to drive adoption of open source and standards](https://www.linuxfoundation.org/press-release/2018/12/jdf-joins-lf-family/), to continue developing the [GraphQL specification](https://github.com/facebook/graphql/).\n\nGraphQL Foundation encourages contributions, stewardship, and a shared investment from a broad group in vendor-neutral events, documentation, tools, and support for the data query language. The following companies Apollo, AWS, Butterfly Network, Dgraph Labs, Facebook, Gatsby, GraphZen, Hasura, IBM, Intuit, Neo4j, Novvum, Pipefy, Salsify, Solo.io and Thicit are joining as members to advance GraphQL as an industry specification for designing more effective APIs.\n\nGraphQL powers hundreds of billions of API calls a day at Facebook, which developed the technology in 2012 and played an integral role in helping GraphQL [join the Linux Foundation last year](https://www.linuxfoundation.org/press-release/2018/11/intent_to_form_graphql/).  Today, virtually every major programming language offers GraphQL support through a variety of open source software libraries.\n\nGraphQL is the first Linux Foundation project to benefit from the JDF and Linux Foundation collaboration, which provides open source projects with a swift path to standardization for open specifications. Developers will have an open GraphQL specification and open source software implementations available for designing conformant APIs.\n\n“We are excited to formally welcome new members and to work closely with them to build out and support a global GraphQL ecosystem. We’re pleased that the GraphQL specification will continue to evolve through the JDF and Linux Foundation partnership. With an easier and faster way to create and advance standards, developers can concentrate on creating applications that make a bigger impact on communities around the world,” said Lee Byron, co-creator of GraphQL.\n\nGraphQL is important for API development as it allows nested objects in a single API request that traditionally would require multiple API requests. The [GraphQL specification](https://github.com/facebook/graphql/), [GraphQL.js](https://github.com/graphql/graphql-js) reference implementation, [DataLoader](https://github.com/facebook/dataloader) library, and [GraphiQL](https://github.com/graphql/graphiql) developer tool are technical projects supported by the GraphQL Foundation. As application development shifts toward microservices architectures with an emphasis on flexibility and speed to market, tools like GraphQL are redefining API design and client-server interaction to improve the developer experience, increasing developer productivity and minimizing amounts of data transferred. GraphQL makes cross-platform and mobile development simpler with availability in multiple programming languages that are consistent and feature parity across multiple platforms such as web, iOS, Android, and embedded and IoT applications.\n\n[The Linux Foundation](https://www.linuxfoundation.org/) and the [Facebook Open Source](https://opensource.facebook.com/) team leveraged the JDF’s proven framework to create a lightweight governance structure for specifications — allowing communities to quickly spin-up neutral collaborations.\n\n“We’re thrilled to see GraphQL and the Joint Development Foundation join forces and get to work so quickly to advance open standards,” said Jim Zemlin, executive director of the Linux Foundation. “Working with the JDF, the GraphQL community is able to leverage turnkey infrastructure to create and manage open standards more quickly and nimbly than ever before. This allows developers to continue to break barriers and modernize application development.”\n\n“We are very pleased to have worked closely with the Linux Foundation in creating this novel approach to specification-based collaborations,” said Michael Cheng from the Facebook Open Source team. “By offering open source communities a streamlined path to standardization and nurturing open source implementations, this strategic alignment benefits GraphQL developers, corporate contributors and end users who need both outcomes to succeed.”\n\n“We look forward to working closely with the GraphQL Foundation and we expect many other Linux Foundation projects to work with us this year to accelerate specifications and standards development to advance their mission and drive the creation of innovative technology, ” said David Rudin, president of the Joint Development Foundation.\n\n## Member Quotes\n\n“Given GraphQL’s centrality in the modern app development stack, the foundation we’re launching today is not just necessary, but overdue. As the creators of Apollo, the most widely used implementation of GraphQL, we’re looking forward to working together with the Linux Foundation to define appropriate governance processes and accelerate the adoption of this critical Internet standard.” — Geoff Schmidt, CEO and Co-Founder, Apollo\n\n“GraphQL is a foundational technology for building APIs that empower frontend developers to deliver the best user experience for their customers. With AWS AppSync and the Amplify Framework, AWS is enabling developers to build and run critical GraphQL workloads at scale, and we are excited to join the Foundation to support and grow the GraphQL community.” — Adrian Cockcroft, Vice President of Cloud Architecture Strategy, AWS\n\n“GraphQL has been invaluable to Butterfly Network in advancing our mission of democratizing medical imaging. It’s enabled us to build data-efficient APIs to serve healthcare providers in areas with limited broadband internet access, while preserving our ability to quickly develop new API functionality. GraphQL has played a key role in allowing our back end and front end teams to work together with a minimum of friction. We’re excited to support the GraphQL Foundation in its work to further shepherd the standard.” — Jimmy Jia, Principal Scientist, Butterfly Network\n\n“Dgraph started just a few months after a draft GraphQL spec was released in mid-2015. Unsatisfied with existing graph languages, we decided to bet the future of our distributed graph database on GraphQL. Dgraph is now the only database to natively support a language very close to GraphQL. Considering how easy and intuitive it is for our users, it has been the best decision we made. So, we stand proud with the GraphQL Foundation to help build the next generation of apps on graphs.”  – Manish R. Jain, CEO, Dgraph Labs\n\n“Our goal at Gastby is to provide the best platform for building fast, compelling websites. We use GraphQL to provide a flexible data layer that can be used with different sources. We welcome the establishment of the GraphQL Specification Project and are very excited to be part of it.” — Mikhail Novikov, Software Developer, Gatsby Inc.\n\n“GraphZen strives to deliver a fantastic developer experience for C# developers building GraphQL APIs and to provide the support and training needed by enterprises to realize the benefits of GraphQL. GraphZen is excited to join the GraphQL Foundation and steward the GraphQL specification in a way that continues to drive innovation and adoption through open standards.” — Craig Smitham, Creator & Founder, GraphZen\n\n“The GraphQL technology and community is spearheading a much required shift in the API experience for the modern web, especially as applications are becoming more ‘frontend’ heavy. At Hasura, we’re extremely excited about the potential of GraphQL to evolve the way teams organize their codebases, and communicate with each other; especially in relation to the ongoing serverless movement. There could not be a better home for GraphQL projects and events than the GraphQL Foundation, and we are proud to do our bit to help make the technology and community around GraphQL sustainable and open.” — Tanmai Gopal, CEO, Hasura\n\n“IBM has continued to be an industry leader, helping clients keep pace with the rapidly evolving API technologies landscape. We are pleased to join the new GraphQL Foundation as a founding member to help drive greater open source innovation and adoption of this important data access language and runtime for APIs.” – Juan Carlos Soto, VP Hybrid Cloud Integration and API Economy, IBM\n\n“Intuit began using GraphQL shortly after it arrived in open source. We have developed a complex schema with over 600 core objects, 1,600 types and thousands of connections between objects. We’ve made major contributions to the open source GraphQL Java library. We look forward to participating in the GraphQL Foundation to advance its capabilities and more directly participate in the thriving community.” — Jeff Brewer, Vice President, Chief Architect, Small Business and Self-Employed Group, Intuit\n\n“Neo4j is pleased to support GraphQL, due to its unique ability to enable front-end developers, API developers and data architects to all work with the same graph-based data model. Our GraphQL integration and GRANDstack have already helped thousands of developers build graph applications with Neo4j, thanks to the huge developer productivity gain of GraphQL and the graph thinking mindset it brings for both developers and API consumers. The GraphQL Foundation is an important step to cement today’s most relevant standard for building APIs and we’re honored to join as founding members to help steward GraphQL as the ecosystem continues to evolve.” — Emil Eifrem, CEO and Co-Founder, Neo4j\n\n“We are grateful that Novvum has grown alongside GraphQL and its community over the past four years. We couldn’t be more excited about the future of GraphQL, and look forward to working with the Linux Foundation and GraphQL Foundation to improve the quality and experience of API development for engineers.” — Raj Singh, CEO and Co-Founder, Novvum\n\n“At Pipefy we are building the lean management platform. Since the beginning, GraphQL has enabled our developers to deliver new features and services more efficiently and with better communication from front-end and back-end teams. After we started using it internally, we decided to build our public API using GraphQL, a choice that enabled us to deliver a better developer experience to the developers who are building on top of our platform. We are excited to contribute to the GraphQL ecosystem and support the GraphQL Foundation.” — Raphael Costa, Head of Platform, Pipefy\n\n“Salsify provides a data platform that enables the world’s largest brands to deliver compelling product experiences across the retail ecosystem. Our GraphQL powered APIs enable us to support a diverse set of use cases with great developer ergonomics and excellent performance. We look forward to working with the GraphQL Foundation to support the continued evolution of GraphQL.” — Joel Turkel, Chief Software Architect, Salsify\n\n“[Solo.io](http://solo.io/)’s mission is to empower enterprise organizations rapidly adopt innovative technology and  extend their existing investments. GraphQL is a powerful way to help “glue” monolith, microservices, and serverless applications with a unified API. Our open-source project, Sqoop, leverages GraphQL and other innovative projects like Envoy to streamline the developer experience, and simply glue together environments without writing a single line of code. We are excited to join the GraphQL Foundation and look forward to working within the GraphQL community” — Idit Levine, CEO & Founder, Solo.io\n\n“GraphQL, and alongside its tooling, has grown to proof its worth and is  here to stay. Time for a power-up supported by many hands and brains through the Joint Development Foundation and Linux Foundation. GraphQL is the glue that keeps your domain data in context, understandable, and always ready to empower the next ideas. Looking forward to new and improved power’s, to evolution.” — Tim Govers, CEO, Thicit\n"}},{"node":{"frontmatter":{"title":"GraphQL Foundation Launches Interactive Landscape and Welcomes New Members from Open Source Summit Europe","date":"2019-10-28T00:00:00.000Z","permalink":"/blog/2019-10-28-graphql-foundation-launches-interactive-landscape-welcomes-new-members","byline":"GraphQL Foundation","guestBio":null,"sublinks":null,"layout":"blog","tags":["announcements"]},"id":"8dcf1dc8-1095-57c2-b499-4659184941b1","excerpt":"The GraphQL Foundation, a neutral home for the GraphQL community to accelerate development of the surrounding ecosystem, today announced…","rawMarkdownBody":"[The GraphQL Foundation](/), a neutral home for the GraphQL community to accelerate development of the surrounding ecosystem, today announced seven new members to support the Foundation's efforts, along with the launch of the [GraphQL Landscape](https://landscape.graphql.org).\n\nThe GraphQL Landscape is a dynamically generated tool designed to help explore the burgeoning GraphQL community of projects, adopters and member organizations. Currently, it is comprised of 100+ cards representing a market cap of more than $3.4T.\n\n\"When we first created GraphQL, we set out to make product development easier with APIs driven by the needs of mobile and app developers and dramatic simplifications of how APIs are built and maintained,\" said Lee Byron, Director of the GraphQL Foundation. \"I'm thrilled to see this influx of multi-industry support for GraphQL and a commitment to increase developer productivity, showcased throughout the impressive and growing landscape.\"\n\n\"I'm thrilled to help launch the GraphQL Foundation's first landscape, displaying GraphQL's vast range of projects, adopters and members,\" said Chris Aniszczyk, VP of Developer Relations and CTO of CNCF at the Linux Foundation. \"This interactive resource has been a labor of love from and for our community, and I look forward to watching it grow into the same standard for real-time ecosystem information that the CNCF Landscape has been for the cloud native space.\" \n\nGraphQL is a next­-generation API technology developed internally by Facebook in 2012 before being publicly [open sourced in 2015](https://code.fb.com/core-data/graphql-a-data-query-language/). Unlike REST-­based APIs, which take advantage of HTTP and existing protocols, GraphQL APIs provide developers with the flexibility to query the exact data they need from a diverse set of cloud data sources, with less code, greater performance and security, and a faster development cycle. Not only does this enable developers to rapidly build top­ quality apps, it also helps them achieve consistency and feature parity across multiple platforms such as web, iOS, Android, and embedded and IoT applications.\n\nBrian Warner of The Linux Foundation has joined the GraphQL Foundation as its Program Director, helping to support the growing community and the project's ongoing needs. \"I look forward to working with Lee and the governing board to establish the infrastructure and support needed to ensure the health and sustainability of the vibrant GraphQL community.\"\n\nGraphQL is being used in production by a [variety of high scale companies](https://graphql.org/users/) such as Airbnb, Atlassian, Audi, CNBC, GitHub, Major League Soccer, Netflix, Shopify, The New York Times, Twitter, Pinterest and Yelp. GraphQL also [powers hundreds of billions of API calls a day at Facebook](https://code.fb.com/core-data/graphql-a-data-query-language/). \n\n## Member Quotes \n\n\"Open source specifications rely on strong collaboration and proper stewardship. 8base loves GraphQL and we joined the GraphQL Foundation to be involved in the specification's future with other leading-edge technology companies. Our hope is that, with our involvement, the surrounding ecosystem continues to flourish at an accelerated pace.\" - *Albert Santalo, CEO & Founder, 8base*\n \n\"It's truly surreal to see GraphQL grow from its conception to spread throughout the entire technology industry. The Foundation provides the infrastructure to make this a true industry standard, backed by stable, trusted, company-neutral governance.\" - *Nick Schrock, Founder, Elementl*\n\n\"At Expedia Group, GraphQL is helping us build better experiences for our travelers. As a rapidly adopted technology in software development, we believe an open and community supported GraphQL specification and ecosystem is critical to its continued success.\" - *Trevor Livingston, Principal Architect, Expedia Group (VRBO)*\n\n\"At Fauna, we have seen first-hand the productivity and architectural benefits GraphQL offers developers. We believe that an open ecosystem and shared specification are a benefit to all. We're excited to contribute to the GraphQL community and collaborate on its continued innovation.\" - *Matt Freels, CTO, Fauna, Inc.*\n \n\"We are thrilled to be a part of the GraphQL Foundation. We see GraphQL as one of the most important emerging API technologies and strongly believe in its bright future! We're excited to continue investing in the GraphQL ecosystem and community with tools, events and educational content.\" - *Johannes Schickling, CEO, Prisma*\n \n\"We're deliberate about the technology we build and adopt. That's why we're excited to double-down on our investment in GraphQL as a foundational technology at Shopify. We believe GraphQL provides great tools for our internal teams and app developers to extend our platform and create faster merchant experiences.\" - *Jean-Michel Lemieux, CTO, Shopify*\n \n\"GraphQL plays a key part in helping us serve the public conversation on Twitter by enabling faster product iteration across our teams. As GraphQL is gaining tremendous adoption as one of the best protocols for remote retrieval of large object graphs, we are very excited to support the GraphQL Foundation.\" - *Anna Sulkina Engineering Director, Core Services Group, Twitter*\n\n## About the GraphQL Foundation\n\nThe GraphQL Foundation is an open, neutral organization that provides oversight of funding,  operations, and marketing resources for the GraphQL community to enable widespread adoption and help accelerate development of the broader ecosystem. The [GraphQL specification](https://github.com/graphql/graphql-spec), [GraphQL.js](https://github.com/graphql/graphql-js) reference implementation, [DataLoader](https://github.com/graphql/dataloader) library, and [GraphiQL](https://github.com/graphql/graphiql) developer tool are technical projects supported by the GraphQL Foundation. More details can be found at [https://foundation.graphql.org](/).\n\n## About The Linux Foundation\n\nThe Linux Foundation is the organization of choice for the world’s top developers and companies to build ecosystems that accelerate open technology development and industry adoption. Together with the worldwide open source community, it is solving the hardest technology problems by creating the largest shared technology investment in history. Founded in 2000, The Linux Foundation today provides tools, training and events to scale any open source project, which together deliver an economic impact not achievable by any one company. More information can be found at www.linuxfoundation.org.\n \n\\# \\# \\#\n\n*The Linux Foundation has registered trademarks and uses trademarks. For a list of trademarks of The Linux Foundation, please see our trademark usage page: [https://www.linuxfoundation.org/trademark-usage](https://www.linuxfoundation.org/trademark-usage). Linux is a registered trademark of Linus Torvalds.*\n\n"}},{"node":{"frontmatter":{"title":"Linux Foundation Training Announces a Free Online Course-Exploring GraphQL: A Query Language for APIs","date":"2019-10-31T00:00:00.000Z","permalink":"/blog/2019-10-31-linux-foundation-training-announces-free-online-course-exploring-graphql","byline":"GraphQL Foundation","guestBio":null,"sublinks":null,"layout":"blog","tags":["announcements"]},"id":"817e408e-4abd-5ac3-aed5-7def6058da7e","excerpt":"The Linux Foundation, the nonprofit organization enabling mass innovation through open source, today announced enrollment is now open for a…","rawMarkdownBody":"\n[The Linux Foundation](http://www.linuxfoundation.org/), the nonprofit organization enabling mass innovation through open source, today announced enrollment is now open for a new, free, course – [Exploring GraphQL: A Query Language for APIs](https://www.edx.org/course/introduction-to-graphql). This course is offered through [edX](https://www.edx.org/), the trusted platform for learning.\n\n[GraphQL](https://graphql.org) is revolutionizing the way developers are building APIs for web, mobile and even databases. But what exactly is GraphQL? GraphQL is an open source data query and manipulation language for APIs, and a runtime for fulfilling queries with existing data.\n\nThis course explains what GraphQL is and why it is getting so much attention from software engineers. It covers the advantages over REST, what types of software architectures to use it with, and why it benefits both frontend and backend developers. The student practices GraphQL queries in an interactive playground, and learns advanced topics such as how to implement a GraphQL server on the backend, how to use a GraphQL server with a client, and how to keep the GraphQL server secure. The course content was originally created by [Prisma](https://prisma.io), and updated and maintained by [Novvum](https://novvum.io).\n\n\"Since open sourcing GraphQL, I have been blown away by the growth of the technology and community. I'm excited to see the introduction of more educational material which I hope will help our community continue to grow and reach developers world-wide.\" – *Lee Byron, Executive Director, GraphQL Foundation, and GraphQL Co-Creator*\n\nThis course will help programmers gain the skills needed to use GraphQL for a small project or professionally in production. They will feel comfortable getting started with the right tools for their use case.\n\nFor the nontechnical person, this course will help them improve communication with developers and to participate in conversations about GraphQL. They will understand when and why to use GraphQL for a project.\n\n[Exploring GraphQL: A Query Language for APIs](https://www.edx.org/course/introduction-to-graphql) is available at no cost, with content access for up to 7 weeks. Learners may upgrade to the verified track for $99, which includes all graded assessments, unlimited access to the course content and the ability to earn a Verified Certificate upon passing the course.\n\n### About The Linux Foundation\n\nThe Linux Foundation is the organization of choice for the world’s top developers and companies to build ecosystems that accelerate open technology development and industry adoption. Together with the worldwide open source community, it is solving the hardest technology problems by creating the largest shared technology investment in history. Founded in 2000, The Linux Foundation today provides tools, training and events to scale any open source project, which together deliver an economic impact not achievable by any one company. More information can be found at [www.linuxfoundation.org](https://linuxfoundation.org).\n\nThe Linux Foundation has registered trademarks and uses trademarks. For a list of trademarks of The Linux Foundation, please see our trademark usage page: [https://www.linuxfoundation.org/trademark-usage](https://www.linuxfoundation.org/trademark-usage/).\n\nLinux is a registered trademark of Linus Torvalds.\n\n\\# \\# \\#\n\n### Media Contact:\n\nClyde Seepersad  \nThe Linux Foundation  \n404-964-6973  \ncseepersad@linuxfoundation.org  \n"}},{"node":{"frontmatter":{"title":"Announcing the 1st GraphQL Foundation Annual Report","date":"2020-04-02T00:00:00.000Z","permalink":"/blog/2020-04-02-announcing-the-first-graphql-foundation-annual-report","byline":"GraphQL Foundation","guestBio":null,"sublinks":null,"layout":"blog","tags":["announcements"]},"id":"282bd6a8-2659-5e4c-8a2e-e4d3a2f9a191","excerpt":"The GraphQL Foundation recently turned 1 year old and is happy to announce its first annual report! The annual report details the…","rawMarkdownBody":"\nThe GraphQL Foundation recently turned 1 year old and is happy to announce its [first annual report](/foundation/annual-reports/2019/)!\n\nThe annual report details the accomplishments of the organization in its first year, along with a forward looking statement for 2020 and beyond from Lee Byron, the GraphQL Foundation Executive Director:\n\n> As the Executive Director of the GraphQL project, I hope I can speak for the whole community when I say we are looking forward to another productive year of GraphQL development. We are putting the final touches on the GraphQL 2020 spec release, and continue to make great progress developing new features, stabilizing existing ones, and exploring beyond core GraphQL.\n>\n> It has been really encouraging to see GraphQL continue to evolve over the past year as a technology and as a community. GraphQL is being used at scale by not only Facebook but now a great number of organizations large and small. As I said when first introducing the project, GraphQL is unapologetically driven by the needs of the client. This has been a critical aspect of GraphQL's success and it is great to see this principle reflect itself in our community, where those more interested in consuming APIs than producing them have come together to support the ongoing sustainability of the project.\n>\n> Since establishing the GraphQL Foundation, we've had an outpouring of support from these companies. This neutral, non-profit home for the GraphQL project has provided a healthy way for users, contributors, and supporters to collaborate and contribute funding in support of our programs and collaborative processes. For example, this support has enabled us to support long-time contributor Ivan Goncharov to focus on crucial development and maintenance of the reference implementation, specification and other community gardening work. It has also allowed us to launch a [free GraphQL edX course](https://www.edx.org/course/exploring-graphql-a-query-language-for-apis), and has enabled us to take some first steps toward supporting and producing community events.\n>\n> Development of the GraphQL spec has remained open to all contributors. Over the last year we've brought more rigor and clarity to the development process. I've found it encouraging that contributions have been a healthy mix of aspirational new features and iterative improvements to the stable base. This demonstrates that GraphQL is evolving in meaningful ways to address exciting new use cases while also building confidence and stability around what thousands of companies use in production every day. Both of these are essential for GraphQL's long term success.\n>\n> Looking ahead, I have great optimism for GraphQL and see huge opportunities. First, we've been hard at work on the 2020 spec and that release is imminent. Spec development continues to accelerate and exciting advancements and improvements are underway for the 2021 release and beyond. Second, we have been accepted to participate in Google Summer of Code and are looking forward to adding these talented students as project collaborators. Third, the communities around the core GraphQL project are collaborating. For example, GraphiQL and Playground recently announced they will be joining efforts to build better tools for us all.\n>\n> Thank you again for your involvement in this project and your support of the GraphQL Foundation. I am pleased with our progress and am looking forward to another productive year.\n>\n> _– **Lee Byron**, Executive Director, GraphQL Foundation, and GraphQL Co-Creator_\n"}},{"node":{"frontmatter":{"title":"Web-based GraphQL IDEs for the win: How & Why Playground & GraphiQL are joining forces","date":"2020-04-03T00:00:00.000Z","permalink":"/blog/2020-04-03-web-based-graphql-ides-for-the-win","byline":"Rikki Schulte, Jason Kuhrt","guestBio":null,"sublinks":null,"layout":"blog","tags":["announcements"]},"id":"245fd8ba-d9d8-5c55-adb3-c74598bdd851","excerpt":"Banner showing the Prisma and GraphQL Foundation logos with a :handshake: emoji between them GraphiQL's beginnings The initial public commit…","rawMarkdownBody":"\n![Banner showing the Prisma and GraphQL Foundation logos with a :handshake: emoji between them](/img/news/playground-transition-banner.png)\n\n## GraphiQL's beginnings\n\nThe initial public commit to GraphiQL was in 2014.\n\nWhen [Lee Byron](https://github.com/leebyron), [Hyo Jeong](https://github.com/asiandrummer) and [Angel Gomez](https://github.com/AGS-) first published it, the intention was to create a minimal reference IDE development ecosystem for GraphQL. [Greg Hurrell](https://github.com/wincent) created the streaming `graphql-language-service-parser`, designed to empower the `codemirror-graphql` mode.\n\nThe goal was to give people the utility packages they needed to build their own web based or desktop IDE tool, and at its core, a relatively simple tool for folks to start learning and applying the language, and for exploring schemas. At the time, LSP was not yet a commonly accepted standard, and VSCode had yet to become the incredibly popular development tool it is today.\n\nLast year, these original engineers handed over to the graphql foundation three repositories: GraphiQL, `codemirror-graphql` and the `graphql-language-service` packages.\n\nFast forward to now, and GraphiQL is now used by GraphQL implementations in dozens of languages, as well as hundreds of frameworks and runtimes. It's used for everything from HTTP operations, to querying local schemas, data science tools, and even for data transmission for IOT platforms. You'll find it in the AWS dashboard, GitHub developer tools, and many more places we are honored to see this library used.\n\n## Enter Playground\n\nAlongside GraphiQL, many of us are familiar with its sibling - the handsome & feature-full [GraphQL Playground](https://github.com/prisma-labs/graphql-playground). Following GraphiQL's lead, it uses our `codemirror-graphql` ([Insomnia](https://insomnia.rest/graphql/), [Altair](https://altair.sirmuel.design/) and many others are also in this club!). This is why there are so many similarities between the direct editing experience of these tools.\n\nPlayground is _exactly_ what we wanted to happen. It helped drive the development of our language ecosystem, and gave users an easier option than the more customization-oriented GraphiQL. It provided a ton of excellent features - `graphql-config` support, multiple tabs, i18n, and http server middlewares.\n\n## Prisma Donates Playground to GraphQL Foundation\n\nAs many have successfully guessed, **Prisma _is_ donating Playground to the GraphQL Foundation.** Entering 2019 Prisma envisioned an eventual Playground 2.0 but then the advent of a modular GraphiQL 2 project showed an opportunity for great synergy, made all the more natural by Prisma's pivot toward modular database tooling for developers.\n\nPlayground 1.x has been a community effort of [dozens of contributors](https://github.com/prisma-labs/graphql-playground/graphs/contributors). Prisma thanks all contributors who helped out along the way. Prisma remains deeply committed to supporting the future of the GraphQL language. For example the [Prisma Labs team](https://github.com/prisma-labs) continues to focus on GraphQL API layer and [recently announced](https://github.com/prisma-labs/nexus/issues/373) the transition of [Nexus](https://nexus.js.org/) from a schema building library into a full [fledged GraphQL API framework](https://www.nexusjs.org).\n\n## The Playground Features you love\n\nIn the interest of parity, we will keep a lot of the same features, whether by introducing them to the core or proving plugins that will ship with the playground preset.\n\n- multiple tabs (GraphiQL Core)\n- headers tab per operation tab (plugin)\n- tracing tab (plugin)\n- playground doc explorer (plugin)\n- internationalization (GraphiQL Core)\n- `graphql-config` support, with new features thanks to our fantastic colleagues at the [Guild Dev](https://github.com/orgs/the-guild-org/people), who Prisma has entrusted with many other projects.\n- easy to use middlewares\n\n## New Features\n\nThese new features will come with the new `graphql@2.0.0`:\n\n- vscode style command palette (via `monaco-editor`)\n- jump to fragment or other type definitions\n- generate a collection of operations from your project's source files\n- more customizable network options - default headers per project, as well as headers per-operation\n- helpers for integrating custom authentication flows\n- extensive theme, layout, and component customization abilities (you can start with the playground theme preset and work from there!)\n- custom tabs and panels\n- a first-class `graphiql-explorer` plugin in partnership with the original creators, our colleagues at [OneGraph](https://www.onegraph.com/)\n\n## How will it be re-implemented?\n\nPlayground 2.0 will be a GraphiQL preset that includes the custom theme as well as the custom playground doc explorer plugin (as an alternative to the new doc explorer proposed by @orta and other users), HTTP headers and tracing tab plugins. You can find more technical detail, ongoing discussion and things to work on the [GraphiQL Plugin API Meta Issue](https://github.com/graphql/graphiql/issues/983) or in [other playground related discussion issues](https://github.com/graphql/graphiql/issues?q=label%3Agraphql-playground-preset) in the GraphiQL monorepo.\n\nWhile the Playground team's baseline goal will be relative parity with Playground 1.0, the team will be accepting proposals for new features and plugins that build on the existing GraphQL Playground experience. The [Features Roundup](https://github.com/graphql/graphiql/projects/10) project is a great place to see what we have planned already for plugins that Playground's preset can use, or you can also create a proposal if you don't see what you're looking for.\n\n## `graphql-playground` repository next steps\n\nThe existing `graphql-playground` repository will get one or two more maintenance/bugfix releases before it will be archived. You can still fork it of course. You can learn more about this in [the graphql-playground issue](https://github.com/prisma-labs/graphql-playground/issues/1143) we created for this migration.\n\n## Call for Contributors\n\nWe're also looking for contributors to form a team to develop, support and maintain a playground preset. The goal would be for them to help iterate on and stabilize the plugin API effort, as well as work towards the effort of contributing to and maintaining the playground preset and its associated plugins. If you are interested leave comment in the [Call for Contributors Github issue](https://github.com/graphql/graphiql/issues/1443).\n\nYou can also follow the [Plugin API Proposal discussion issue](https://github.com/graphql/graphiql/issues/983) for updates, and get involved in our [discord channel](https://discord.gg/EXUYPaY) we've created just for the playground initiative.\n"}},{"node":{"frontmatter":{"title":"GraphQL joins Google Season of Docs","date":"2020-06-13T00:00:00.000Z","permalink":"/blog/2020-06-13-graphql-joins-google-season-of-docs","byline":"Obinna Ekwuno","guestBio":null,"sublinks":null,"layout":"blog","tags":["announcements"]},"id":"612cbbf6-f4cc-5e95-8e75-0b317b5e43ab","excerpt":"GraphQL joins Google Season of Docs. Open source communities are one of the best ways to collaborate with a larger scale of developers, it…","rawMarkdownBody":"\n# **GraphQL joins Google Season of Docs.** \n\nOpen source communities are one of the best ways to collaborate with a larger scale of developers, it incorporates the best part of learning, mentorship, and collaboration on a large scale. \n**Open-source** software has been proven to create large effective ecosystems of users that improve quality. It has been known for many years that the more a piece of software is used, the quicker bugs **will** be identified. In the **open-source** community when a bug is found, users contribute fixes.\n**GraphQL** is an **open**-**source** data query and manipulation language for APIs, and a runtime for fulfilling queries with existing data. **GraphQL** was developed internally by Facebook in 2012 before being publicly released in 2015. \n\n\n\n# **What is Google Season of Docs?** \n\nThe Google Season of Docs is the intersection of technical writing, open-source contribution, and mentorship. In this three month program, you will be working closely with maintainers of open source projects to improve on existing documentation and processes to better the community. \n\nFor technical writers who are new to open source, the program provides an opportunity to gain experience in contributing to open source projects. \n\nFor technical writers who're already working in open source, the program provides a potentially new way of working together. Season of Docs also gives open source projects an opportunity to engage more of the technical writing community.\n\n\n\n## **How can I be a part of this?** \n\nOpen source organizations apply to be mentor organizations in the Season of Docs which includes a list of documentation project ideas with their applications. Technical writers can look through the list of proposals here are the [project ideas for the GraphQL organization](https://github.com/graphql/foundation/tree/master/mentorship/2020/gsod). \nWhen you have selected a project you would like to work on, write up a project proposal and submit it to [Season of Docs](https://developers.google.com/season-of-docs). You may continue to refine your proposals until July 9th. If you need clarifications, please contact Ivan Goncharov and Uri Goldshtein by sending a message to [mentorship@lists.foundation.graphql.org](mailto:mentorship@lists.foundation.graphql.org).\n\nThe GraphQL organization will reach out to you after they have evaluated the proposals. The accepted technical writers spend a few months working with mentors from the open-source organizations to complete their projects. At the end of the program, the Google program administrators announce the projects that finished successfully.\nCheck out the [official technical writer guide.](https://developers.google.com/season-of-docs/docs/tech-writer-guide) \n\n\n\n## **How long is this program?**\n\nThe technical writing applications started on June 9th, 2020 and will last till July 9th, 2020. The selection process for the proposals submitted to organizations lasts till July 31st, 2020. Then Doc development officially begins September 14th, 2020, and ends December 5th, 2020. For a more detailed timeline check out the [official season of docs timeline](https://developers.google.com/season-of-docs/docs/timeline).\n\n_– **Obinna Ekwuno**, Software Engineer, DevRel GatsbyJS_\n"}},{"node":{"frontmatter":{"title":"Google Summer of Code 2020 Participant: Naman","date":"2020-06-30T00:00:00.000Z","permalink":"/blog/2020-06-30-gsoc-2020-participant-naman","byline":"Naman Kumar","guestBio":null,"sublinks":null,"layout":"blog","tags":["announcements"]},"id":"1e087a47-70ea-5872-9994-899bc367a71d","excerpt":"GSOC 2020 Naman Kumar is a Computer Science & Engineering student from New Delhi, India and a FullStack Engineer at ProductHunt. He is…","rawMarkdownBody":"![GSOC 2020](/img/logos/gsoc.svg)\n> [Naman Kumar](https://naman.sh) is a Computer Science & Engineering student from New Delhi, India and a FullStack Engineer at [ProductHunt](https://producthunt.com). He is selected for Google Summer of Code 2020 - GraphQL Foundation under the mentorship of [Ivan Goncharov](https://github.com/IvanGoncharov). In this post he will share his plans on how he is going to spend his summer contributing to the Graphql Foundation.\n\nHi, GraphQL is a technology I use everyday at my work place and other projects building platforms with 200 to 2 million users. I am surely in love with it, acknowledging how much it improves the development speed and removes the overhead of documentation for starters.\n\nI have huge respect for Open Source organisations and really inspired by the work the whole graphql community is doing to make lives of developers easier. I have always wanted to participating in GSOC, which I assure you is a dream of every student.\n\nI got to know about the acceptance of Graphql Foundation under GSOC from Ivan’s [talk](https://www.youtube.com/watch?v=PsXxL1oJLrc&list=PLTRTpHrUcSB9jtvOwnq1yVwZl5k2DdBb2&index=24&t=0s) at GraphQL Asia Submit 2020. I was really excited about having a chance to contribute to the tools which are used not only by me but are powering applications used by billions of people on the planet.\n\nHaving a keen interest in compiler design, the project idea of working on the [graphql.js](https://github.com/graphql/graphql-js/) reference parser looked really interesting to me. Fortunately being selected for the program, I am going to spend the summer of 2020 working on Graphql.js reference parser and [GraphiQL parser](https://github.com/graphql/graphiql/tree/main/packages/graphql-language-service-parser), to merge the two together. Graphql.js reference parser do not have streaming support or the best error recovery setup. The goal is to take inspiration from the GraphiQL parser and implement the streaming support in the reference parser so that it can be used by IDEs and other development tools.\n\nI spent the community bonding period getting to know both the people in the graphql community and getting myself familiar with the projects. I explored the code base and solved few minor bugs with the help of Ivan. The graphql.js reference parser which is well maintained has a really good code quality and readability which helped me gain it's understanding really quickly, on the other hand the GraphiQL parser with just 1000 lines of pure “old is gold” code base, implemented 3 years ago, looks difficult to grasp at first but with proper understanding is a very simple and cute state machine.\n\nIvan and I also spent the time ideating about dividing the whole project into 3 milestones and breaking those into smaller goals. As the graphiql parser is not actively maintained and has zero test coverage it was really important to have the parser fully covered before we make any changes. Our goal was to enable the graphql.js parser be able to used by the IDEs and performance is a major factor we need to care about for that. Considering it, we also decided to do benchmarking of the GraphiQL parser. Ergo the first milestones includes reaching 100% test coverage for the GraphiQL parser and thorough benchmarking.\n\nThe next steps will be to use the graphql.js reference parser’s lexer in the GraphiQL parser and construct a plan to merge the parsers. Once the graphql.js parser reaches the capabilities as that of the GraphiQL parser, we can migrate the GraphiQL IDE to use graphql.js parser. Near to the completion of the first milestone I am really happy with the new thing I have learned under the mentorship of Ivan and really excited to work on the upcoming tasks.\n\n> – **Naman Kumar**, GSOC 2020, Graphql Foundation\n"}},{"node":{"frontmatter":{"title":"GraphQL Foundation Monthly Newsletter August 2020","date":"2020-09-11T00:00:00.000Z","permalink":"/blog/2020-09-11-graphql-foundation-monthly-newsletter-august-2020","byline":"GraphQL Foundation","guestBio":null,"sublinks":null,"layout":"blog","tags":["newsletter"]},"id":"0e6c7481-10b1-59da-8ad1-9101e6456756","excerpt":"GraphQL has redefined how developers work with APIs and client-server interactions. And as the community works hard to foster the growth and…","rawMarkdownBody":"\n[GraphQL](https://graphql.org) has redefined how developers work with APIs and client-server interactions. And as the community works hard to foster the growth and adoption of GraphQL, we are excited to share the work of the community and discussions via a new monthly GraphQL Foundation newsletter.\n\nAll work on GraphQL and related projects, both big and small, is important to the growth and maturity of the project, which has already seen adoption from many of the world’s largest internet-scale companies.\n\nMany of these items are just in beginning discussions while some are further along. The goal of this monthly post is to summarize and share what’s top of mind for the community and help others get involved. These are only initial discussion topics. For notes on the full discussion during the monthly WG calls please refer to these [call notes](https://docs.google.com/document/d/1_jvxzCkI6VWo2KEobisoiW1n_irJ4dp0aD8Pq9UXuvw/edit#)\n\n## Updates\n\n### [GraphQL over WebSocket refresh, existing issues and security implications](https://github.com/enisdenjo/graphql-transport-ws/blob/master/PROTOCOL.md)\nThis discussion topic proposes  taking on the following two critical items of security and bypassing the onConnect event. And possibly re-writing the WebSocket protocol from scratch with full RFCs\n\n\n### [Tagged Type RFC](https://github.com/graphql/graphql-spec/pull/733)\nThis is an RFC for a new \"Tagged\" type to be added to GraphQL, to help address the input polymorphism feature gap. Originally proposed as the @oneField directive, the Tagged type has evolved into an entire new type in the type system, and is currently the lead proposal from the Input Unions Working Group.\n\nA Tagged type defines a list of named member fields each with an associated type (like the fields in Object and Input Object types); but with the stipulation that exactly one of these fields must be present (no more, no less). Depending on the types of the member fields, a Tagged type could be appropriate for input, output, or both, which is proving to be quite controversial; it's possible that the tagged type might be scoped to input only before release. The Tagged type was most recently introduced to the GraphQL Working Group in August and is undergoing feedback and revision before an expected update with the working group in October or November.\n\nIf you have use-cases for input polymorphism, please take a look - feedback is very welcome.\n\n### [Standardize naming for Field coordinates](https://github.com/graphql/graphql-spec/issues/735)\n\nThis PR proposes the following 2 RFCs\n1. Formalizing the naming and definition of field coordinates (as discussed in [#735](https://github.com/graphql/graphql-spec/issues/735))\n2. Formalizing the way in which a Field Node (and list thereof) contained within a query document can be serialized as field coordinates\n\n\n### [Adding generics to DocumentNode and Source to allow TypeScript type inference](https://github.com/graphql/graphql-js/issues/2727)\n\n[@dotansimha](https://github.com/dotansimha) from [The Guild](https://the-guild.dev) had recently implemented an improved version of DocumentNode, called TypedDocumentNode, that allows type generics for result type and variable type and contributed it to graphql-js.\n\nThis improved version allows TypeScript to infer the types automatically when an object that matches the signature is used.\n\nYou can learn more by reading about it on his [blog post](https://the-guild.dev/blog/typed-document-node).\n\n## In Other News\n\n*   We recently welcomed the newest member of the GraphQL Foundation - [The Guild](https://the-guild.dev). [Here](https://foundation.graphql.org/members/) you can find the list of all current members of the foundation.\n*   [@hereisnaman](https://github.com/hereisnaman) successfully finished his Google Summer of Code (GSoC) project and is in the process of merging his[PR](https://github.com/graphql/graphql-js/pull/2770). Learn more about it [here](https://foundation.graphql.org/news/2020/06/30/google-summer-of-code-2020-participant-naman/). \n*   GraphQL was accepted to the Google Season of Docs (GSoD) and [@carolstran](https://github.com/carolstran) will be working on the [FAQ section](https://developers.google.com/season-of-docs/docs/participants/project-graphql-carolstran) of graphql.org \n*   [GraphQL over HTTP](https://github.com/graphql/graphql-over-http) was moved and is now under GraphQL Foundation\n*   [@lilianammmatos](https://github.com/lilianammmatos) and [@robrichard have](https://github.com/robrichard) made big progress on `@deferer & @stream`. Yo can learn more by watching their talk about it at the [GraphQL Summit](https://www.youtube.com/watch?v=icv_Pq06aOY): \n*   [@andimarek](https://github.com/andimarek) and [@eapache](https://github.com/eapache) started the [GraphQL Scalars](https://github.com/graphql/graphql-scalars/issues) initiative. You can also learn more by watching their talk about it at the [GraphQL Summit](https://www.youtube.com/watch?v=SRGTaYL3h9c). \n*   All WG recordings were published on [Youtube](https://www.youtube.com/channel/UCERcwLeheOXp_u61jEXxHMA).\n\n## Get Involved!\n\nDevelopers can get involved in the community and contribute to the project at [https://github.com/graphql](https://github.com/graphql).\n\nOrganizations interested in becoming members of the GraphQL Foundation or the GraphQL Specification can learn more on our [member page](/foundation/join). If you have questions about membership, please send an email to [membership@graphql.org](mailto:membership@graphql.org).\n"}},{"node":{"frontmatter":{"title":"Google Season of Docs 2020 Participant: Carolyn Stransky","date":"2020-09-21T00:00:00.000Z","permalink":"/blog/2020-09-21-gsod-carolyn-stransky","byline":"Carolyn Stransky","guestBio":null,"sublinks":null,"layout":"blog","tags":["announcements"]},"id":"106f781d-cc34-5d8a-8a43-f4ae254dd642","excerpt":"Carolyn Stransky is a frontend developer and journalist based in Berlin, Germany. She is selected for Google Season of Docs 2020 - GraphQL…","rawMarkdownBody":"\n> [Carolyn Stransky](https://workwithcarolyn.com/) is a frontend developer and journalist based in Berlin, Germany. She is selected for [Google Season of Docs 2020](https://developers.google.com/season-of-docs) - GraphQL Foundation under the mentorship of [Ivan Goncharov](https://github.com/IvanGoncharov). In this post, she will share her plans on how she is going to spend the next couple of months contributing to the GraphQL Foundation. \n\nWhen I first heard about GraphQL three years ago, I thought that it was a programming language that constructed charts or plotted points on graphs. After building my first application with GraphQL, I would have categorized it as React-specific tooling, like Redux or React Router. Months later, I was still convinced it was just another Twitter-fueled programming trend.\n\nLooking back now, it’s clear that my initial perceptions of GraphQL were incorrect… but they weren’t uncommon.\n\nLearning a new technology comes with a lot of questions - and GraphQL is no exception. There are so many misconceptions about what GraphQL is and how it can be used. And I wasn’t the only GraphQL newbie holding on to those same, inaccurate beliefs. \n\nAfter gaining a solid understanding of what GraphQL _really_ is, I started giving presentations at conferences about how difficult I found the learning process (literally the talk title was [Life is hard and so is learning GraphQL](https://workwithcarolyn.com/speaking/life-is-hard-and-so-is-learning-graphql)). This talk was cathartic, both for me and the audiences I was presenting to. Through my research, I also realized that while [graphql.org](https://graphql.org/) thoroughly covers the core concepts, it doesn’t directly address some of the questions you face as a new learner. \n\nFortunately, GraphQL has evolved enough that the information is out there and available. It’s more a matter of finding it because that information is scattered throughout various resources and programming communities. That’s why I was excited to see a [Frequently Asked Questions](https://github.com/graphql/faq) (FAQ) page as one of the proposed Season of Docs projects. And as someone who has openly critiqued the GraphQL documentation, I wanted to play a part in actively improving them. \n\nThere are two main goals behind this FAQ page:\n\n1. **Build a centralized resource for everyone**. As of now, much of the GraphQL ecosystem is focused on JavaScript due to the early ties with Relay and React. But GraphQL is for everyone, regardless of programming language, so this resource should be too. To ensure this, the FAQ content will be framework agnostic and vendor-neutral. \n2. **Become a truly community-owned resource**. GraphQL was initially passed down from Facebook, but it’s no longer maintained solely by Facebook. This should be a resource that everyone is welcome to contribute to and the community feels empowered to change and grow. That way, common questions won’t be left unanswered.\n\nThe plan for exactly how to tackle this page will morph and evolve throughout the next two and a half months. My hope, though, is that keeping these goals in mind will lead to a new resource that will help both newcomers and seasoned GraphQL users thrive. \n\nIn preparation for the documentation development part of Season of Docs, I became familiar with [the repository behind graphql.org](http://graphql.org) by triaging issues and reviewing open pull requests. I also helped with the [ongoing migration to Gatsby](https://github.com/graphql/graphql.github.io/issues/875) because I’ll be building the new FAQ page in Gatsby (there are still [open issues](https://github.com/graphql/graphql.github.io/pull/913#issuecomment-687325610) if you want to contribute). You can read more details about the community bonding phase [on my blog](https://workwithcarolyn.com/blog/community-bonding-gsod). \n\nThe next step is to create the inaugural batch of FAQ content. This will be about 10-15 questions sourced from various areas of the Internet and in consultation with prominent GraphQL teachers. Once those are complete with thorough answers and built into the new Gatsby site, I’ll get feedback from the community (that’s you) and continue to iterate on the content, design, layout - everything!\n\nIf you have opinions or would like to follow the project’s progress, [open an issue](https://github.com/graphql/graphql.github.io/issues/new) or [lurk around the website repository](https://github.com/graphql/graphql.github.io/).\n\n> – **Carolyn Stransky**, GSoD 2020, Graphql Foundation\n"}},{"node":{"frontmatter":{"title":"GraphQL Foundation Monthly Newsletter September 2020","date":"2020-10-15T00:00:00.000Z","permalink":"/blog/2020-10-15-graphql-foundation-monthly-newsletter-september-2020","byline":"GraphQL Foundation","guestBio":null,"sublinks":null,"layout":"blog","tags":["newsletter"]},"id":"2331558b-dab1-5e92-b30e-b7cdb529d7d4","excerpt":"GraphQL has redefined how developers work with APIs and client-server interactions. And as the community works hard to foster the growth and…","rawMarkdownBody":"\n[GraphQL](https://graphql.org/) has redefined how developers work with APIs and client-server interactions. And as the community works hard to foster the growth and adoption of GraphQL, we are excited to share the work of the community and discussions via a new monthly GraphQL Foundation newsletter.\n\nAll work on GraphQL and related projects, both big and small, is important to the growth and maturity of the project, which has already seen adoption from many of the world’s largest internet-scale companies.\n\nMany of these items are just in beginning discussions while some are further along. The goal of this monthly post is to summarize and share what’s top of mind for the community and help others get involved. These are only initial discussion topics. For notes on the full discussion during the monthly WG calls please refer to these [call notes](https://github.com/graphql/graphql-wg/blob/b1bfe0cee461d752146dc77e5c35a5e8d7921272/notes/2020-09-03.md#allowing-deprecation-of-inputs-10m-evan).\n\n## WG Updates:\n\n### Allowing deprecation of inputs\n\nDiscussed whether the spec should allow deprecating an input that is required. Two concerns: deprecations are intended to be actionable; introspection does not include deprecated things by default - could break tooling that's no longer receiving deprecated inputs as part of their introspection results.\n* Regarding case 1: not much of a blocker; the action from deprecation doesn't need to come from a schema (e.g. it could be switch to a new version/endpoint)\n* Regarding case 2: much more of an issue because we could be breaking clients. My suggestion is to return required arguments even if they're deprecated - introspection should always give you what's necessary even if you say you don't want it.\n\n### @defer/@stream\n\ntrying to answer the “why we don’t support Defer on field question”. The reasoning for that is the original Apollo implementation was only on fields. We ran into problems in that it’s difficult to coordinate\n\n### Querying Query query queries: \"query\" ambiguity\n\nThe issue was first raised around the ambiguity of the term \"query\" as used in the GraphQL spec and ecosystem back in April. In just this title, we've referred to requesting, the Query type, a query operation, and a nested selection set; but that's just some of the ways we use this term, which can make it really hard for people new to GraphQL to get up to speed. Benjie has analyzed the use of the term, and has proposed a consistent set of terminology to use based on other terms used in the GraphQL spec already, this was discussed at the most recent Working Group. See [Spec PR #777](https://github.com/graphql/graphql-spec/pull/777).\n\n### Other topics discussed:\n\n* [TypeScript Migration Progress in graphql-js](https://github.com/graphql/graphql-js/issues/2104)\n* [How to bootstrap graphql-js working group?](https://github.com/graphql/graphql-js/issues/2787)\n* GitHub infrastructure for managing Working groups\n* Custom Scalars subproject\n\n## Ecosystem Updates:\n\nVscode-graphql, which uses the official GraphQL Language Server, has now become the official reference vscode extension! Like GraphiQL, we will work to ensure all new spec language features are introduced here. After making the announcement we gained 30,000 new users! [This blog post](https://rikki.dev/vscode-graphql-lsp-0-3-0/) will tell you more about all the new features.\n\n## In Other News...\n\n* Dgraph Labs launched [Slash GraphQL](https://www.producthunt.com/posts/slash-graphql), a product that can help you get a working GraphQL backend in minutes\n* A new library for the WebSocket Protocol has been created. Read more [here](https://the-guild.dev/blog/graphql-over-websockets).\n* The Guild has created a new [GraphQL-ESLint library](https://github.com/dotansimha/graphql-eslint) for linting your GraphQL schemas and operations with community and custom rules. Read more [here](https://the-guild.dev/blog/introducing-graphql-eslint).\n* GraphQL CLI 4.1 has been released. [Read here](https://the-guild.dev/blog/whats-new-in-graphql-cli-4.1.0) about the new functionality.\n* You can now consume WebHooks as GraphQL Subscriptions thanks to the new version of [GraphQL Mesh](https://github.com/urigo/graphql-mesh). Read more [here](https://the-guild.dev/blog/graphql-mesh-subscriptions).\n* Hasura’s [Enterprise GraphQL Conf](https://hasura.io/enterprisegraphql/) is taking place October 20-22. There is still time to register\n* AWS released a new webinar “[Build Modern Serverless Applications with GraphQL APIs and AWS AppSync](https://pages.awscloud.com/Build-Modern-Serverless-Applications-with-GraphQL-APIs-and-AWS-AppSync_2020_0918-MBL_OD.html?&trk=ep_card-el_a131L0000084iG3QAI&trkCampaign=NA-FY20-AWS-DIGMKT-WEBINAR-SERIES-September_2020_0918-MBL&sc_channel=el&sc_campaign=pac_2018-2019_exlinks_ondemand_OTT_evergreen&sc_outcome=Product_Adoption_Campaigns&sc_geo=NAMER&sc_country=mult)”\n* Catch up on recent talks from the [GraphQL Berlin](https://www.youtube.com/watch?v=4UDsR4z2KIY) Meetup\n* [GraphQL Amsterdam](https://www.meetup.com/Amsterdam-GraphQL-Meetup/events/273901137/), [GraphQL Copenhagen](https://www.meetup.com/Copenhagen-GraphQL-Meetup-Group/events/273901144/), React GraphQL Academy and The Guild are collaborating on an online GraphQL Meetup. Check out the details [here](https://twitter.com/reactgqlacademy/status/1313789927834947585?s=20).\n* Apollo created an [Error Handling Visualizer](https://apollo-visualizer.vercel.app/) tool, which provides an interactive playground to visualize the relationship between nullability and error handling in GraphQL, specifically with Apollo Client.\n\n## Get Involved!\n\nDevelopers can get involved in the community and contribute to the project at [https://github.com/graphql](https://github.com/graphql).\n\nOrganizations interested in becoming members of the GraphQL Foundation or the GraphQL Specification can learn more on our [member page](/foundation/join). If you have questions about membership, please send an email to [membership@graphql.org](mailto:membership@graphql.org).\n"}},{"node":{"frontmatter":{"title":"GraphQL Foundation Monthly Newsletter October 2020","date":"2020-11-12T00:00:00.000Z","permalink":"/blog/2020-11-12-graphql-foundation-monthly-newsletter-october-2020","byline":"GraphQL Foundation","guestBio":null,"sublinks":null,"layout":"blog","tags":["newsletter"]},"id":"1f3f8f4f-4988-5e7a-aeda-f0d35fe78281","excerpt":"GraphQL has redefined how developers work with APIs and client-server interactions. And as the community works hard to foster the growth and…","rawMarkdownBody":"\n[GraphQL](https://graphql.org/) has redefined how developers work with APIs and client-server interactions. And as the community works hard to foster the growth and adoption of GraphQL, we are excited to share the work of the community and discussions via the monthly GraphQL Foundation newsletter.\n\n## WG Updates\n\nThe [GraphQL Working Group](https://github.com/graphql/graphql-wg) meets monthly, and records [detailed minutes](https://github.com/graphql/graphql-wg/blob/master/notes/2020-10-01.md). You can also listen to the replays of GraphQL technical meetings on [YouTube](https://youtube.graphql.org).\n\n### [Query ambiguity: discussion of replacement terms](https://github.com/graphql/graphql-spec/issues/715)\n\nIn the GraphQL ecosystem the term \"query\" can seem overloaded and ambiguous - sometimes it refers to the query operation type or a query operation, sometimes it refers to a GraphQL request or a GraphQL document containing operations, sometimes it refers to the contents of selection sets (as in \"query reuse\"), and sometimes it is used as a verb to refer to the generic act of querying a server for information.\n\nThe WG discussed the best way to remove this ambiguity and how to move forward.\n\n### [Schema Coordinates RFC check in](https://github.com/graphql/graphql-spec/pull/746)\n\nThe RFC is filed, and the next action is to turn this into an actual spec edit.\n\n### [Tagged type update](https://github.com/graphql/graphql-spec/pull/733) \n\nThis is an RFC for a new \"Tagged type\" to be added to GraphQL. It replaces the [\"@oneField directive\"](https://github.com/graphql/graphql-spec/pull/586) proposal following feedback from the Input Unions Working Group. Please note that \"Tagged type\" is the working name, and may change if we come up with a better name for it.\n\nA Tagged type defines a list of named members each with an associated type (like the fields in Object types and Input Object types), but differs from Object types and Input Object types in that exactly one of those members must be present.\n\nThe aim of the Tagged type is to introduce a form of polymorphism in GraphQL that can be symmetric between input and output. In output, it can generally be used as an alternative to Union (the differences will be outlined below). It goes beyond interfaces and unions in that it allows the same type to be specified more than once, which is particularly useful to represent filters such as this pseudocode `{greaterThan: Int} | {lessThan: Int}`.\n\n## In Other News...\n\n*   [Vox Media evaluates Apollo GraphQL Federation and The Guild Schema Stitching](https://product.voxmedia.com/2020/11/2/21494865/to-federate-or-stitch-a-graphql-gateway-revisited) for the best GraphQL platform to manage “a chorus of applications working together to publish modern media”\n*   AWS released a “[Decision Guide to GraphQL Implementation](https://aws.amazon.com/graphql/guide/)”\n*   [Netflix discusses](https://netflixtechblog.com/how-netflix-scales-its-api-with-graphql-federation-part-1-ae3557c187e2) how it scales its API with [Apollo GraphQL](https://www.apollographql.com/) Federation via its next generation architecture, “Studio Edge”, which uses federation as a critical element.\n*   [Building a GraphQL server with GraphQL Helix](https://dev.to/danielrearden/building-a-graphql-server-with-graphql-helix-2k44), a newly released library for building GraphQL APIs. The aim of GraphQL Helix is to allow developers to use new features that are not yet supported in other libraries and to prevent vendor lock-in. \n*   [GraphQL Tools v7 was released to deliver the next generation GraphQL API Gateway](https://the-guild.dev/blog/graphql-tools-v7), bringing a new way to federate multiple GraphQL servers, focusing on standard spec compliant GraphQ\n*   We’ve already announced that The Guild has recently joined the GraphQL Foundation and now [they wrote a blog post about it](https://the-guild.dev/blog/joining-graphql-foundation). Who will be the next to join?\n\n## Upcoming Events:\n\n*   **Nov 17**: [GraphQL Contributor Days](https://www.graphql-meetup.com/#/graphql-contributor-days-november-2020), in partnership with [Hasura](https://hasura.io/), will give important updates to the community, and provide a forum for anyone using GraphQL to have direct access to core contributors and authors of various libraries and frameworks through live chat and an online broadcast.\n*   **Dec 2**: [Relay Meetup](https://relaymeetup.com/) is a global, online meetup on Relay, the GraphQL client. This event will feature a conversation about the @defer and @stream directives and why it should be brought to the official GraphQL specification. \n*   **Dec 7-8**: [GraphQL Galaxy Conference](https://graphqlgalaxy.com) is a new remote conference focusing on all things[ GraphQL](https://twitter.com/search?q=%23GraphQL&src=hashtag_click). \n*   Missed Apollo Day on Nov. 10th? Check out some of the great talks on [Twitch](https://www.twitch.tv/apollographql).\n\n## Get Involved!\n\nDevelopers can get involved in the community and contribute to the project at [https://github.com/graphql](https://github.com/graphql).\n\nOrganizations interested in becoming members of the GraphQL Foundation or the GraphQL Specification can learn more on our [member page](/foundation/join). If you have questions about membership, please send an email to [membership@graphql.org](mailto:membership@graphql.org).\n\n"}},{"node":{"frontmatter":{"title":"Improving Latency with @defer and @stream Directives","date":"2020-12-08T00:00:00.000Z","permalink":"/blog/2020-12-08-improving-latency-with-defer-and-stream-directives","byline":"Rob Richard, Liliana Matos","guestBio":null,"sublinks":null,"layout":"blog","tags":["announcements"]},"id":"344e7874-fe7f-5825-ad86-afd237edb638","excerpt":"Rob Richard and Liliana Matos are front-end engineers at 1stDibs.com. They have been working with the GraphQL Working Group as champions of…","rawMarkdownBody":"\n> Rob Richard and Liliana Matos are front-end engineers at [1stDibs.com](https://www.1stdibs.com). They have been working with the GraphQL Working Group as champions of the the `@defer` and `@stream` directives.\n\nThe `@defer` and `@stream` directives have been a much anticipated set of features ever since Lee Byron first talked about it at [GraphQL Europe 2016](https://youtu.be/ViXL0YQnioU?t=769). For most of 2020, we have been working with the GraphQL Working Group to standardize this feature. It is now a Stage 2 proposal, but to advance further, we are looking to the GraphQL community to try using these directives and provide feedback. We have released experimental versions of `GraphQL.js` and `express-graphql`. They are published to npm under `graphql@experimental-stream-defer` and `express-graphql@experimental-stream-defer`. We encourage everyone interested in this feature to try out these releases and let us know how it goes in the [issue created for feedback](https://github.com/graphql/graphql-js/issues/2848). Read on to find out more about what this proposal offers.\n\nOne of the disadvantages of GraphQL’s request/response model is that the GraphQL response is not returned to clients until the entire request has finished processing. However, not all requested data may be of equal importance, and in some use cases it may be possible for applications to act on a subset of the requested data. An application can speed up its time-to-interactive if the GraphQL server can send the most important data as soon as it’s ready. The new `@defer` and `@stream` directives allow GraphQL servers to do exactly that by returning multiple payloads from a single GraphQL response. \n\nThe `@defer` directive can be applied to fragment spreads and inline fragments. It is a declarative way for developers to mark parts of a query as non-essential for immediate return. \n\nHere’s an example of the `@defer` directive:\n\n#### Request\n\n```graphql\nquery {\n  person(id: \"cGVvcGxlOjE=\") {\n    name\n    ...HomeworldFragment @defer(label: \"homeworldDefer\")\n}\n\nfragment HomeworldFragment on Person {\n    homeworld {\n      name\n    }\n}\n```\n\n#### Response\n\n**Payload 1**\n\n```json\n{\n  \"data\": { \n    \"person\": {\n      \"name\": \"Luke Skywalker\"\n    }\n  },\n  \"hasNext\": true\n}\n```\n\n**Payload 2**\n\n```json\n{\n  \"label\": \"homeworldDefer\",\n  \"path\": [\"person\"],\n  \"data\": { \n    \"homeworld\": {\n      \"name\": \"Tatooine\"\n    }\n  },\n  \"hasNext\": false\n}\n```\n\nWhen the GraphQL execution engine encounters the `@defer` directive, it will fork execution and begin to resolve those fields asynchronously. While the deferred payload is still being prepared, the client can receive and act on the initial payload. This is most useful when the deferred data is large, expensive to load, or not on the critical path for interactivity.\n\nSimilar to `@defer`, the `@stream` directive also allows the client to receive data before the entire result is ready. `@stream` can be used on list fields. Here’s an example of the `@stream` directive:\n\n#### Request\n\n```graphql\nquery {\n  person(id: \"cGVvcGxlOjE=\") {\n    name\n    films @stream(initialCount: 2, label: \"filmsStream\") {\n      title\n    }\n}\n```\n\n#### Response\n\n**Payload 1**\n\n```json\n{\n  \"data\": { \n    \"person\": {\n      \"name\": \"Luke Skywalker\",\n      \"films\": [\n        { \"title\": \"A New Hope\" },\n        { \"title\": \"The Empire Strikes Back\" }\n      ]\n    }\n  },\n  \"hasNext\": true\n}\n```\n\n**Payload 2**\n\n```json\n{\n  \"label\": \"filmsStream\",\n  \"path\": [\"person\", \"films\", 2],\n  \"data\": { \n    \"title\": \"Return of the Jedi\"\n  },\n  \"hasNext\": true\n}\n```\n\n**Payload 3**\n\n```json\n{\n  \"label\": \"filmsStream\",\n  \"path\": [\"person\", \"films\", 3],\n  \"data\": { \n    \"title\": \"Revenge of the Sith\"\n  },\n  \"hasNext\": false\n}\n```\n\nWhen the GraphQL execution engine encounters the `@stream` directive, it will resolve as many list items specified by the `initialCount` argument. The rest will be resolved  asynchronously. This is especially useful for an interface where only a few elements can be rendered above the fold. The client can render these elements as soon as possible while the server is still resolving the rest of the data.\n\nWhile the GraphQL specification doesn’t specify transport protocols, we expect the most common transport for queries with `@defer`/`@stream` to be HTTP with chunked transfer encoding. This allows a GraphQL server to keep a standard HTTP connection open, while streaming each payload to the client as soon as it’s ready. It has low overhead, has been supported by browsers for decades, and can work easily with most infrastructure.\n\nYou can learn more about these directives at:\n\n* [The @defer/@stream RFC](https://github.com/graphql/graphql-spec/blob/master/rfcs/DeferStream.md)\n* [The proposed spec edits](https://github.com/graphql/graphql-spec/pull/742)\n* [The GraphQL Incremental Delivery over HTTP RFC](https://github.com/graphql/graphql-over-http/blob/master/rfcs/IncrementalDelivery.md)\n* [Our talk at GraphQL Summit 2020](https://www.youtube.com/watch?v=icv_Pq06aOY)\n\n> – **Rob Richard**, **Liliana Matos**, Front-End Engineering, 1stDibs.com\n"}},{"node":{"frontmatter":{"title":"GraphQL Foundation Monthly Newsletter February 2021","date":"2021-02-15T00:00:00.000Z","permalink":"/blog/2021-02-15-graphql-foundation-monthly-newsletter-february-2021","byline":"GraphQL Foundation","guestBio":null,"sublinks":null,"layout":"blog","tags":["newsletter"]},"id":"c6698c37-237f-51a2-b3b5-c54d087177d6","excerpt":"GraphQL has redefined how developers work with APIs and client-server interactions. And as the community works hard to foster the growth and…","rawMarkdownBody":"\n[GraphQL](https://graphql.org/) has redefined how developers work with APIs and client-server interactions. And as the community works hard to foster the growth and adoption of GraphQL, we are excited to share the work of the community and discussions via the monthly GraphQL Foundation newsletter.\n\nGraphQL reached new heights in 2020 and is only poised to continue it’s meteoric rise in 2021. Thank you again for your involvement in this project and your support of the GraphQL Foundation. We are excited for another productive year!\n\n## Working Group Updates\n\n### [Advancing no introspection at root of Subscription operation ](https://github.com/graphql/graphql-spec/pull/776)\n\nThe group decided to disallow since it doesn’t work in the reference implementation. During the graphql-js implementation some issues were discovered around fragments that are being fixed. Read more [here](https://github.com/graphql/graphql-spec/pull/776).\n\n### [Default value coercion update](https://github.com/graphql/graphql-spec/pull/793) \n\nCurrently this is a case where infinite loops can occur. The WG is working to figure out how to avoid this in the spec [here](https://github.com/graphql/graphql-spec/pull/793#issuecomment-738736539).\n\n### [Defer/stream updates](https://github.com/graphql/graphql-spec/blob/main/rfcs/DeferStream.md)\n\nThe official experimental branch of graphql-js/express-graphql. The WG is working to update the initialCount, validation rule in GraphQL.js, and the spec.\n\n### Schema Coordinates Spec\n\nThe RFC and spec edit have been out for a few months with credit due to everyone who has reviewed those. Last time the field arguments were the discussion there were two main contenders: `Query.business(id:)` versus `Query.business.id`. The WG is looking for consensus. The discussion summarized can be found [here](https://github.com/graphql/graphql-spec/pull/746#issuecomment-740914167).\n\n### _Typename is not valid at subscription root\n\n`__typename` does not return an async iterator and has been deemed not useful at the root of a subscription operation, yet it is allowed by GraphQL validation. This field has caused some confusion in the community, and the WG has proposed explicitly validating it to prevent the field to catch these issues earlier.\n\n### Default value coercion \n\nThere's inconsistency in the handling of default values between user-supplied defaults (i.e. variables in operation documents) and schema-supplied defaults (for arguments or input object fields). The WG discussed ways in which a poorly constructed GraphQL schema can break the type safety guarantees of GraphQL and proposed addressing this by making schema defaults operate in a more expected manner. Next steps are to get an implementation finished so that we can advance the spec changes to stage 2.\n\n## In Other News...\n\n*   [Federated GraphQL @ Walmart](https://medium.com/walmartglobaltech/federated-graphql-walmart-bfc85c2553de)\n*   [Apollo Extends Explorer GraphQL IDE to Development Environments](https://thenewstack.io/apollo-extends-explorer-graphql-ide-to-development-environments/)\n*   [How Netflix Scales its API with GraphQL Federation (Part 2)](https://netflixtechblog.com/how-netflix-scales-its-api-with-graphql-federation-part-2-bbe71aaec44a)\n*   [Hasura launched a 3 week series of articles, live-streams, and A.M.As for GraphQL beginners and experts.](https://hasura.io/blog/graphql-january-with-hasura/)\n*   [Prisma announced Nexus 1.0: A Major Release for Type-Safe, Code-First GraphQL APIs](https://www.prisma.io/blog/announcing-the-release-of-nexus-schema-v1-b5eno5g08d0b)\n*   ZDNet: [2021 Technology trend review: Cloud, Kubernetes, and GraphQL](https://zdnet.com/article/2021-technology-trend-review-part-1-blockchain-cloud-open-source/)\n*   TechTarget: [Enterprise application trends that will impact 2021: GraphQL vs. REST choice steers microservices development](https://searchapparchitecture.techtarget.com/feature/Enterprise-application-trends-that-will-impact)\n*   [Top 20 GraphQL Jobs Postings](https://www.dice.com/jobs/q-GraphQL-jobs)\n*   GraphQL Galaxy’s talk uploaded online, [check out the Keynote](https://youtu.be/mfg6ZJ2GGRc)!\n*   The [new Schema Stitching Handbook was released](https://the-guild.dev/blog/a-new-year-for-schema-stitching), together with examples and video walkthrough with everything you need to know about Federated/Distributed GraphQL Gateways\n*   [The Guild announced GraphQL Modules 1.0](https://the-guild.dev/blog/graphql-modules-v1) as a major rewrite after 3 years of experience. The new version includes better simplicity and performance\n*   With [GraphQL Mesh](https://graphql-mesh.com/) you can now wrap any existing API and add reactivity to it - check out [this blog post about how to do it](https://the-guild.dev/blog/add-reactivity-to-an-existing-source)\n*   [spotify-graphql is approaching v2.0](https://twitter.com/whereischarly/status/1349467930166239232?s=20) as a complete rewrite, instead of manual code it uses GraphQL Mesh under the hood to generate the API\n*   Software Engineering Daily: [Podcast with DGraph’s Manit Jain](https://softwareengineeringdaily.com/2021/01/19/dgraph-native-graphql-database-with-manish-jain/)\n\n## Upcoming Events:\n\n*   Asia’s largest [GraphQL conference](https://graphql.asia/) is back! February 24th & 25th\n\n## Get Involved!\n\nDevelopers can get involved in the community and contribute to the project at [https://github.com/graphql](https://github.com/graphql).\n\nOrganizations interested in becoming members of the GraphQL Foundation or the GraphQL Specification can learn more on our [member page](/foundation/join/). If you have questions about membership, please send an email to [membership@graphql.org](mailto:membership@graphql.org).\n"}},{"node":{"frontmatter":{"title":"GraphQL Foundation Monthly Newsletter March 2021","date":"2021-03-31T00:00:00.000Z","permalink":"/blog/2021-03-31-graphql-foundation-monthly-newsletter-march-2021","byline":"GraphQL Foundation","guestBio":null,"sublinks":null,"layout":"blog","tags":["newsletter"]},"id":"dd09971c-8d98-57e1-8993-776436dadeb9","excerpt":"GraphQL has redefined how developers work with APIs and client-server interactions. And as the community works hard to foster the growth and…","rawMarkdownBody":"\n[GraphQL](https://graphql.org/) has redefined how developers work with APIs and client-server interactions. And as the community works hard to foster the growth and adoption of GraphQL, we are excited to share the work of the community and discussions via the monthly GraphQL Foundation newsletter.\n\nGraphQL reached new heights in 2020 and is only poised to continue it’s meteoric rise in 2021. Thank you again for your involvement in this project and your support of the GraphQL Foundation. We are excited for another productive year!\n\n## Working Group Updates\n\n**GraphQL Foundation marketing committee**\n\nThe newly created GraphQL Foundation marketing committee is responsible for coordinating marketing activities in support of the [Foundation](https://foundation.graphql.org/) and the [projects](https://github.com/graphql). They meet regularly, and welcome participation from Foundation and community members.\n\nThe meeting agendas and minutes are open and available in [meetings/](https://github.com/graphql/marketing/blob/main/meetings). We generally meet on the fourth Thursday of the month at 9am PT. To be added to the recurring invite, please contact operations@graphql.org.\n\n**Allowing fields to diverge more**\n\nThis is one of the most complicated validation rules, which is about overlapping fields and not forcing to ensure every field is unique in a query, especially if you compose queries. They have to be merged together and ensure the field is only executed once. There's a rule to ensure this merging can be done.\n\nThe working group has agreed to add prose or a non-normative note to this validation rule to explain this. \n\n**Operation Expressions**\n\nOperation expressions is an extension to the Schema Coordinates syntax that allows for a host of new use cases. Outlined [here](https://github.com/graphql/graphql-spec/pull/823) are  some of the use cases that have been discussed so far, and have iterated on the syntax, but everything in this is very much in flux. \n\n**Directions via introspection report**\n\nCustom directives are not currently introspectable. This has been a big discussion over the years. Recently, graphql-java has implemented (almost merged) the ability to query directive by introspection. \n\n**Oneof Input Objects and Oneof Fields**\n\nOneof Input Objects are a special variant of Input Objects where the type system asserts that exactly one of the fields must be set and non-null, all others being omitted. This is represented in introspection with the `__Type.oneField: Boolean` field, and in SDL via the `@oneOf` directive on the input object. The working group has agreed to Contribute syntax thoughts and on the RFC itself, and write an implementation in GraphQL.js\n\n## In Other News...\n\n*   ZDNet: [Databases, graphs, and GraphQL: The past, present, and future](https://www.zdnet.com/article/databases-graphs-and-graphql-past-present-and-future/)\n*   ZDNet: [Hasura connects GraphQL to the REST of the world](https://www.zdnet.com/article/hasura-connects-graphql-to-the-rest-of-the-world/)\n*   ADT Mag: [Netflix Open Sources GraphQL for Spring Boot](https://adtmag.com/articles/2021/02/17/netflix-open-sources-graphql-for-spring-boot.aspx)\n*   ProgrammableWeb: [Facebook Adds Relay Hooks for Improved GraphQL Data Fetching](https://www.programmableweb.com/news/facebook-adds-relay-hooks-improved-graphql-data-fetching/brief/2021/03/11)\n*   [Dgraph Labs Launches Slash GraphQL, Industry’s First GraphQL-Native Database Backend-As-A-Service](https://www.globenewswire.com/news-release/2020/09/10/2091563/0/en/Dgraph-Labs-Launches-Slash-GraphQL-Industry-s-First-GraphQL-Native-Database-Backend-As-A-Service.html)\n*   [How Square accelerates product development with Apollo GraphQL](https://www.apollographql.com/blog/how-square-accelerates-product-development-with-apollo-graphql/)\n*   [Netflix: Beyond REST Rapid Development with GraphQL Microservices](https://netflixtechblog.com/beyond-rest-1b76f7c20ef6)\n*   [The Guild announce early access to GraphQL Hive - A new Schema Registry for your GraphQL Workflows](https://the-guild.dev/blog/graphql-hive-preview)\n\n## Upcoming Events:\n\n*   The GraphQL community will come together once again for [GraphQL Summit](https://summit.graphql.com/) April 7th & 8th\n\n## Get Involved!\n\nDevelopers can get involved in the community and contribute to the project at [https://github.com/graphql](https://github.com/graphql).\n\nOrganizations interested in becoming members of the GraphQL Foundation or the GraphQL Specification can learn more on our [member page](https://foundation.graphql.org/join). If you have questions about membership, please send an email to membership@graphql.org.\n"}},{"node":{"frontmatter":{"title":"GraphQL Foundation Monthly Newsletter April 2021","date":"2021-04-30T00:00:00.000Z","permalink":"/blog/2021-04-30-graphql-foundation-monthly-newsletter-april-2021","byline":"GraphQL Foundation","guestBio":null,"sublinks":null,"layout":"blog","tags":["newsletter"]},"id":"ba11bc5b-58b7-54fd-983d-afae956acb32","excerpt":"GraphQL Foundation Monthly Newsletter April 2021 GraphQL has redefined how developers work with APIs and client-server interactions. And as…","rawMarkdownBody":"\n# GraphQL Foundation Monthly Newsletter April 2021\n\n[GraphQL](https://graphql.org/) has redefined how developers work with APIs and client-server interactions. And as the community works hard to foster the growth and adoption of GraphQL, we are excited to share the work of the community and discussions via the monthly GraphQL Foundation newsletter.\n\nGraphQL reached new heights in 2020 and is only poised to continue it’s meteoric rise in 2021. Thank you again for your involvement in this project and your support of the GraphQL Foundation. We are excited for another productive year!\n\n## Working Group Updates\n\n### GraphQL Foundation marketing committee\n\nThe newly created GraphQL Foundation marketing committee is responsible for coordinating marketing activities in support of the [Foundation](https://foundation.graphql.org/) and the [projects](https://github.com/graphql). They meet regularly, and welcome participation from Foundation and community members.\n\nThe meeting agendas and minutes are open and available in [meetings/](https://github.com/graphql/marketing/blob/main/meetings). We generally meet on the fourth Thursday of the month at 9am PT. To be added to the recurring invite, please contact [operations@graphql.org](mailto:operations@graphql.org).\n\n### Spec cut\n\nThere are few more final phase proposals still waiting on review, as well as updating the version of the legal text). The next step will include having the TSC take a formal vote to cut the draft.\n\n### TypeScript migration for GraphQL.js\n\nRepresenting almost 6 million downloads per week. TypeScript is in need of additional clean up, including GraphQLList and GraphQLNonNull. The WG decided to drop Flow types, and have a PR for converting to TypeScript. The plan is to incorporate the fixes into the main release, which is very close to being done. Once finished, it will be added to release 16.0.0-alpha.1. Once that is complete it will merge the PR and convert to TypeScript.\n\n### Adding descriptions to queries and fragments\n\nThe purpose of this discussion is to add necessary comments for various business use cases. As of now we have to parse SDL data and it's problematic when people add other comments. The WG is working on the best way to solve this issue. \n\n### Schema introspection extensions\n\nFirst implemented by GraphQL Java,then some issues were found and it was discovered there was some additional work to be done before turning it into an RFC. The Working Group is planning to address these issues shortly.\n\n\n## In Other News...\n\n*   [Dgraph announces  v21.03 - Resilient Rocket Release](https://dgraph.io/blog/post/v2103-release/)\n*   Read: [GraphQL API Security best practices with AWS AppSync and Amplify](https://github.com/danilop/graphql-api-security-with-aws-appsync-and-amplify)\n  *   AWS AppSync is a fully managed service which allows developers to deploy and interact with serverless scalable GraphQL backends on AWS. \n*   [Neo4j announces GraphQL Library Beta Release](https://medium.com/neo4j/announcing-the-neo4j-graphql-library-beta-99ae8541bbe7)\n*   TechTarget: [Dgraph GraphQL database users detail graph use cases](https://searchdatamanagement.techtarget.com/news/252499595/Dgraph-GraphQL-database-users-detail-graph-use-cases)\n*   Devops.com: [Apollo GraphQL Makes Federated Server More Accessible](https://devops.com/apollo-graphql-makes-federated-server-more-accessible/)\n*   The New Stack: [Why Shopify Favors GraphQL over REST for Its APIs](https://thenewstack.io/why-shopify-favors-graphql-over-rest-for-its-apis/)\n*   Code Story: [E17: Matt Debergalis, Apollo GraphQL](https://codestory.co/podcast/e17-matt-debergalis-apollo-graphql/)\n\n## Upcoming Events:\n\n*   [Hasura Con '21: The Big Hasura User Conference](https://hasura.io/events/hasura-con-2021/) The 2021 installment of Hasura Con will take place on June 23rd and 24th. The event brings together users from all over the world to celebrate all things Hasura and will feature top-notch speakers and workshops. Sign up today to attend Hasura Con '21 or submit a talk proposal to share your knowledge at the event.\n\n## Get Involved!\n\nDevelopers can get involved in the community and contribute to the project at [https://github.com/graphql](https://github.com/graphql).\n\nOrganizations interested in becoming members of the GraphQL Foundation or the GraphQL Specification can learn more on our [member page](https://foundation.graphql.org/join). If you have questions about membership, please send an email to membership@graphql.org.\n"}}]}},"pageContext":{"tag":"announcements"}},"staticQueryHashes":["1581580458","4162432391"]}