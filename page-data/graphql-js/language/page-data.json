{"componentChunkName":"component---src-templates-doc-tsx","path":"/graphql-js/language/","result":{"data":{"doc":{"frontmatter":{"title":"graphql/language","date":null,"permalink":"/graphql-js/language/","byline":null,"guestBio":null,"sublinks":"BREAK,getLocation,Kind,lex,parse,parseValue,printSource,visit","layout":"docs"},"id":"24734828-b4e6-56b2-a97e-a8763e6ffe38","rawMarkdownBody":"\n`graphql/language` 模块负责对 GraphQL 查询语言进行解析和操作。你既可以从 `graphql/language` 模块引入，也可以从根模块 `graphql` 引入。示例如下：\n\n```js\nimport { Source } from 'graphql'; // ES6\nvar { Source } = require('graphql'); // CommonJS\n```\n\n## 概览\n\n**Source**\n\n<ul class=\"apiIndex\">\n  <li>\n    <a href=\"#source\">\n      <pre>class Source</pre>\n      表示传递给 GraphQL 服务的输入字符串。\n    </a>\n  </li>\n  <li>\n    <a href=\"#getlocation\">\n      <pre>function getLocation</pre>\n      将字符偏移量转化为 Source 中的行和列。\n    </a>\n  </li>\n</ul>\n\n**词法分析器（Lexer）**\n\n<ul class=\"apiIndex\">\n  <li>\n    <a href=\"#lex\">\n      <pre>function lex</pre>\n      根据 GraphQL 语法对 GraphQL 的 Source 类进行词法分析。\n    </a>\n  </li>\n</ul>\n\n**解析器（Parser）**\n\n<ul class=\"apiIndex\">\n  <li>\n    <a href=\"#parse\">\n      <pre>function parse</pre>\n      根据 GraphQL 语法对 GraphQL 的 Source 类进行解析。\n    </a>\n  </li>\n  <li>\n    <a href=\"#parseValue\">\n      <pre>function parseValue</pre>\n      根据 GraphQL 语法对值进行解析。\n    </a>\n  </li>\n  <li>\n    <a href=\"#kind\">\n      <pre>var Kind</pre>\n      表示已解析的抽象语法树（Abstract Syntax Tree, AST）中节点的各种类型。\n    </a>\n  </li>\n</ul>\n\n**Visitor**\n\n<ul class=\"apiIndex\">\n  <li>\n    <a href=\"#visit\">\n      <pre>function visit</pre>\n      一个通用的 visitor，用于遍历一个已解析的 GraphQL AST。\n    </a>\n  </li>\n  <li>\n    <a href=\"#break\">\n      <pre>var BREAK</pre>\n      用于允许中断 visitor 的 token。\n    </a>\n  </li>\n</ul>\n\n**Printer**\n\n<ul class=\"apiIndex\">\n  <li>\n    <a href=\"#print\">\n      <pre>function print</pre>\n      以一个标准的格式打印出一个 AST。\n    </a>\n  </li>\n</ul>\n\n## Source\n\n### Source\n\n```js\nexport class Source {\n  constructor(body: string, name?: string)\n}\n```\n\n对 GraphQL 源输入的表示。name 参数是可选的，但对于将 GraphQL 文档存储在源文件里的客户端来说，这个参数是非常有用的；举个例子，如果 GraphQL 的输入是在一个名为 Foo.graphql 的文件里，那么将 name 设置为 \"Foo.graphql\" 在之后就会很有用了。\n\n### getLocation\n\n```js\nfunction getLocation(source: Source, position: number): SourceLocation\n\ntype SourceLocation = {\n  line: number;\n  column: number;\n}\n```\n\n接收一个 Source 对象和一个 UTF-8 编码的字符偏移量作为参数，返回一个 SourceLocation 对象，包含相关的行列位置信息。\n\n## 词法分析器（Lexer）\n\n### lex\n\n```js\nfunction lex(source: Source): Lexer;\n\ntype Lexer = (resetPosition?: number) => Token;\n\nexport type Token = {\n  kind: number;\n  start: number;\n  end: number;\n  value: ?string;\n};\n```\n\n给定一个 Source 对象，为这个对象返回一个词法分析器。词法分析器每次被调用的时候会表现得像一个生成器，返回 Source 里的下一个 token。假设对某个 source 进行词法分析，最后返回的 token 就将是某种类型的文件结尾符，而在这之后，词法分析器不管何时被调用都会重复返回文件结尾符的 token。\n\n词法分析器函数的参数是可选的，而且可被用于在 Source 里将词法分析器回退或者前进到某个新位置。\n\n## 解析器（Parser）\n\n### parse\n\n```js\nexport function parse(\n  source: Source | string,\n  options?: ParseOptions\n): Document\n```\n\n给定一个 GraphQL 源，将其解析并放入文档里。\n\n如果遇到语法错误则抛出 GraphQLError。\n\n### parseValue\n\n```js\nexport function parseValue(\n  source: Source | string,\n  options?: ParseOptions\n): Value\n```\n\n给定一个包含 GraphQL 值的字符串，将这个值解析为 AST。\n\n如果遇到语法错误则抛出 GraphQLError。\n\n这在某些工具中会很有用，比如直接在 GraphQL 值上进行操作，并且与 GraphQL 文档完全分离开来。\n\n### Kind\n\n这是一个枚举类型，用于描述不同类型的 AST 节点。\n\n## Visitor\n\n### visit\n\n```js\nfunction visit(root, visitor, keyMap)\n```\n\n`visit()` 将使用深度优先遍历一个 AST，在遍历当中对每个节点调用 visitor 的 `enter` 函数，并在访问完当前节点及其子节点后调用 `leave` 函数。\n\n通过从 `enter` 和 `leave` 函数里返回不同的值，visitor 的行为可以进行更改，包括跳过 AST 的一个子树（返回 `false`）、编辑这个 AST（返回一个值或者返回 `null` 来删除这个节点）、或者返回 `BREAK` 停止整个遍历。\n\n当使用 `visit()` 编辑一个 AST 的时候，原始的 AST 不会被修改，`visit` 函数会返回一个经过修改的新版本 AST。\n\n```js\nvar editedAST = visit(ast, {\n  enter(node, key, parent, path, ancestors) {\n    // @return\n    //   undefined: 无操作\n    //   false: 跳过访问该节点\n    //   visitor.BREAK: 停止访问\n    //   null: 删除该节点\n    //   any value: 使用返回的这个值替代原本的节点\n  },\n  leave(node, key, parent, path, ancestors) {\n    // @return\n    //   undefined: 无操作\n    //   false: 无操作\n    //   visitor.BREAK: 停止访问\n    //   null: 删除该节点\n    //   any value: 使用返回的这个值替代原本的节点\n  }\n});\n```\n\nVisitor 可以通过提供和节点类型同名的函数来替代 `enter()` 和 `leave()` 函数，或者通过名称的关键字来使用 visitor 中的 `enter` 或 `leave`，这就造成 visitor 的 API 有四种形式：\n\n1) 当进入特定类型的节点时，触发同名的 visitor。\n\n```js\nvisit(ast, {\n  Kind(node) {\n    // enter the \"Kind\" node\n  }\n})\n```\n\n2) 在进入或离开特定类型的节点时，触发同名的 visitor。\n\n```js\nvisit(ast, {\n  Kind: {\n    enter(node) {\n      // enter the \"Kind\" node\n    }\n    leave(node) {\n      // leave the \"Kind\" node\n    }\n  }\n})\n```\n\n3) 在进入或离开任意节点时，触发通用的 visitor。\n\n```js\nvisit(ast, {\n  enter(node) {\n    // enter any node\n  },\n  leave(node) {\n    // leave any node\n  }\n})\n```\n\n4) 为进入或离开特定类型的节点创建平行的 visitor。\n\n```js\nvisit(ast, {\n  enter: {\n    Kind(node) {\n      // enter the \"Kind\" node\n    }\n  },\n  leave: {\n    Kind(node) {\n      // leave the \"Kind\" node\n    }\n  }\n})\n```\n\n### BREAK\n\n`BREAK` 标记在 `visitor` 的文档中有描述。\n\n## Printer\n\n### print\n\n```js\nfunction print(ast): string\n```\n\n使用一组合理的格式化规则，将一个 AST 转化成一个字符串。\n"},"nextDoc":{"frontmatter":{"title":"graphql/type","permalink":"/graphql-js/type/"}}},"pageContext":{"permalink":"/graphql-js/language/","nextPermalink":"/graphql-js/type/","sideBarData":[{"name":"GraphQL.js 教程","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-GettingStarted.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"GraphQL.js 入门","permalink":"/graphql-js/","next":"/graphql-js/running-an-express-graphql-server/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":"入门","date":null},"id":"3ea95341-77af-5951-9ef8-5bc4fe4702f3"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-ExpressGraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"运行一个 Express GraphQL 服务器","permalink":"/graphql-js/running-an-express-graphql-server/","next":"/graphql-js/graphql-clients/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":"Express + GraphQL","date":null},"id":"e2435b54-e4c8-5a2c-9af0-adfa427bd544"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-GraphQLClients.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"GraphQL 客户端","permalink":"/graphql-js/graphql-clients/","next":"/graphql-js/basic-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null},"id":"e17eec27-8eaf-580b-8a2e-60511c61d6a6"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-BasicTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"基本类型","permalink":"/graphql-js/basic-types/","next":"/graphql-js/passing-arguments/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null},"id":"91c209b9-0f23-5084-9ef2-fceb19838836"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-PassingArguments.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"传递参数","permalink":"/graphql-js/passing-arguments/","next":"/graphql-js/object-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null},"id":"06d221f7-5d5d-59b7-8f92-9e5e073478a4"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-ObjectTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"对象类型","permalink":"/graphql-js/object-types/","next":"/graphql-js/mutations-and-input-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null},"id":"393de606-3de6-50fb-8351-a0c6213c9ad6"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-Mutations.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"变更和输入类型","permalink":"/graphql-js/mutations-and-input-types/","next":"/graphql-js/authentication-and-express-middleware/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null},"id":"1c1fc464-3387-5387-b610-108dba71468b"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-Authentication.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"认证和 Express 中间件","permalink":"/graphql-js/authentication-and-express-middleware/","next":"/graphql-js/constructing-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":"认证 & 中间件","date":null},"id":"f186724a-8cbc-5058-b774-4d864fdb6c06"}]},{"name":"高级指南","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Guides-ConstructingTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"构建类型","permalink":"/graphql-js/constructing-types/","next":"/graphql-js/express-graphql/","category":"高级指南","sublinks":null,"sidebarTitle":null,"date":null},"id":"44d4287b-d8c5-57bf-b565-3b491dc8f538"}]},{"name":"API 参考","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-ExpressGraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"express-graphql","permalink":"/graphql-js/express-graphql/","next":"/graphql-js/graphql/","category":"API 参考","sublinks":"graphqlHTTP","sidebarTitle":null,"date":null},"id":"77088894-f7e4-5eb1-9677-e19ca0ae1b7f"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-GraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql","permalink":"/graphql-js/graphql/","next":"/graphql-js/error/","category":"API 参考","sublinks":"graphql","sidebarTitle":null,"date":null},"id":"6d9f33b2-832f-531a-a36b-88b670ef808b"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Errors.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/error","permalink":"/graphql-js/error/","next":"/graphql-js/execution/","category":"API 参考","sublinks":"formatError,GraphQLError,locatedError,syntaxError","sidebarTitle":null,"date":null},"id":"2fe3a3a9-595e-51db-8358-fb386a98cfaa"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Execution.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/execution","permalink":"/graphql-js/execution/","next":"/graphql-js/language/","category":"API 参考","sublinks":"execute","sidebarTitle":null,"date":null},"id":"b151ae43-a88b-54f5-a4b2-0d84c8e842bf"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Language.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/language","permalink":"/graphql-js/language/","next":"/graphql-js/type/","category":"API 参考","sublinks":"BREAK,getLocation,Kind,lex,parse,parseValue,printSource,visit","sidebarTitle":null,"date":null},"id":"24734828-b4e6-56b2-a97e-a8763e6ffe38"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-TypeSystem.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/type","permalink":"/graphql-js/type/","next":"/graphql-js/utilities/","category":"API 参考","sublinks":"getNamedType,getNullableType,GraphQLBoolean,GraphQLEnumType,GraphQLFloat,GraphQLID,GraphQLInputObjectType,GraphQLInt,GraphQLInterfaceType,GraphQLList,GraphQLNonNull,GraphQLObjectType,GraphQLScalarType,GraphQLSchema,GraphQLString,GraphQLUnionType,isAbstractType,isCompositeType,isInputType,isLeafType,isOutputType","sidebarTitle":null,"date":null},"id":"18ad51d1-7c3d-56fe-aba4-d5dc7a463b0e"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Utilities.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/utilities","permalink":"/graphql-js/utilities/","next":"/graphql-js/validation/","category":"API 参考","sublinks":"astFromValue,buildASTSchema,buildClientSchema,buildSchema,introspectionQuery,isValidJSValue,isValidLiteralValue,printIntrospectionSchema,printSchema,typeFromAST,TypeInfo","sidebarTitle":null,"date":null},"id":"0f778670-df34-5066-b0cc-3ed3373df517"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Validation.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/validation","permalink":"/graphql-js/validation/","next":null,"category":"API 参考","sublinks":"specifiedRules,validate","sidebarTitle":null,"date":null},"id":"5bae073a-9200-5822-b566-ff993a7d1510"}]}],"sourcePath":"src/content/graphql-js/APIReference-Language.md"}},"staticQueryHashes":["1581580458"]}