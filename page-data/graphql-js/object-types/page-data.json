{"componentChunkName":"component---src-templates-doc-tsx","path":"/graphql-js/object-types/","result":{"data":{"doc":{"frontmatter":{"title":"对象类型","heroText":null,"date":null,"permalink":"/graphql-js/object-types/","byline":null,"guestBio":null,"sublinks":null,"layout":"docs","tags":null},"id":"393de606-3de6-50fb-8351-a0c6213c9ad6","rawMarkdownBody":"\n很多情况下，你可能不想让 API 返回一个数字或字符串。你可能会期望它返回一个带有复杂行为的对象。GraphQL 刚好可以完美地契合你的这个要求。\n\n在 GraphQL schema language 中，定义一个新的对象类型就和我们在示例中定义的 `Query` 类型一样。每个对象可以有返回指定类型的字段，以及带有参数的方法。例如，在 [参数传递](/graphql-js/passing-arguments/) 一节中，我们有一个掷骰子的方法：\n\n```javascript\ntype Query {\n  rollDice(numDice: Int!, numSides: Int): [Int]\n}\n```\n\n如果随着时间的推移我们想要有越来越多的基于随机骰子的方法，我们可以实现一个 `RandomDie` 的对象类型来替代。\n\n```javascript\ntype RandomDie {\n  roll(numRolls: Int!): [Int]\n}\n\ntype Query {\n  getDie(numSides: Int): RandomDie\n}\n```\n\n对于 `RandomDie` 类型的根级别解析器来说，我们可以用 ES6 的 class 语法来替代，这样的话这些解析器就是这个类的实例方法了。下面的代码展示了如何使用 ES6 的 class 语法来实现上面的 `RandomDie` 对象类型：\n\n```javascript\nclass RandomDie {\n  constructor(numSides) {\n    this.numSides = numSides;\n  }\n\n  rollOnce() {\n    return 1 + Math.floor(Math.random() * this.numSides);\n  }\n\n  roll({numRolls}) {\n    var output = [];\n    for (var i = 0; i < numRolls; i++) {\n      output.push(this.rollOnce());\n    }\n    return output;\n  }\n}\n\nvar root = {\n  getDie: ({numSides}) => {\n    return new RandomDie(numSides || 6);\n  }\n}\n```\n\n对于那些不使用任何参数的字段来说，你可以使用对象属性或实例方法来表示。对于上面的示例方法，不论是 `numSides` 还是 `rollOnce` 实际上都可以被用来实现 GraphQL 的字段，所以上面的代码同样可以以 schema 的方式来实现:\n\n```javascript\ntype RandomDie {\n  numSides: Int!\n  rollOnce: Int!\n  roll(numRolls: Int!): [Int]\n}\n\ntype Query {\n  getDie(numSides: Int): RandomDie\n}\n```\n\n最后把这些代码都整理到一起，这里是一些使用该 GraphQL API 运行服务器的示例代码：\n\n```javascript\nvar express = require('express');\nvar { graphqlHTTP } = require('express-graphql');\nvar { buildSchema } = require('graphql');\n\n// 用 GraphQL schema language 构造一个 schema\nvar schema = buildSchema(`\n  type RandomDie {\n    numSides: Int!\n    rollOnce: Int!\n    roll(numRolls: Int!): [Int]\n  }\n\n  type Query {\n    getDie(numSides: Int): RandomDie\n  }\n`);\n\n// 该类继承 RandomDie GraphQL 类型\nclass RandomDie {\n  constructor(numSides) {\n    this.numSides = numSides;\n  }\n\n  rollOnce() {\n    return 1 + Math.floor(Math.random() * this.numSides);\n  }\n\n  roll({numRolls}) {\n    var output = [];\n    for (var i = 0; i < numRolls; i++) {\n      output.push(this.rollOnce());\n    }\n    return output;\n  }\n}\n\n// root 规定了顶层的 API 入口端点\nvar root = {\n  getDie: ({numSides}) => {\n    return new RandomDie(numSides || 6);\n  }\n}\n\nvar app = express();\napp.use('/graphql', graphqlHTTP({\n  schema: schema,\n  rootValue: root,\n  graphiql: true,\n}));\napp.listen(4000);\nconsole.log('Running a GraphQL API server at localhost:4000/graphql');\n```\n\n当你对一个返回对象类型的 API 发出 GraphQL 查询时，你可以通过嵌套 GraphQL 字段名来一次性调用对象上的多个方法。例如，如果你想在调用 `rollOnce` 方法掷 1 次骰子的同时也调用 `roll` 方法来掷 3 次骰子的话，你可以这么做：\n\n```javascript\n{\n  getDie(numSides: 6) {\n    rollOnce\n    roll(numRolls: 3)\n  }\n}\n```\n\n如果你用 `node server.js` 命令来运行这些代码并且访问 http://localhost:4000/graphql 的话，你可以用 GraphiQL 试一下这些 API。\n\n这种定义对象类型的方式通常会比传统的 REST 风格的 API 会带来更多的好处。你可以只用一次请求就能获取到所有信息，而不是一次请求只能获取到一个对象的相关信息，然后还要请求一系列 API 才能获取到其他对象的信息。这样不仅节省了带宽、让你的应用跑得更快，同时也简化了你客户端应用的逻辑。\n\n到目前为止，我们所看到的每个 API 都是为返回数据而设计的。为了修改存储的数据或处理复杂的输入，需要继续 [学习 mutations 和 input types](/graphql-js/mutations-and-input-types/)。\n"},"nextDoc":{"frontmatter":{"title":"变更和输入类型","permalink":"/graphql-js/mutations-and-input-types/"}}},"pageContext":{"permalink":"/graphql-js/object-types/","nextPermalink":"/graphql-js/mutations-and-input-types/","sideBarData":[{"name":"GraphQL.js 教程","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-GettingStarted.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"GraphQL.js 入门","permalink":"/graphql-js/","next":"/graphql-js/running-an-express-graphql-server/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":"入门","date":null,"tags":null},"id":"3ea95341-77af-5951-9ef8-5bc4fe4702f3"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-ExpressGraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"运行一个 Express GraphQL 服务器","permalink":"/graphql-js/running-an-express-graphql-server/","next":"/graphql-js/graphql-clients/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":"Express + GraphQL","date":null,"tags":null},"id":"e2435b54-e4c8-5a2c-9af0-adfa427bd544"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-GraphQLClients.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"GraphQL 客户端","permalink":"/graphql-js/graphql-clients/","next":"/graphql-js/basic-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"e17eec27-8eaf-580b-8a2e-60511c61d6a6"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-BasicTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"基本类型","permalink":"/graphql-js/basic-types/","next":"/graphql-js/passing-arguments/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"91c209b9-0f23-5084-9ef2-fceb19838836"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-PassingArguments.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"传递参数","permalink":"/graphql-js/passing-arguments/","next":"/graphql-js/object-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"06d221f7-5d5d-59b7-8f92-9e5e073478a4"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-ObjectTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"对象类型","permalink":"/graphql-js/object-types/","next":"/graphql-js/mutations-and-input-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"393de606-3de6-50fb-8351-a0c6213c9ad6"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-Mutations.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"变更和输入类型","permalink":"/graphql-js/mutations-and-input-types/","next":"/graphql-js/authentication-and-express-middleware/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"1c1fc464-3387-5387-b610-108dba71468b"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-Authentication.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"认证和 Express 中间件","permalink":"/graphql-js/authentication-and-express-middleware/","next":"/graphql-js/constructing-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":"认证 & 中间件","date":null,"tags":null},"id":"f186724a-8cbc-5058-b774-4d864fdb6c06"}]},{"name":"高级指南","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Guides-ConstructingTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"构建类型","permalink":"/graphql-js/constructing-types/","next":"/graphql-js/express-graphql/","category":"高级指南","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"44d4287b-d8c5-57bf-b565-3b491dc8f538"}]},{"name":"API 参考","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-ExpressGraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"express-graphql","permalink":"/graphql-js/express-graphql/","next":"/graphql-js/graphql/","category":"API 参考","sublinks":"graphqlHTTP","sidebarTitle":null,"date":null,"tags":null},"id":"77088894-f7e4-5eb1-9677-e19ca0ae1b7f"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-GraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql","permalink":"/graphql-js/graphql/","next":"/graphql-js/error/","category":"API 参考","sublinks":"graphql","sidebarTitle":null,"date":null,"tags":null},"id":"6d9f33b2-832f-531a-a36b-88b670ef808b"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Errors.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/error","permalink":"/graphql-js/error/","next":"/graphql-js/execution/","category":"API 参考","sublinks":"formatError,GraphQLError,locatedError,syntaxError","sidebarTitle":null,"date":null,"tags":null},"id":"2fe3a3a9-595e-51db-8358-fb386a98cfaa"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Execution.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/execution","permalink":"/graphql-js/execution/","next":"/graphql-js/language/","category":"API 参考","sublinks":"execute","sidebarTitle":null,"date":null,"tags":null},"id":"b151ae43-a88b-54f5-a4b2-0d84c8e842bf"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Language.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/language","permalink":"/graphql-js/language/","next":"/graphql-js/type/","category":"API 参考","sublinks":"BREAK,getLocation,Kind,lex,parse,parseValue,printSource,visit","sidebarTitle":null,"date":null,"tags":null},"id":"24734828-b4e6-56b2-a97e-a8763e6ffe38"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-TypeSystem.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/type","permalink":"/graphql-js/type/","next":"/graphql-js/utilities/","category":"API 参考","sublinks":"getNamedType,getNullableType,GraphQLBoolean,GraphQLEnumType,GraphQLFloat,GraphQLID,GraphQLInputObjectType,GraphQLInt,GraphQLInterfaceType,GraphQLList,GraphQLNonNull,GraphQLObjectType,GraphQLScalarType,GraphQLSchema,GraphQLString,GraphQLUnionType,isAbstractType,isCompositeType,isInputType,isLeafType,isOutputType","sidebarTitle":null,"date":null,"tags":null},"id":"18ad51d1-7c3d-56fe-aba4-d5dc7a463b0e"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Utilities.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/utilities","permalink":"/graphql-js/utilities/","next":"/graphql-js/validation/","category":"API 参考","sublinks":"astFromValue,buildASTSchema,buildClientSchema,buildSchema,introspectionQuery,isValidJSValue,isValidLiteralValue,printIntrospectionSchema,printSchema,typeFromAST,TypeInfo","sidebarTitle":null,"date":null,"tags":null},"id":"0f778670-df34-5066-b0cc-3ed3373df517"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Validation.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/validation","permalink":"/graphql-js/validation/","next":null,"category":"API 参考","sublinks":"specifiedRules,validate","sidebarTitle":null,"date":null,"tags":null},"id":"5bae073a-9200-5822-b566-ff993a7d1510"}]}],"sourcePath":"src/content/graphql-js/Tutorial-ObjectTypes.md"}},"staticQueryHashes":["1581580458","4162432391"]}