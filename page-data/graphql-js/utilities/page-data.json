{"componentChunkName":"component---src-templates-doc-tsx","path":"/graphql-js/utilities/","result":{"data":{"doc":{"frontmatter":{"title":"graphql/utilities","date":null,"permalink":"/graphql-js/utilities/","byline":null,"guestBio":null,"sublinks":"astFromValue,buildASTSchema,buildClientSchema,buildSchema,introspectionQuery,isValidJSValue,isValidLiteralValue,printIntrospectionSchema,printSchema,typeFromAST,TypeInfo","layout":"docs"},"id":"0f778670-df34-5066-b0cc-3ed3373df517","rawMarkdownBody":"\n`graphql/utilities` 模块包含用于 GraphQL 语言和类型对象的常用计算。你可以从 `graphql/utilities` 模块或是 `graphql` 根模块引入。如下：\n\n```js\nimport { introspectionQuery } from 'graphql'; // ES6\nvar { introspectionQuery } = require('graphql'); // CommonJS\n```\n\n## 概览\n\n**内省（Introspection）**\n\n<ul class=\"apiIndex\">\n  <li>\n    <a href=\"#introspectionquery\">\n      <pre>var introspectionQuery</pre>\n      GraphQL 内省查询，包含足够的信息以重现类型系统。\n    </a>\n  </li>\n  <li>\n    <a href=\"#buildclientschema\">\n      <pre>function buildClientSchema</pre>\n      通过使用 `introspectionQuery` 查询 schema 的结果，生成客户端 schema。\n    </a>\n  </li>\n</ul>\n\n**Schema Language**\n\n<ul class=\"apiIndex\">\n  <li>\n    <a href=\"#buildschema\">\n      <pre>function buildSchema</pre>\n      基于 GraphQL schema language 构建一个 Schema 对象。\n    </a>\n  </li>\n  <li>\n    <a href=\"#printschema\">\n      <pre>function printSchema</pre>\n      使用标准格式打印 schema。\n    </a>\n  </li>\n  <li>\n    <a href=\"#printintrospectionschema\">\n      <pre>function printIntrospectionSchema</pre>\n      使用标准格式打印 schema 的内省特性。\n    </a>\n  </li>\n  <li>\n    <a href=\"#buildastschema\">\n      <pre>function buildASTSchema</pre>\n      基于分析后的 AST Schema 构建 schema。\n    </a>\n  </li>\n  <li>\n    <a href=\"#typefromast\">\n      <pre>function typeFromAST</pre>\n      在 GraphQLSchema 的 AST 中查找一个类型引用。\n    </a>\n  </li>\n  <li>\n    <a href=\"#astfromvalue\">\n      <pre>function astFromValue</pre>\n      基于一个 JavaScript 值生成一个 GraphQL Input Value AST。\n    </a>\n  </li>\n</ul>\n\n**Visitors**\n\n<ul class=\"apiIndex\">\n  <li>\n    <a href=\"#typeinfo\">\n      <pre>class TypeInfo</pre>\n      在 visitor 遍历 AST 时追踪类型和字段定义。\n    </a>\n  </li>\n</ul>\n\n**值验证**\n\n<ul class=\"apiIndex\">\n  <li>\n    <a href=\"#isvalidjsvalue\">\n      <pre>function isValidJSValue</pre>\n      判断一个 JavaScript 值是否是有效的 GraphQL 类型的值。\n    </a>\n  </li>\n  <li>\n    <a href=\"#isvalidliteralvalue\">\n      <pre>function isValidLiteralValue</pre>\n      判断一个 AST 中的字面量值是否是有效的 GraphQL 类型的值。\n    </a>\n  </li>\n</ul>\n\n## 内省（Introspection）\n\n### introspectionQuery\n\n```js\nvar introspectionQuery: string\n```\n\nGraphQL 内省查询，用于查询服务器的内省系统，得到足够的信息以重现服务器类型系统。\n\n### buildClientSchema\n\n```js\nfunction buildClientSchema(\n  introspection: IntrospectionQuery\n): GraphQLSchema\n```\n\n构建客户端工具用的 GraphQLSchema。\n\n假设客户端有运行内省查询的结果，创建并返回了一个 GraphQLSchema 实例，这个实例可以用于所有的 GraphQL.js 工具，但不能用于执行查询，因为内省并不代表有“解析器”、“分析”或者“序列化”函数，或者其他服务器内部机制。\n\n## Schema 表示\n\n### buildSchema\n\n```js\nfunction buildSchema(source: string | Source): GraphQLSchema {\n```\n\n基于 GraphQL schema language 创建一个 GraphQLSchema 对象。schema 将会使用默认解析器。关于 GraphQL schema language 的更多细节，请查看 [schema language 文档](/learn/schema/) 或者 [schema language 速查表](https://wehavefaces.net/graphql-shorthand-notation-cheatsheet-17cd715861b6#.9oztv0a7n)。\n\n### printSchema\n\n```js\nfunction printSchema(schema: GraphQLSchema): string {\n```\n\n使用 Schema Language 格式打印给定的 schema。\n\n### printIntrospectionSchema\n\n```js\nfunction printIntrospectionSchema(schema: GraphQLSchema): string {\n```\n\n使用 Schema Language 格式打印内建的内省 schema。\n\n### buildASTSchema\n\n```js\nfunction buildASTSchema(\n  ast: SchemaDocument,\n  queryTypeName: string,\n  mutationTypeName: ?string\n): GraphQLSchema\n```\n\n这个函数需要一个 schema 文档的 ast（可通过 `graphql/language/schema` 的 `parseSchemaIntoAST` 生成）构建一个 GraphQLSchema 实例，这个实例可以用于所有的 GraphQL.js 工具，但不能用于执行查询，因为内省并不代表有“解析器”、“分析”或者“序列化”函数，或者其他服务器内部机制。\n\n### typeFromAST\n\n```js\nfunction typeFromAST(\n  schema: GraphQLSchema,\n  inputTypeAST: Type\n): ?GraphQLType\n```\n\n给定一个出现在 GraphQL AST 和 Schema 中的类型名称，返回其在 schema 中对应的 GraphQLType。\n\n### astFromValue\n\n```js\nfunction astFromValue(\n  value: any,\n  type: GraphQLInputType\n): ?Value\n```\n\n基于一个 JavaScript 值生成一个 GraphQL Input Value AST。\n\n可选参数，一个 GraphQL 类型，用于消除类型原生值之间的歧义。\n\n## Visitors\n\n### TypeInfo\n\n```js\nclass TypeInfo {\n  constructor(schema: GraphQLSchema)\n  getType(): ?GraphQLOutputType {\n  getParentType(): ?GraphQLCompositeType {\n  getInputType(): ?GraphQLInputType {\n  getFieldDef(): ?GraphQLFieldDefinition {\n  getDirective(): ?GraphQLDirective {\n  getArgument(): ?GraphQLArgument {\n}\n```\n\nTypeInfo 是一个工具类，在 GraphQL 文档 AST 的递归分析中的任何位置上，调用 `enter(node)` 和 `leave(node)` 的时候，可以追踪指定 GraphQL schema 中当前字段和类型定义。\n\n## 值验证\n\n### isValidJSValue\n\n```js\nfunction isValidJSValue(value: any, type: GraphQLInputType): string[]\n```\n\n给定一个 JavaScript 值和 GraphQL 类型，判断这个值是否能被这个类型接受。这个功能在验证运行时查询参数值的时候特别有用。\n\n### isValidLiteralValue\n\n```js\nfunction isValidLiteralValue(\n  type: GraphQLInputType,\n  valueAST: Value\n): string[]\n```\n\n验证器的工具可以判断 AST 字面量值是否是一个给定输入类型的有效值。\n\n注意，这个功能只验证字面量值，并假设变量值是正确的类型。\n"},"nextDoc":{"frontmatter":{"title":"graphql/validation","permalink":"/graphql-js/validation/"}}},"pageContext":{"permalink":"/graphql-js/utilities/","nextPermalink":"/graphql-js/validation/","sideBarData":[{"name":"GraphQL.js 教程","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-GettingStarted.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"GraphQL.js 入门","permalink":"/graphql-js/","next":"/graphql-js/running-an-express-graphql-server/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":"入门","date":null},"id":"3ea95341-77af-5951-9ef8-5bc4fe4702f3"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-ExpressGraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"运行一个 Express GraphQL 服务器","permalink":"/graphql-js/running-an-express-graphql-server/","next":"/graphql-js/graphql-clients/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":"Express + GraphQL","date":null},"id":"e2435b54-e4c8-5a2c-9af0-adfa427bd544"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-GraphQLClients.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"GraphQL 客户端","permalink":"/graphql-js/graphql-clients/","next":"/graphql-js/basic-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null},"id":"e17eec27-8eaf-580b-8a2e-60511c61d6a6"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-BasicTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"基本类型","permalink":"/graphql-js/basic-types/","next":"/graphql-js/passing-arguments/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null},"id":"91c209b9-0f23-5084-9ef2-fceb19838836"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-PassingArguments.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"传递参数","permalink":"/graphql-js/passing-arguments/","next":"/graphql-js/object-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null},"id":"06d221f7-5d5d-59b7-8f92-9e5e073478a4"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-ObjectTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"对象类型","permalink":"/graphql-js/object-types/","next":"/graphql-js/mutations-and-input-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null},"id":"393de606-3de6-50fb-8351-a0c6213c9ad6"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-Mutations.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"变更和输入类型","permalink":"/graphql-js/mutations-and-input-types/","next":"/graphql-js/authentication-and-express-middleware/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null},"id":"1c1fc464-3387-5387-b610-108dba71468b"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-Authentication.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"认证和 Express 中间件","permalink":"/graphql-js/authentication-and-express-middleware/","next":"/graphql-js/constructing-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":"认证 & 中间件","date":null},"id":"f186724a-8cbc-5058-b774-4d864fdb6c06"}]},{"name":"高级指南","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Guides-ConstructingTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"构建类型","permalink":"/graphql-js/constructing-types/","next":"/graphql-js/express-graphql/","category":"高级指南","sublinks":null,"sidebarTitle":null,"date":null},"id":"44d4287b-d8c5-57bf-b565-3b491dc8f538"}]},{"name":"API 参考","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-ExpressGraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"express-graphql","permalink":"/graphql-js/express-graphql/","next":"/graphql-js/graphql/","category":"API 参考","sublinks":"graphqlHTTP","sidebarTitle":null,"date":null},"id":"77088894-f7e4-5eb1-9677-e19ca0ae1b7f"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-GraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql","permalink":"/graphql-js/graphql/","next":"/graphql-js/error/","category":"API 参考","sublinks":"graphql","sidebarTitle":null,"date":null},"id":"6d9f33b2-832f-531a-a36b-88b670ef808b"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Errors.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/error","permalink":"/graphql-js/error/","next":"/graphql-js/execution/","category":"API 参考","sublinks":"formatError,GraphQLError,locatedError,syntaxError","sidebarTitle":null,"date":null},"id":"2fe3a3a9-595e-51db-8358-fb386a98cfaa"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Execution.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/execution","permalink":"/graphql-js/execution/","next":"/graphql-js/language/","category":"API 参考","sublinks":"execute","sidebarTitle":null,"date":null},"id":"b151ae43-a88b-54f5-a4b2-0d84c8e842bf"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Language.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/language","permalink":"/graphql-js/language/","next":"/graphql-js/type/","category":"API 参考","sublinks":"BREAK,getLocation,Kind,lex,parse,parseValue,printSource,visit","sidebarTitle":null,"date":null},"id":"24734828-b4e6-56b2-a97e-a8763e6ffe38"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-TypeSystem.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/type","permalink":"/graphql-js/type/","next":"/graphql-js/utilities/","category":"API 参考","sublinks":"getNamedType,getNullableType,GraphQLBoolean,GraphQLEnumType,GraphQLFloat,GraphQLID,GraphQLInputObjectType,GraphQLInt,GraphQLInterfaceType,GraphQLList,GraphQLNonNull,GraphQLObjectType,GraphQLScalarType,GraphQLSchema,GraphQLString,GraphQLUnionType,isAbstractType,isCompositeType,isInputType,isLeafType,isOutputType","sidebarTitle":null,"date":null},"id":"18ad51d1-7c3d-56fe-aba4-d5dc7a463b0e"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Utilities.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/utilities","permalink":"/graphql-js/utilities/","next":"/graphql-js/validation/","category":"API 参考","sublinks":"astFromValue,buildASTSchema,buildClientSchema,buildSchema,introspectionQuery,isValidJSValue,isValidLiteralValue,printIntrospectionSchema,printSchema,typeFromAST,TypeInfo","sidebarTitle":null,"date":null},"id":"0f778670-df34-5066-b0cc-3ed3373df517"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Validation.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/validation","permalink":"/graphql-js/validation/","next":null,"category":"API 参考","sublinks":"specifiedRules,validate","sidebarTitle":null,"date":null},"id":"5bae073a-9200-5822-b566-ff993a7d1510"}]}],"sourcePath":"src/content/graphql-js/APIReference-Utilities.md"}},"staticQueryHashes":["1581580458"]}