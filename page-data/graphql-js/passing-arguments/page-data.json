{"componentChunkName":"component---src-templates-doc-tsx","path":"/graphql-js/passing-arguments/","result":{"data":{"doc":{"frontmatter":{"title":"传递参数","heroText":null,"date":null,"permalink":"/graphql-js/passing-arguments/","byline":null,"guestBio":null,"sublinks":null,"layout":"docs","tags":null},"id":"06d221f7-5d5d-59b7-8f92-9e5e073478a4","rawMarkdownBody":"\n就像 REST API 一样，在 GraphQL API 中，通常向入口端点传入参数，在 schema language 中定义参数，并自动进行类型检查。每一个参数必须有名字和数据类型。举个例子，在 [基本类型文档](/graphql-js/basic-types/) 中，我们定义了一个名为 `rollThreeDice` 的入口端点：\n\n```javascript\ntype Query {\n  rollThreeDice: [Int]\n}\n```\n\n我们可能想要一个更通用的函数来实现投掷 `numDice` 个的骰子，而不是硬性地设为 \"3\"，并且有一个参数 `numSide` 来表示骰子的面数，我们可以这样在 GraphQL schema language 实现：\n\n```javascript\ntype Query {\n  rollDice(numDice: Int!, numSides: Int): [Int]\n}\n```\n\n `Int!` 中的感叹号表示参数 `numDice` 不能为 null，这意味着我们可以跳过一些数据类型验证来简化服务端的代码。我们可以让 `numSides` 为 null，并假定一个骰子默认有 6 个面。\n\n到现在为止，我们的解析器没有参数。当解析器传入一个 \"args\" 对象作为函数的第一个参数，rollDice 可以被这样实现：\n\n```javascript\nvar root = {\n  rollDice: (args) => {\n    var output = [];\n    for (var i = 0; i < args.numDice; i++) {\n      output.push(1 + Math.floor(Math.random() * (args.numSides || 6)));\n    }\n    return output;\n  }\n};\n```\n\n如果你知道参数的格式是什么样子的，那使用 [ES6 解构](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) 会更加方便，所以 `rollDice` 也可以写成这样：\n\n```javascript\nvar root = {\n  rollDice: ({numDice, numSides}) => {\n    var output = [];\n    for (var i = 0; i < numDice; i++) {\n      output.push(1 + Math.floor(Math.random() * (numSides || 6)));\n    }\n    return output;\n  }\n};\n```\n\n如果你熟悉解构，在 `rollDice` 被定义的时候，就可以清楚地知道参数是什么。\n\n`rollDice` 服务端的 API 的完整代码如下：\n\n```javascript\nvar express = require('express');\nvar { graphqlHTTP } = require('express-graphql');\nvar { buildSchema } = require('graphql');\n\n// 使用 GraphQL schema language 构造一个 schema\nvar schema = buildSchema(`\n  type Query {\n    rollDice(numDice: Int!, numSides: Int): [Int]\n  }\n`);\n\n// root 为每个端点入口 API 提供一个解析器\nvar root = {\n  rollDice: ({numDice, numSides}) => {\n    var output = [];\n    for (var i = 0; i < numDice; i++) {\n      output.push(1 + Math.floor(Math.random() * (numSides || 6)));\n    }\n    return output;\n  }\n};\n\nvar app = express();\napp.use('/graphql', graphqlHTTP({\n  schema: schema,\n  rootValue: root,\n  graphiql: true,\n}));\napp.listen(4000);\nconsole.log('Running a GraphQL API server at localhost:4000/graphql');\n```\n\n当你调用这个 API 时，你需要按名称传入每个参数，对于上面的服务器代码，你可以通过发起这样的 GraphQL 查询，来投掷 3 个六面的骰子。\n\n```javascript\n{\n  rollDice(numDice: 3, numSides: 6)\n}\n```\n\n如果你使用 `node server.js` 运行这段代码，你可以浏览 http://localhost:4000/graphql 来尝试这个 API。\n\n当你在代码中传递参数时，最好避免自己构建整个查询语句。你可以使用 `$` 语法来定义一条查询中的变量，并将变量作为单独映射来传递。\n\n举个例子，请求上面服务器代码的部分 JavaScript 代码如下：\n\n```javascript\nvar dice = 3;\nvar sides = 6;\nvar query = `query RollDice($dice: Int!, $sides: Int) {\n  rollDice(numDice: $dice, numSides: $sides)\n}`;\n\nfetch('/graphql', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n  body: JSON.stringify({\n    query,\n    variables: { dice, sides },\n  })\n})\n  .then(r => r.json())\n  .then(data => console.log('data returned:', data));\n```\n\n使用 `$dice` 和 `$sides` 作为 GraphQL 中的变量，我们无需在客户端对它们进行转义。\n\n通过基本类型和参数传递，你可以定义任意你\"能够\"在 REST API 中定义的内容。但 GraphQL 支持更强大的查询。如果你学习了 [定义你自己的对象类型](/graphql-js/object-types/)，你可以用单个 API 调用来代替多个 API 调用。\n"},"nextDoc":{"frontmatter":{"title":"对象类型","permalink":"/graphql-js/object-types/"}}},"pageContext":{"permalink":"/graphql-js/passing-arguments/","nextPermalink":"/graphql-js/object-types/","sideBarData":[{"name":"GraphQL.js 教程","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-GettingStarted.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"GraphQL.js 入门","permalink":"/graphql-js/","next":"/graphql-js/running-an-express-graphql-server/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":"入门","date":null,"tags":null},"id":"3ea95341-77af-5951-9ef8-5bc4fe4702f3"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-ExpressGraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"运行一个 Express GraphQL 服务器","permalink":"/graphql-js/running-an-express-graphql-server/","next":"/graphql-js/graphql-clients/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":"Express + GraphQL","date":null,"tags":null},"id":"e2435b54-e4c8-5a2c-9af0-adfa427bd544"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-GraphQLClients.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"GraphQL 客户端","permalink":"/graphql-js/graphql-clients/","next":"/graphql-js/basic-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"e17eec27-8eaf-580b-8a2e-60511c61d6a6"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-BasicTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"基本类型","permalink":"/graphql-js/basic-types/","next":"/graphql-js/passing-arguments/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"91c209b9-0f23-5084-9ef2-fceb19838836"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-PassingArguments.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"传递参数","permalink":"/graphql-js/passing-arguments/","next":"/graphql-js/object-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"06d221f7-5d5d-59b7-8f92-9e5e073478a4"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-ObjectTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"对象类型","permalink":"/graphql-js/object-types/","next":"/graphql-js/mutations-and-input-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"393de606-3de6-50fb-8351-a0c6213c9ad6"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-Mutations.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"变更和输入类型","permalink":"/graphql-js/mutations-and-input-types/","next":"/graphql-js/authentication-and-express-middleware/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"1c1fc464-3387-5387-b610-108dba71468b"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-Authentication.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"认证和 Express 中间件","permalink":"/graphql-js/authentication-and-express-middleware/","next":"/graphql-js/constructing-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":"认证 & 中间件","date":null,"tags":null},"id":"f186724a-8cbc-5058-b774-4d864fdb6c06"}]},{"name":"高级指南","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Guides-ConstructingTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"构建类型","permalink":"/graphql-js/constructing-types/","next":"/graphql-js/express-graphql/","category":"高级指南","sublinks":null,"sidebarTitle":null,"date":null,"tags":null},"id":"44d4287b-d8c5-57bf-b565-3b491dc8f538"}]},{"name":"API 参考","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-ExpressGraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"express-graphql","permalink":"/graphql-js/express-graphql/","next":"/graphql-js/graphql/","category":"API 参考","sublinks":"graphqlHTTP","sidebarTitle":null,"date":null,"tags":null},"id":"77088894-f7e4-5eb1-9677-e19ca0ae1b7f"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-GraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql","permalink":"/graphql-js/graphql/","next":"/graphql-js/error/","category":"API 参考","sublinks":"graphql","sidebarTitle":null,"date":null,"tags":null},"id":"6d9f33b2-832f-531a-a36b-88b670ef808b"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Errors.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/error","permalink":"/graphql-js/error/","next":"/graphql-js/execution/","category":"API 参考","sublinks":"formatError,GraphQLError,locatedError,syntaxError","sidebarTitle":null,"date":null,"tags":null},"id":"2fe3a3a9-595e-51db-8358-fb386a98cfaa"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Execution.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/execution","permalink":"/graphql-js/execution/","next":"/graphql-js/language/","category":"API 参考","sublinks":"execute","sidebarTitle":null,"date":null,"tags":null},"id":"b151ae43-a88b-54f5-a4b2-0d84c8e842bf"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Language.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/language","permalink":"/graphql-js/language/","next":"/graphql-js/type/","category":"API 参考","sublinks":"BREAK,getLocation,Kind,lex,parse,parseValue,printSource,visit","sidebarTitle":null,"date":null,"tags":null},"id":"24734828-b4e6-56b2-a97e-a8763e6ffe38"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-TypeSystem.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/type","permalink":"/graphql-js/type/","next":"/graphql-js/utilities/","category":"API 参考","sublinks":"getNamedType,getNullableType,GraphQLBoolean,GraphQLEnumType,GraphQLFloat,GraphQLID,GraphQLInputObjectType,GraphQLInt,GraphQLInterfaceType,GraphQLList,GraphQLNonNull,GraphQLObjectType,GraphQLScalarType,GraphQLSchema,GraphQLString,GraphQLUnionType,isAbstractType,isCompositeType,isInputType,isLeafType,isOutputType","sidebarTitle":null,"date":null,"tags":null},"id":"18ad51d1-7c3d-56fe-aba4-d5dc7a463b0e"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Utilities.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/utilities","permalink":"/graphql-js/utilities/","next":"/graphql-js/validation/","category":"API 参考","sublinks":"astFromValue,buildASTSchema,buildClientSchema,buildSchema,introspectionQuery,isValidJSValue,isValidLiteralValue,printIntrospectionSchema,printSchema,typeFromAST,TypeInfo","sidebarTitle":null,"date":null,"tags":null},"id":"0f778670-df34-5066-b0cc-3ed3373df517"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Validation.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/validation","permalink":"/graphql-js/validation/","next":null,"category":"API 参考","sublinks":"specifiedRules,validate","sidebarTitle":null,"date":null,"tags":null},"id":"5bae073a-9200-5822-b566-ff993a7d1510"}]}],"sourcePath":"src/content/graphql-js/Tutorial-PassingArguments.md"}},"staticQueryHashes":["1581580458","4162432391"]}