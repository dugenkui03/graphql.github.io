{"componentChunkName":"component---src-templates-doc-tsx","path":"/graphql-js/mutations-and-input-types/","result":{"data":{"doc":{"frontmatter":{"title":"变更和输入类型","date":null,"permalink":"/graphql-js/mutations-and-input-types/","byline":null,"guestBio":null,"sublinks":null,"layout":"docs"},"id":"1c1fc464-3387-5387-b610-108dba71468b","rawMarkdownBody":"\n假设你有一个 API 入口端点用于修改数据，像是向数据库中插入数据或修改已有数据，在 GraphQL 中，你应该将这个入口端点做为 `Mutation` 而不是 `Query`。这十分简单，只需要将这个入口端点做成 `Mutation` 类型顶层的一部份即可。\n\n假设我们有一个“今日消息”服务器，每个人都可以在上面更新“今日消息”，或者阅读当前的“今日消息”。这个服务器的 GraphQL schema 很简单：\n\n```graphql\ntype Mutation {\n  setMessage(message: String): String\n}\n\ntype Query {\n  getMessage: String\n}\n```\n\n将一个变更（mutation）映射到数据库的 create 或者 update 操作会很方便，如 `setMessage`，其会返回数据库所存的数据。这样一来，你修改了服务端的数据，客户端就能获知这个修改。\n\n不论是变更还是查询，根级解析器都能够处理，因此实现 schema 的 root 可以如下：\n\n```javascript\nvar fakeDatabase = {};\nvar root = {\n  setMessage: ({message}) => {\n    fakeDatabase.message = message;\n    return message;\n  },\n  getMessage: () => {\n    return fakeDatabase.message;\n  }\n};\n```\n\n实现变更不需要更多的东西。但是更多情况下，你会发现有多个不同的变更接受相同的输入参数。常见的案例是在数据库中创建对象和更新对象的接口通常会接受一样的参数。你可以使用“输入类型”来简化 schema，使用 `input` 关键字而不是 `type` 关键字即可。\n\n例如，我们每天有多条而不是一条消息，在数据库中以 `id` 字段为索引，每条消息都有一个 `content` 和 `author` 字符串。我们需要一个变更 API，用于创建新消息和更新旧消息。我们可以使用这个 schema：\n\n```graphql\ninput MessageInput {\n  content: String\n  author: String\n}\n\ntype Message {\n  id: ID!\n  content: String\n  author: String\n}\n\ntype Query {\n  getMessage(id: ID!): Message\n}\n\ntype Mutation {\n  createMessage(input: MessageInput): Message\n  updateMessage(id: ID!, input: MessageInput): Message\n}\n```\n\n此处的变更返回一个 `Message` 类型，因此客户端通过变更的请求就能获取到新修改的 `Message` 的信息。\n\n输入类型的字段不能是其他对象类型，只能是基础标量类型、列表类型或者其他输入类型。\n\n一个有用的惯例是在 schema 的末尾使用 `Input` 命名输入类型，因为对于单一概念对象，通常你想要输入和输出类型之间只有略微不同。\n\n下面的可运行代码实现了上述 schema，数据保存在内存中：\n\n```javascript\nvar express = require('express');\nvar { graphqlHTTP } = require('express-graphql');\nvar { buildSchema } = require('graphql');\n\n// 使用 GraphQL schema language 构建 schema\nvar schema = buildSchema(`\n  input MessageInput {\n    content: String\n    author: String\n  }\n\n  type Message {\n    id: ID!\n    content: String\n    author: String\n  }\n\n  type Query {\n    getMessage(id: ID!): Message\n  }\n\n  type Mutation {\n    createMessage(input: MessageInput): Message\n    updateMessage(id: ID!, input: MessageInput): Message\n  }\n`);\n\n// 如果 Message 拥有复杂字段，我们把它们放在这个对象里面。\nclass Message {\n  constructor(id, {content, author}) {\n    this.id = id;\n    this.content = content;\n    this.author = author;\n  }\n}\n\n// 映射 username 到 content\nvar fakeDatabase = {};\n\nvar root = {\n  getMessage: ({id}) => {\n    if (!fakeDatabase[id]) {\n      throw new Error('no message exists with id ' + id);\n    }\n    return new Message(id, fakeDatabase[id]);\n  },\n  createMessage: ({input}) => {\n    // Create a random id for our \"database\".\n    var id = require('crypto').randomBytes(10).toString('hex');\n\n    fakeDatabase[id] = input;\n    return new Message(id, input);\n  },\n  updateMessage: ({id, input}) => {\n    if (!fakeDatabase[id]) {\n      throw new Error('no message exists with id ' + id);\n    }\n    // This replaces all old data, but some apps might want partial update.\n    fakeDatabase[id] = input;\n    return new Message(id, input);\n  },\n};\n\nvar app = express();\napp.use('/graphql', graphqlHTTP({\n  schema: schema,\n  rootValue: root,\n  graphiql: true,\n}));\napp.listen(4000, () => {\n  console.log('Running a GraphQL API server at localhost:4000/graphql');\n});\n\n```\n\n你必须在你的 GraphQL 查询前面使用关键字 `mutation` 才能调用变更，并将数据作为 JSON 对象以传入输入类型。如果用上面定义的服务器，你可以使用以下操作创建一条消息并返回这条消息的 `id`：\n\n```graphql\nmutation {\n  createMessage(input: {\n    author: \"andy\",\n    content: \"hope is a good thing\",\n  }) {\n    id\n  }\n}\n```\n\n你也可以像查询一样使用变量来简化变更的客户端逻辑。如下调用服务端变更的 JavaScript 代码：\n\n```javascript\nvar author = 'andy';\nvar content = 'hope is a good thing';\nvar query = `mutation CreateMessage($input: MessageInput) {\n  createMessage(input: $input) {\n    id\n  }\n}`;\n\nfetch('/graphql', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n  body: JSON.stringify({\n    query,\n    variables: {\n      input: {\n        author,\n        content,\n      }\n    }\n  })\n})\n  .then(r => r.json())\n  .then(data => console.log('data returned:', data));\n```\n\n一个十分特殊的变更类型是“改变用户”，譬如注册新用户。除了使用 GraphQL 变更来实现这个功能之外，在学完 [GraphQL 认证和 Express 中间件](/graphql-js/authentication-and-express-middleware/) 之后你还能使用现有库来实现。\n"},"nextDoc":{"frontmatter":{"title":"认证和 Express 中间件","permalink":"/graphql-js/authentication-and-express-middleware/"}}},"pageContext":{"permalink":"/graphql-js/mutations-and-input-types/","nextPermalink":"/graphql-js/authentication-and-express-middleware/","sideBarData":[{"name":"GraphQL.js 教程","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-GettingStarted.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"GraphQL.js 入门","permalink":"/graphql-js/","next":"/graphql-js/running-an-express-graphql-server/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":"入门","date":null},"id":"3ea95341-77af-5951-9ef8-5bc4fe4702f3"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-ExpressGraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"运行一个 Express GraphQL 服务器","permalink":"/graphql-js/running-an-express-graphql-server/","next":"/graphql-js/graphql-clients/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":"Express + GraphQL","date":null},"id":"e2435b54-e4c8-5a2c-9af0-adfa427bd544"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-GraphQLClients.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"GraphQL 客户端","permalink":"/graphql-js/graphql-clients/","next":"/graphql-js/basic-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null},"id":"e17eec27-8eaf-580b-8a2e-60511c61d6a6"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-BasicTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"基本类型","permalink":"/graphql-js/basic-types/","next":"/graphql-js/passing-arguments/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null},"id":"91c209b9-0f23-5084-9ef2-fceb19838836"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-PassingArguments.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"传递参数","permalink":"/graphql-js/passing-arguments/","next":"/graphql-js/object-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null},"id":"06d221f7-5d5d-59b7-8f92-9e5e073478a4"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-ObjectTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"对象类型","permalink":"/graphql-js/object-types/","next":"/graphql-js/mutations-and-input-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null},"id":"393de606-3de6-50fb-8351-a0c6213c9ad6"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-Mutations.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"变更和输入类型","permalink":"/graphql-js/mutations-and-input-types/","next":"/graphql-js/authentication-and-express-middleware/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null},"id":"1c1fc464-3387-5387-b610-108dba71468b"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-Authentication.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"认证和 Express 中间件","permalink":"/graphql-js/authentication-and-express-middleware/","next":"/graphql-js/constructing-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":"认证 & 中间件","date":null},"id":"f186724a-8cbc-5058-b774-4d864fdb6c06"}]},{"name":"高级指南","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Guides-ConstructingTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"构建类型","permalink":"/graphql-js/constructing-types/","next":"/graphql-js/express-graphql/","category":"高级指南","sublinks":null,"sidebarTitle":null,"date":null},"id":"44d4287b-d8c5-57bf-b565-3b491dc8f538"}]},{"name":"API 参考","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-ExpressGraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"express-graphql","permalink":"/graphql-js/express-graphql/","next":"/graphql-js/graphql/","category":"API 参考","sublinks":"graphqlHTTP","sidebarTitle":null,"date":null},"id":"77088894-f7e4-5eb1-9677-e19ca0ae1b7f"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-GraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql","permalink":"/graphql-js/graphql/","next":"/graphql-js/error/","category":"API 参考","sublinks":"graphql","sidebarTitle":null,"date":null},"id":"6d9f33b2-832f-531a-a36b-88b670ef808b"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Errors.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/error","permalink":"/graphql-js/error/","next":"/graphql-js/execution/","category":"API 参考","sublinks":"formatError,GraphQLError,locatedError,syntaxError","sidebarTitle":null,"date":null},"id":"2fe3a3a9-595e-51db-8358-fb386a98cfaa"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Execution.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/execution","permalink":"/graphql-js/execution/","next":"/graphql-js/language/","category":"API 参考","sublinks":"execute","sidebarTitle":null,"date":null},"id":"b151ae43-a88b-54f5-a4b2-0d84c8e842bf"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Language.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/language","permalink":"/graphql-js/language/","next":"/graphql-js/type/","category":"API 参考","sublinks":"BREAK,getLocation,Kind,lex,parse,parseValue,printSource,visit","sidebarTitle":null,"date":null},"id":"24734828-b4e6-56b2-a97e-a8763e6ffe38"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-TypeSystem.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/type","permalink":"/graphql-js/type/","next":"/graphql-js/utilities/","category":"API 参考","sublinks":"getNamedType,getNullableType,GraphQLBoolean,GraphQLEnumType,GraphQLFloat,GraphQLID,GraphQLInputObjectType,GraphQLInt,GraphQLInterfaceType,GraphQLList,GraphQLNonNull,GraphQLObjectType,GraphQLScalarType,GraphQLSchema,GraphQLString,GraphQLUnionType,isAbstractType,isCompositeType,isInputType,isLeafType,isOutputType","sidebarTitle":null,"date":null},"id":"18ad51d1-7c3d-56fe-aba4-d5dc7a463b0e"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Utilities.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/utilities","permalink":"/graphql-js/utilities/","next":"/graphql-js/validation/","category":"API 参考","sublinks":"astFromValue,buildASTSchema,buildClientSchema,buildSchema,introspectionQuery,isValidJSValue,isValidLiteralValue,printIntrospectionSchema,printSchema,typeFromAST,TypeInfo","sidebarTitle":null,"date":null},"id":"0f778670-df34-5066-b0cc-3ed3373df517"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Validation.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/validation","permalink":"/graphql-js/validation/","next":null,"category":"API 参考","sublinks":"specifiedRules,validate","sidebarTitle":null,"date":null},"id":"5bae073a-9200-5822-b566-ff993a7d1510"}]}],"sourcePath":"src/content/graphql-js/Tutorial-Mutations.md"}},"staticQueryHashes":["1581580458"]}