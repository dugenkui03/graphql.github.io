{"componentChunkName":"component---src-templates-doc-tsx","path":"/graphql-js/type/","result":{"data":{"doc":{"frontmatter":{"title":"graphql/type","date":null,"permalink":"/graphql-js/type/","byline":null,"guestBio":null,"sublinks":"getNamedType,getNullableType,GraphQLBoolean,GraphQLEnumType,GraphQLFloat,GraphQLID,GraphQLInputObjectType,GraphQLInt,GraphQLInterfaceType,GraphQLList,GraphQLNonNull,GraphQLObjectType,GraphQLScalarType,GraphQLSchema,GraphQLString,GraphQLUnionType,isAbstractType,isCompositeType,isInputType,isLeafType,isOutputType","layout":"docs"},"id":"18ad51d1-7c3d-56fe-aba4-d5dc7a463b0e","rawMarkdownBody":"\n`graphql/type` 模块的职责为定义 GraphQL 的类型和 schema。你可以从 `graphql/type` 模块或是根模块 `graphql` 引入。例如：\n\n```js\nimport { GraphQLSchema } from 'graphql'; // ES6\nvar { GraphQLSchema } = require('graphql'); // CommonJS\n```\n\n## 概览\n\n**Schema**\n\n<ul class=\"apiIndex\">\n  <li>\n    <a href=\"#graphqlschema\">\n      <pre>class GraphQLSchema</pre>\n      描述一个 GraphQL 服务器的功能。\n    </a>\n  </li>\n</ul>\n\n**定义（Definitions）**\n\n<ul class=\"apiIndex\">\n  <li>\n    <a href=\"#graphqlscalartype\">\n      <pre>class GraphQLScalarType</pre>\n      GraphQL 中表示标量的类型。\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqlobjecttype\">\n      <pre>class GraphQLObjectType</pre>\n      GraphQL 中包含字段的对象类型。\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqlinterfacetype\">\n      <pre>class GraphQLInterfaceType</pre>\n      GraphQL 中的接口类型，定义了实现该接口需要持有的字段。\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqluniontype\">\n      <pre>class GraphQLUnionType</pre>\n      GraphQL 中的联合类型，定义一系列有效类型的合集。\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqlenumtype\">\n      <pre>class GraphQLEnumType</pre>\n      GraphQL 中的枚举类型，定义一系列有效值的合集。\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqlinputobjecttype\">\n      <pre>class GraphQLInputObjectType</pre>\n      GraphQL 中的输入对象类型，表示一系列结构化的输入参数。\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqllist\">\n      <pre>class GraphQLList</pre>\n      类型包装器，表示被包装类型的列表。\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqlnonnull\">\n      <pre>class GraphQLNonNull</pre>\n      类型包装器，表示被包装类型取值非空的版本。\n    </a>\n  </li>\n</ul>\n\n**谓词函数（Predicates）**\n\n<ul class=\"apiIndex\">\n  <li>\n    <a href=\"#isinputtype\">\n      <pre>function isInputType</pre>\n      判断某类型是否可以作为字段查询参数和指令的输入类型。\n    </a>\n  </li>\n  <li>\n    <a href=\"#isoutputtype\">\n      <pre>function isOutputType</pre>\n      判断某类型是否可以作为字段查询结果值的类型。\n  </li>\n  <li>\n    <a href=\"#isleaftype\">\n      <pre>function isLeafType</pre>\n      判断某类型是否可以作为响应结果叶节点值的类型。\n    </a>\n  </li>\n  <li>\n    <a href=\"#iscompositetype\">\n      <pre>function isCompositeType</pre>\n      判断某类型是否可以作为一个选择集的父级上下文。\n    </a>\n  </li>\n  <li>\n    <a href=\"#isabstracttype\">\n      <pre>function isAbstractType</pre>\n      判断某类型是否为对象类型的组合。\n    </a>\n  </li>\n</ul>\n\n**去包装修饰器（Un-modifiers）**\n\n<ul class=\"apiIndex\">\n  <li>\n    <a href=\"#getnullabletype\">\n      <pre>function getNullableType</pre>\n      去掉非空包装，返回原先的类型。\n    </a>\n  </li>\n  <li>\n    <a href=\"#getnamedtype\">\n      <pre>function getNamedType</pre>\n      去掉非空和列表包装，返回原先的类型。\n    </a>\n  </li>\n</ul>\n\n**标量类型（Scalars）**\n\n<ul class=\"apiIndex\">\n  <li>\n    <a href=\"#graphqlint\">\n      <pre>var GraphQLInt</pre>\n      表示整数的标量类型。\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqlfloat\">\n      <pre>var GraphQLFloat</pre>\n      表示浮点数的标量类型。\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqlstring\">\n      <pre>var GraphQLString</pre>\n      表示字符串的标量类型。\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqlboolean\">\n      <pre>var GraphQLBoolean</pre>\n      表示布尔值的标量类型。\n    </a>\n  </li>\n  <li>\n    <a href=\"#graphqlid\">\n      <pre>var GraphQLID</pre>\n      表示 ID 的标量类型。\n    </a>\n  </li>\n</ul>\n\n## Schema\n\n### GraphQLSchema\n\n```js\nclass GraphQLSchema {\n  constructor(config: GraphQLSchemaConfig)\n}\n\ntype GraphQLSchemaConfig = {\n  query: GraphQLObjectType;\n  mutation?: ?GraphQLObjectType;\n}\n```\n\n使用指定的 query 及 mutation（可选）的根类型来创建 Schema。生成的 Schema 可用于之后的验证器和执行器。\n\n#### 示例\n\n```js\nvar MyAppSchema = new GraphQLSchema({\n  query: MyAppQueryRootType\n  mutation: MyAppMutationRootType\n});\n```\n\n## 定义（Definitions）\n\n### GraphQLScalarType\n\n```js\nclass GraphQLScalarType<InternalType> {\n  constructor(config: GraphQLScalarTypeConfig<InternalType>)\n}\n\ntype GraphQLScalarTypeConfig<InternalType> = {\n  name: string;\n  description?: ?string;\n  serialize: (value: mixed) => ?InternalType;\n  parseValue?: (value: mixed) => ?InternalType;\n  parseLiteral?: (valueAST: Value) => ?InternalType;\n}\n```\n\n所有请求的叶节点值和输入值都必须是标量（或枚举）类型。构建标量类型 `GraphQLScalarType` 时，需要指定 `name` 以及一系列用于确保值的有效性的序列化函数。\n\n#### 示例\n\n```js\nvar OddType = new GraphQLScalarType({\n  name: 'Odd',\n  serialize: oddValue,\n  parseValue: oddValue,\n  parseLiteral(ast) {\n    if (ast.kind === Kind.INT) {\n      return oddValue(parseInt(ast.value, 10));\n    }\n    return null;\n  }\n});\n\nfunction oddValue(value) {\n  return value % 2 === 1 ? value : null;\n}\n```\n\n### GraphQLObjectType\n\n```js\nclass GraphQLObjectType {\n  constructor(config: GraphQLObjectTypeConfig)\n}\n\ntype GraphQLObjectTypeConfig = {\n  name: string;\n  interfaces?: GraphQLInterfacesThunk | Array<GraphQLInterfaceType>;\n  fields: GraphQLFieldConfigMapThunk | GraphQLFieldConfigMap;\n  isTypeOf?: (value: any, info?: GraphQLResolveInfo) => boolean;\n  description?: ?string\n}\n\ntype GraphQLInterfacesThunk = () => Array<GraphQLInterfaceType>;\n\ntype GraphQLFieldConfigMapThunk = () => GraphQLFieldConfigMap;\n\n// 关于解析器函数，请参见下文\ntype GraphQLFieldResolveFn = (\n  source?: any,\n  args?: {[argName: string]: any},\n  context?: any,\n  info?: GraphQLResolveInfo\n) => any\n\ntype GraphQLResolveInfo = {\n  fieldName: string,\n  fieldNodes: Array<Field>,\n  returnType: GraphQLOutputType,\n  parentType: GraphQLCompositeType,\n  schema: GraphQLSchema,\n  fragments: { [fragmentName: string]: FragmentDefinition },\n  rootValue: any,\n  operation: OperationDefinition,\n  variableValues: { [variableName: string]: any },\n}\n\ntype GraphQLFieldConfig = {\n  type: GraphQLOutputType;\n  args?: GraphQLFieldConfigArgumentMap;\n  resolve?: GraphQLFieldResolveFn;\n  deprecationReason?: string;\n  description?: ?string;\n}\n\ntype GraphQLFieldConfigArgumentMap = {\n  [argName: string]: GraphQLArgumentConfig;\n};\n\ntype GraphQLArgumentConfig = {\n  type: GraphQLInputType;\n  defaultValue?: any;\n  description?: ?string;\n}\n\ntype GraphQLFieldConfigMap = {\n  [fieldName: string]: GraphQLFieldConfig;\n};\n```\n\n几乎所有你要去定义的 GraphQL 类型都会是 Object 类型。Object 类型有自己的名字 `name`，但最重要的是它描述了它有哪些字段。\n\n当两个类型需要相互指代，或是某类型的某一字段类型为其自身，你可以使用函数表达式（也可称为闭包或是 thunk）来实现字段类型的延后求值。\n\n注意，解析器函数提供 `source` 对象作为第一个参数。但是，如果未提供解析器函数，则将在 `source` 中查找与该字段名称相同的方法来作为默认的解析器。如果找到，则使用 `(args, context, info)` 调用该方法。由于它是一个在 `source` 上的方法，因此始终可以使用 `this` 来引用值。\n\n#### 示例\n\n```js\nvar AddressType = new GraphQLObjectType({\n  name: 'Address',\n  fields: {\n    street: { type: GraphQLString },\n    number: { type: GraphQLInt },\n    formatted: {\n      type: GraphQLString,\n      resolve(obj) {\n        return obj.number + ' ' + obj.street\n      }\n    }\n  }\n});\n\nvar PersonType = new GraphQLObjectType({\n  name: 'Person',\n  fields: () => ({\n    name: { type: GraphQLString },\n    bestFriend: { type: PersonType },\n  })\n});\n```\n\n### GraphQLInterfaceType\n\n```js\nclass GraphQLInterfaceType {\n  constructor(config: GraphQLInterfaceTypeConfig)\n}\n\ntype GraphQLInterfaceTypeConfig = {\n  name: string,\n  fields: GraphQLFieldConfigMapThunk | GraphQLFieldConfigMap,\n  resolveType?: (value: any, info?: GraphQLResolveInfo) => ?GraphQLObjectType,\n  description?: ?string\n};\n```\n\n当一个字段可能返回多种不同类型时，可使用接口类型 `GraphQLInterfaceType`，来描述所有可能类型必须有的共同字段，也可指定 `resolveType` 函数来决定该字段实际被解析时为何种类型。\n\n#### 示例\n\n```js\nvar EntityType = new GraphQLInterfaceType({\n  name: 'Entity',\n  fields: {\n    name: { type: GraphQLString }\n  }\n});\n```\n\n### GraphQLUnionType\n\n```js\nclass GraphQLUnionType {\n  constructor(config: GraphQLUnionTypeConfig)\n}\n\ntype GraphQLUnionTypeConfig = {\n  name: string,\n  types: GraphQLObjectsThunk | Array<GraphQLObjectType>,\n  resolveType?: (value: any, info?: GraphQLResolveInfo) => ?GraphQLObjectType;\n  description?: ?string;\n};\n\ntype GraphQLObjectsThunk = () => Array<GraphQLObjectType>;\n```\n\n当一个字段可以返回多种不同类型时，可使用联合类型 `GraphQLUnionType` 描述所有可能类型，也可指定 `resolveType` 函数来决定该字段实际被解析时为何种类型。\n\n### 示例\n\n```js\nvar PetType = new GraphQLUnionType({\n  name: 'Pet',\n  types: [ DogType, CatType ],\n  resolveType(value) {\n    if (value instanceof Dog) {\n      return DogType;\n    }\n    if (value instanceof Cat) {\n      return CatType;\n    }\n  }\n});\n```\n\n### GraphQLEnumType\n\n```js\nclass GraphQLEnumType {\n  constructor(config: GraphQLEnumTypeConfig)\n}\n\ntype GraphQLEnumTypeConfig = {\n  name: string;\n  values: GraphQLEnumValueConfigMap;\n  description?: ?string;\n}\n\ntype GraphQLEnumValueConfigMap = {\n  [valueName: string]: GraphQLEnumValueConfig;\n};\n\ntype GraphQLEnumValueConfig = {\n  value?: any;\n  deprecationReason?: string;\n  description?: ?string;\n}\n\ntype GraphQLEnumValueDefinition = {\n  name: string;\n  value?: any;\n  deprecationReason?: string;\n  description?: ?string;\n}\n```\n\n一些请求的叶节点值和输入值为枚举类型 `GraphQLEnumType`。GraphQL 会将枚举值序列化为字符串，但在内部使用时，枚举值可以用任何类型来表示，一般用整型来表示。\n\n备注：如果在定义时没有指定 `value`，在内部使用时会用枚举类型的 `name` 作为其值。\n\n#### 示例\n\n```js\nvar RGBType = new GraphQLEnumType({\n  name: 'RGB',\n  values: {\n    RED: { value: 0 },\n    GREEN: { value: 1 },\n    BLUE: { value: 2 }\n  }\n});\n```\n\n### GraphQLInputObjectType\n\n```js\nclass GraphQLInputObjectType {\n  constructor(config: GraphQLInputObjectConfig)\n}\n\ntype GraphQLInputObjectConfig = {\n  name: string;\n  fields: GraphQLInputObjectConfigFieldMapThunk | GraphQLInputObjectConfigFieldMap;\n  description?: ?string;\n}\n\ntype GraphQLInputObjectConfigFieldMapThunk = () => GraphQLInputObjectConfigFieldMap;\n\ntype GraphQLInputObjectFieldConfig = {\n  type: GraphQLInputType;\n  defaultValue?: any;\n  description?: ?string;\n}\n\ntype GraphQLInputObjectConfigFieldMap = {\n  [fieldName: string]: GraphQLInputObjectFieldConfig;\n};\n\ntype GraphQLInputObjectField = {\n  name: string;\n  type: GraphQLInputType;\n  defaultValue?: any;\n  description?: ?string;\n}\n\ntype GraphQLInputObjectFieldMap = {\n  [fieldName: string]: GraphQLInputObjectField;\n};\n```\n\n一个输入对象类型定义了一组可以作为某字段查询参数的字段。\n\n使用 `NonNull` 确保查询一定会有返回值。\n\n#### 示例\n\n```js\nvar GeoPoint = new GraphQLInputObjectType({\n  name: 'GeoPoint',\n  fields: {\n    lat: { type: new GraphQLNonNull(GraphQLFloat) },\n    lon: { type: new GraphQLNonNull(GraphQLFloat) },\n    alt: { type: GraphQLFloat, defaultValue: 0 },\n  }\n});\n```\n\n### GraphQLList\n\n```js\nclass GraphQLList {\n  constructor(type: GraphQLType)\n}\n```\n\n列表类型是一种类型标记，用来包装另一个类型。在定义一个对象类型的字段时，经常出现。\n\n#### 示例\n\n```js\nvar PersonType = new GraphQLObjectType({\n  name: 'Person',\n  fields: () => ({\n    parents: { type: new GraphQLList(PersonType) },\n    children: { type: new GraphQLList(PersonType) },\n  })\n});\n```\n\n### GraphQLNonNull\n\n```js\nclass GraphQLNonNull {\n  constructor(type: GraphQLType)\n}\n```\n\n非空（non-null）类型是一种类型标记，用来包装另一个类型。强制其取值不能为 null，在某次请求时如果出现 null 值便会抛出错误。用于标记你确信肯定非空的字段时很有用，例如通常来说，数据库里某条数据的 id 字段都不会为空。\n\n#### 示例\n\n```js\nvar RowType = new GraphQLObjectType({\n  name: 'Row',\n  fields: () => ({\n    id: { type: new GraphQLNonNull(String) },\n  })\n});\n```\n\n## 谓词函数（Predicates）\n\n### isInputType\n\n```js\nfunction isInputType(type: ?GraphQLType): boolean\n```\n\n判断某类型是否可以作为字段查询参数和指令的输入类型。\n\n### isOutputType\n\n```js\nfunction isOutputType(type: ?GraphQLType): boolean\n```\n\n判断某类型是否可以作为字段查询结果值的类型。\n\n### isLeafType\n\n```js\nfunction isLeafType(type: ?GraphQLType): boolean\n```\n\n判断某类型是否可以作为响应结果叶节点值的类型。\n\n### isCompositeType\n\n```js\nfunction isCompositeType(type: ?GraphQLType): boolean\n```\n\n判断某类型是否可以作为一个选择集的父级上下文。\n\n### isAbstractType\n\n```js\nfunction isAbstractType(type: ?GraphQLType): boolean\n```\n\n判断某类型是否为对象类型的组合。\n\n## 去包装修饰器（Un-modifiers）\n\n### getNullableType\n\n```js\nfunction getNullableType(type: ?GraphQLType): ?GraphQLNullableType\n```\n\n若该类型是非空类型的包装结果，该函数会去掉包装，返回原先的类型。\n\n### getNamedType\n\n```js\nfunction getNamedType(type: ?GraphQLType): ?GraphQLNamedType\n```\n\n若该类型是非空类型或列表类型的包装结果，该函数会去掉包装，返回原先的类型。\n\n## 标量类型（Scalars）\n\n### GraphQLInt\n\n```js\nvar GraphQLInt: GraphQLScalarType;\n```\n\n一个代表整型数的 `GraphQLScalarType`。\n\n### GraphQLFloat\n\n```js\nvar GraphQLFloat: GraphQLScalarType;\n```\n\n一个代表浮点数的 `GraphQLScalarType`。\n\n### GraphQLString\n\n```js\nvar GraphQLString: GraphQLScalarType;\n```\n\n一个代表字符串的 `GraphQLScalarType`。\n\n### GraphQLBoolean\n\n```js\nvar GraphQLBoolean: GraphQLScalarType;\n```\n\n一个代表布尔值的 `GraphQLScalarType`。\n\n### GraphQLID\n\n```js\nvar GraphQLID: GraphQLScalarType;\n```\n\n一个代表 ID 值的 `GraphQLScalarType`。\n"},"nextDoc":{"frontmatter":{"title":"graphql/utilities","permalink":"/graphql-js/utilities/"}}},"pageContext":{"permalink":"/graphql-js/type/","nextPermalink":"/graphql-js/utilities/","sideBarData":[{"name":"GraphQL.js 教程","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-GettingStarted.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"GraphQL.js 入门","permalink":"/graphql-js/","next":"/graphql-js/running-an-express-graphql-server/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":"入门","date":null},"id":"3ea95341-77af-5951-9ef8-5bc4fe4702f3"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-ExpressGraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"运行一个 Express GraphQL 服务器","permalink":"/graphql-js/running-an-express-graphql-server/","next":"/graphql-js/graphql-clients/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":"Express + GraphQL","date":null},"id":"e2435b54-e4c8-5a2c-9af0-adfa427bd544"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-GraphQLClients.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"GraphQL 客户端","permalink":"/graphql-js/graphql-clients/","next":"/graphql-js/basic-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null},"id":"e17eec27-8eaf-580b-8a2e-60511c61d6a6"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-BasicTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"基本类型","permalink":"/graphql-js/basic-types/","next":"/graphql-js/passing-arguments/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null},"id":"91c209b9-0f23-5084-9ef2-fceb19838836"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-PassingArguments.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"传递参数","permalink":"/graphql-js/passing-arguments/","next":"/graphql-js/object-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null},"id":"06d221f7-5d5d-59b7-8f92-9e5e073478a4"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-ObjectTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"对象类型","permalink":"/graphql-js/object-types/","next":"/graphql-js/mutations-and-input-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null},"id":"393de606-3de6-50fb-8351-a0c6213c9ad6"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-Mutations.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"变更和输入类型","permalink":"/graphql-js/mutations-and-input-types/","next":"/graphql-js/authentication-and-express-middleware/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":null,"date":null},"id":"1c1fc464-3387-5387-b610-108dba71468b"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Tutorial-Authentication.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"认证和 Express 中间件","permalink":"/graphql-js/authentication-and-express-middleware/","next":"/graphql-js/constructing-types/","category":"GraphQL.js 教程","sublinks":null,"sidebarTitle":"认证 & 中间件","date":null},"id":"f186724a-8cbc-5058-b774-4d864fdb6c06"}]},{"name":"高级指南","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/Guides-ConstructingTypes.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"构建类型","permalink":"/graphql-js/constructing-types/","next":"/graphql-js/express-graphql/","category":"高级指南","sublinks":null,"sidebarTitle":null,"date":null},"id":"44d4287b-d8c5-57bf-b565-3b491dc8f538"}]},{"name":"API 参考","links":[{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-ExpressGraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"express-graphql","permalink":"/graphql-js/express-graphql/","next":"/graphql-js/graphql/","category":"API 参考","sublinks":"graphqlHTTP","sidebarTitle":null,"date":null},"id":"77088894-f7e4-5eb1-9677-e19ca0ae1b7f"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-GraphQL.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql","permalink":"/graphql-js/graphql/","next":"/graphql-js/error/","category":"API 参考","sublinks":"graphql","sidebarTitle":null,"date":null},"id":"6d9f33b2-832f-531a-a36b-88b670ef808b"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Errors.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/error","permalink":"/graphql-js/error/","next":"/graphql-js/execution/","category":"API 参考","sublinks":"formatError,GraphQLError,locatedError,syntaxError","sidebarTitle":null,"date":null},"id":"2fe3a3a9-595e-51db-8358-fb386a98cfaa"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Execution.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/execution","permalink":"/graphql-js/execution/","next":"/graphql-js/language/","category":"API 参考","sublinks":"execute","sidebarTitle":null,"date":null},"id":"b151ae43-a88b-54f5-a4b2-0d84c8e842bf"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Language.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/language","permalink":"/graphql-js/language/","next":"/graphql-js/type/","category":"API 参考","sublinks":"BREAK,getLocation,Kind,lex,parse,parseValue,printSource,visit","sidebarTitle":null,"date":null},"id":"24734828-b4e6-56b2-a97e-a8763e6ffe38"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-TypeSystem.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/type","permalink":"/graphql-js/type/","next":"/graphql-js/utilities/","category":"API 参考","sublinks":"getNamedType,getNullableType,GraphQLBoolean,GraphQLEnumType,GraphQLFloat,GraphQLID,GraphQLInputObjectType,GraphQLInt,GraphQLInterfaceType,GraphQLList,GraphQLNonNull,GraphQLObjectType,GraphQLScalarType,GraphQLSchema,GraphQLString,GraphQLUnionType,isAbstractType,isCompositeType,isInputType,isLeafType,isOutputType","sidebarTitle":null,"date":null},"id":"18ad51d1-7c3d-56fe-aba4-d5dc7a463b0e"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Utilities.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/utilities","permalink":"/graphql-js/utilities/","next":"/graphql-js/validation/","category":"API 参考","sublinks":"astFromValue,buildASTSchema,buildClientSchema,buildSchema,introspectionQuery,isValidJSValue,isValidLiteralValue,printIntrospectionSchema,printSchema,typeFromAST,TypeInfo","sidebarTitle":null,"date":null},"id":"0f778670-df34-5066-b0cc-3ed3373df517"},{"fileAbsolutePath":"/home/runner/work/graphql.github.io/graphql.github.io/src/content/graphql-js/APIReference-Validation.md","parent":{"relativeDirectory":"graphql-js","sourceInstanceName":"content"},"frontmatter":{"title":"graphql/validation","permalink":"/graphql-js/validation/","next":null,"category":"API 参考","sublinks":"specifiedRules,validate","sidebarTitle":null,"date":null},"id":"5bae073a-9200-5822-b566-ff993a7d1510"}]}],"sourcePath":"src/content/graphql-js/APIReference-TypeSystem.md"}},"staticQueryHashes":["1581580458"]}