{"version":3,"sources":["webpack:///./src/pages/blog.tsx","webpack:///./src/components/BlogSidebar/index.tsx","webpack:///./src/components/BlogPost/index.tsx"],"names":["pageContext","posts","data","allMarkdownRemark","edges","map","e","node","sort","a","b","aDate","Date","frontmatter","date","bDate","title","className","i","permalink","byline","guestBio","tags","rawMarkdownBody","excerpt","key","isPermalink","showExcerpt","query","BlogSidebar","currentPermalink","allTags","useStaticQuery","group","rel","type","href","fieldValue","tag","toUpperCase","substring","to","BlogPost","toLocaleDateString"],"mappings":"6FAAA,0GAMe,sBAAgC,IAA7BA,EAA6B,EAA7BA,YACVC,EADuC,EAAhBC,KACVC,kBAAkBC,MAClCC,KAAI,SAACC,GAAD,OAAYA,EAAEC,QAClBC,MAAK,SAACC,EAAQC,GACb,IAAMC,EAAQ,IAAIC,KAAKH,EAAEI,YAAYC,MAC/BC,EAAQ,IAAIH,KAAKF,EAAEG,YAAYC,MACrC,OAAIH,EAAQI,GACF,EACCJ,EAAQI,EACV,EAEF,KAGX,OACE,kBAAC,IAAD,CAAQC,MAAM,iBAAiBhB,YAAaA,GAC1C,iCACE,yBAAKiB,UAAU,wBACb,6BACGhB,EAAMI,KACL,WAaEa,GAbF,QAEIL,YACEG,EAHN,EAGMA,MACAF,EAJN,EAIMA,KACAK,EALN,EAKMA,UACAC,EANN,EAMMA,OACAC,EAPN,EAOMA,SACAC,EARN,EAQMA,KAEFC,EAVJ,EAUIA,gBACAC,EAXJ,EAWIA,QAXJ,OAeE,kBAAC,IAAD,CACEC,IAAKP,EACLF,MAAOA,EACPF,KAAMA,EACNK,UAAWA,EACXC,OAAQA,EACRC,SAAUA,EACVE,gBAAiBA,EACjBG,aAAa,EACb1B,YAAaA,EACbwB,QAASA,EACTG,aAAW,EACXL,KAAMA,QAKd,kBAAC,IAAD,CAAarB,MAAOA,QAOvB,IAAM2B,EAAQ,c,oCCjErB,qCA8DeC,IAtDK,SAAC,GAAuC,IAArC5B,EAAqC,EAArCA,MAAO6B,EAA8B,EAA9BA,iBACtBC,EAAUC,yBAAe,cAQ5B7B,kBAAkB8B,MAErB,OACE,yBAAKhB,UAAU,yBACb,yBAAKA,UAAU,8BACb,yCACA,uBAAGiB,IAAI,OAAOC,KAAK,sBAAsBC,KAAK,iBAA9C,QAIF,yBAAKnB,UAAU,+BACb,0CACA,4BACGc,EAAQ1B,KAAI,WAAyCa,GAAc,IAApDmB,EAAoD,EAApDA,WACRC,EAAMD,EAAW,GAAGE,cAAgBF,EAAWG,UAAU,GAC/D,OACE,wBAAIf,IAAKP,GACNmB,IAAeP,EACdQ,EAEA,kBAAC,OAAD,CAAMG,GAAE,SAAWJ,GAAeC,SAO9C,yBAAKrB,UAAU,iCACb,4CACA,4BACGhB,EAAMI,KAAI,WAAkBa,GAAlB,IAAGL,EAAH,EAAGA,YAAH,OACT,wBAAIY,IAAKP,GACNL,EAAYM,YAAcW,EACzBjB,EAAYG,MAEZ,kBAAC,OAAD,CAAMyB,GAAI5B,EAAYM,WAAYN,EAAYG,gB,kCCpD9D,iDAyDe0B,IAvCE,SAAC,GAAD,IACf1B,EADe,EACfA,MACAF,EAFe,EAEfA,KACAK,EAHe,EAGfA,UACAC,EAJe,EAIfA,OACAC,EALe,EAKfA,SACAE,EANe,EAMfA,gBACAG,EAPe,EAOfA,YACA1B,EARe,EAQfA,YACAwB,EATe,EASfA,QACAG,EAVe,EAUfA,YACAL,EAXe,EAWfA,KAXe,OAaf,yBAAKL,UAAU,iBACb,4BAAKS,EAAcV,EAAQ,uBAAGoB,KAAMjB,GAAYH,IAChD,2BACG,IAAIJ,KAAKE,GAAM6B,qBADlB,OAC4CvB,GAE5C,yBAAKH,UAAU,eACZK,EAAKjB,KAAI,SAAAiC,GAAG,OACX,0BAAMrB,UAAU,OACd,kBAAC,OAAD,CAAMwB,GAAE,SAAWH,GAAQA,QAKhCjB,EAAW,KAAO,6BAClBA,GACC,uBAAGJ,UAAU,YAAb,qCAA8DG,EAA9D,KAAyEC,EAAzE,KAGDM,EACC,2BAAIH,GAEJ,kBAAC,IAAD,CAAQxB,YAAaA,GAAcuB","file":"component---src-pages-blog-tsx-3427c1e58b3e7b237881.js","sourcesContent":["import React from \"react\"\nimport Layout from \"../components/Layout\"\nimport BlogPost from \"../components/BlogPost\"\nimport BlogSidebar from \"../components/BlogSidebar\"\nimport { graphql } from \"gatsby\"\n\nexport default ({ pageContext, data }: any) => {\n  const posts = data.allMarkdownRemark.edges\n    .map((e: any) => e.node)\n    .sort((a: any, b: any) => {\n      const aDate = new Date(a.frontmatter.date)\n      const bDate = new Date(b.frontmatter.date)\n      if (aDate > bDate) {\n        return -1\n      } else if (aDate < bDate) {\n        return 1\n      }\n      return 0\n    })\n\n  return (\n    <Layout title=\"Blog | GraphQL\" pageContext={pageContext}>\n      <section>\n        <div className=\"documentationContent\">\n          <div>\n            {posts.map(\n              (\n                {\n                  frontmatter: {\n                    title,\n                    date,\n                    permalink,\n                    byline,\n                    guestBio,\n                    tags,\n                  },\n                  rawMarkdownBody,\n                  excerpt,\n                }: any,\n                i\n              ) => (\n                <BlogPost\n                  key={i}\n                  title={title}\n                  date={date}\n                  permalink={permalink}\n                  byline={byline}\n                  guestBio={guestBio}\n                  rawMarkdownBody={rawMarkdownBody}\n                  isPermalink={false}\n                  pageContext={pageContext}\n                  excerpt={excerpt}\n                  showExcerpt\n                  tags={tags}\n                />\n              )\n            )}\n          </div>\n          <BlogSidebar posts={posts} />\n        </div>\n      </section>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query getAllBlogPosts {\n    allMarkdownRemark(\n      filter: { frontmatter: { permalink: { regex: \"/blog/\" } } }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            date\n            permalink\n            byline\n            guestBio\n            sublinks\n            layout\n            tags\n          }\n          id\n          excerpt\n          rawMarkdownBody\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport { Link, useStaticQuery, graphql } from \"gatsby\"\n\ninterface Props {\n  posts: any[]\n  currentPermalink?: string\n}\n\nconst BlogSidebar = ({ posts, currentPermalink }: Props) => {\n  const allTags = useStaticQuery(graphql`\n    query allTags {\n      allMarkdownRemark {\n        group(field: frontmatter___tags) {\n          fieldValue\n        }\n      }\n    }\n  `).allMarkdownRemark.group\n\n  return (\n    <div className=\"nav-docs blog-sidebar\">\n      <div className=\"nav-docs-section subscribe\">\n        <h3>Subscribe</h3>\n        <a rel=\"home\" type=\"application/rss+xml\" href=\"/blog/rss.xml\">\n          RSS\n        </a>\n      </div>\n      <div className=\"nav-docs-section categories\">\n        <h3>Categories</h3>\n        <ul>\n          {allTags.map(({ fieldValue }: { fieldValue: string }, i: number) => {\n            const tag = fieldValue[0].toUpperCase() + fieldValue.substring(1)\n            return (\n              <li key={i}>\n                {fieldValue === currentPermalink ? (\n                  tag\n                ) : (\n                  <Link to={`/tags/${fieldValue}`}>{tag}</Link>\n                )}\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n      <div className=\"nav-docs-section recent-posts\">\n        <h3>Recent Posts</h3>\n        <ul>\n          {posts.map(({ frontmatter }, i) => (\n            <li key={i}>\n              {frontmatter.permalink === currentPermalink ? (\n                frontmatter.title\n              ) : (\n                <Link to={frontmatter.permalink}>{frontmatter.title}</Link>\n              )}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default BlogSidebar\n","import React from \"react\"\nimport Marked from \"../Marked\"\nimport { Link } from \"gatsby\"\n\ninterface Props {\n  title: string\n  date: string\n  permalink: string\n  byline: string\n  guestBio: string\n  rawMarkdownBody: string\n  isPermalink: boolean\n  pageContext: any\n  excerpt?: string\n  showExcerpt?: true\n  tags: Array<string>\n}\n\nconst BlogPost = ({\n  title,\n  date,\n  permalink,\n  byline,\n  guestBio,\n  rawMarkdownBody,\n  isPermalink,\n  pageContext,\n  excerpt,\n  showExcerpt,\n  tags,\n}: Props) => (\n  <div className=\"inner-content\">\n    <h1>{isPermalink ? title : <a href={permalink}>{title}</a>}</h1>\n    <p>\n      {new Date(date).toLocaleDateString()} by {byline}\n    </p>\n    <div className=\"tag-wrapper\">\n      {tags.map(tag => (\n        <span className=\"tag\">\n          <Link to={`/tags/${tag}`}>{tag}</Link>\n        </span>\n      ))}\n    </div>\n\n    {guestBio ? null : <hr />}\n    {guestBio && (\n      <p className=\"guestBio\">{`This guest article contributed by ${byline}, ${guestBio}.`}</p>\n    )}\n\n    {showExcerpt ? (\n      <p>{excerpt}</p>\n    ) : (\n      <Marked pageContext={pageContext}>{rawMarkdownBody}</Marked>\n    )}\n  </div>\n)\n\nexport default BlogPost\n"],"sourceRoot":""}